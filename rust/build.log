warning: `#[no_mangle]` has no effect on a foreign function
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:130:5
    |
130 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
131 |     fn get_xp_optimized_non_elem_comparison() -> libc::c_int;
    |     --------------------------------------------------------- foreign function
    |
    = note: `#[warn(unused_attributes)]` on by default
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:133:5
    |
133 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
134 |     fn get_with_tim_sort() -> libc::c_int;
    |     -------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:136:5
    |
136 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
137 |     fn get_xp_optimized_filter_first() -> libc::c_int;
    |     -------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:139:5
    |
139 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
140 |     fn get_debug_eval_counts() -> libc::c_int;
    |     ------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:142:5
    |
142 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
143 |     fn get_xpath_streaming() -> libc::c_int;
    |     ---------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: function `get_parser_LIBXML_XINCLUDE_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:152:8
    |
152 | pub fn get_parser_LIBXML_XINCLUDE_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_xinclude_enabled_add_cfg`
    |
    = note: `#[warn(non_snake_case)]` on by default

warning: function `get_parser_LIBXML_THREAD_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:157:8
    |
157 | pub fn get_parser_LIBXML_THREAD_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_thread_enabled_add_cfg`

warning: function `get_parser_LIBXML_HTML_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:162:8
    |
162 | pub fn get_parser_LIBXML_HTML_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_html_enabled_add_cfg`

warning: function `get_parser_HAVE_UNISTD_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:167:8
    |
167 | pub fn get_parser_HAVE_UNISTD_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_have_unistd_h_add_cfg`

warning: function `get_parser_DEBUG_PUSH_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:172:8
    |
172 | pub fn get_parser_DEBUG_PUSH_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_debug_push_add_cfg`

warning: function `get_parser_LIBXML_SCHEMATRON_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:177:8
    |
177 | pub fn get_parser_LIBXML_SCHEMATRON_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_schematron_enabled_add_cfg`

warning: function `get_parser_SAX2_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:182:8
    |
182 | pub fn get_parser_SAX2_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_sax2_add_cfg`

warning: function `get_parser_LIBXML_ICU_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:187:8
    |
187 | pub fn get_parser_LIBXML_ICU_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_icu_enabled_add_cfg`

warning: function `get_parser_LIBXML_UNICODE_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:192:8
    |
192 | pub fn get_parser_LIBXML_UNICODE_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_unicode_enabled_add_cfg`

warning: function `get_parser_LIBXML_FTP_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:197:8
    |
197 | pub fn get_parser_LIBXML_FTP_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_ftp_enabled_add_cfg`

warning: function `get_parser_LIBXML_HTTP_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:202:8
    |
202 | pub fn get_parser_LIBXML_HTTP_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_http_enabled_add_cfg`

warning: function `get_parser_HAVE_ATTRIBUTE_DESTRUCTOR_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:207:8
    |
207 | pub fn get_parser_HAVE_ATTRIBUTE_DESTRUCTOR_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_have_attribute_destructor_add_cfg`

warning: function `get_parser_LIBXML_STATIC_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:212:8
    |
212 | pub fn get_parser_LIBXML_STATIC_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_static_add_cfg`

warning: function `get_parser_WIN32_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:217:8
    |
217 | pub fn get_parser_WIN32_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_win32_add_cfg`

warning: function `get_parser_LIBXML_DEBUG_RUNTIME_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:222:8
    |
222 | pub fn get_parser_LIBXML_DEBUG_RUNTIME_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_debug_runtime_add_cfg`

warning: function `get_parser_STDC_VERSION_199901_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:227:8
    |
227 | pub fn get_parser_STDC_VERSION_199901_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_stdc_version_199901_add_cfg`

warning: function `get_parser_LIBXML_CATALOG_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:232:8
    |
232 | pub fn get_parser_LIBXML_CATALOG_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_catalog_enabled_add_cfg`

warning: function `get_parser_LIBXML_REGEXP_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:237:8
    |
237 | pub fn get_parser_LIBXML_REGEXP_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_regexp_enabled_add_cfg`

warning: function `get_parser_LIBXML_LZMA_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:242:8
    |
242 | pub fn get_parser_LIBXML_LZMA_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_lzma_enabled_add_cfg`

warning: function `get_parser_LIBXML_SCHEMAS_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:247:8
    |
247 | pub fn get_parser_LIBXML_SCHEMAS_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_schemas_enabled_add_cfg`

warning: function `get_parser_HAVE_CTYPE_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:252:8
    |
252 | pub fn get_parser_HAVE_CTYPE_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_have_ctype_h_add_cfg`

warning: function `get_parser_LIBXML_STATIC_FOR_DLL_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:257:8
    |
257 | pub fn get_parser_LIBXML_STATIC_FOR_DLL_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_static_for_dll_add_cfg`

warning: function `get_parser_LIBXML_READER_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:262:8
    |
262 | pub fn get_parser_LIBXML_READER_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_reader_enabled_add_cfg`

warning: function `get_parser_HAVE_FCNTL_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:267:8
    |
267 | pub fn get_parser_HAVE_FCNTL_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_have_fcntl_h_add_cfg`

warning: function `get_parser_LIBXML_ZLIB_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:272:8
    |
272 | pub fn get_parser_LIBXML_ZLIB_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_zlib_enabled_add_cfg`

warning: function `get_parser_XML_XML_NAMESPACE_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:277:8
    |
277 | pub fn get_parser_XML_XML_NAMESPACE_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_xml_xml_namespace_add_cfg`

warning: function `get_parser_LIBXML_PATTERN_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:282:8
    |
282 | pub fn get_parser_LIBXML_PATTERN_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_pattern_enabled_add_cfg`

warning: function `get_parser_LIBXML_VALID_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:287:8
    |
287 | pub fn get_parser_LIBXML_VALID_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_valid_enabled_add_cfg`

warning: function `get_parser_LIBXML_C14N_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:292:8
    |
292 | pub fn get_parser_LIBXML_C14N_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_c14_n_enabled_add_cfg`

warning: function `get_parser_LIBXML_WRITER_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:297:8
    |
297 | pub fn get_parser_LIBXML_WRITER_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_writer_enabled_add_cfg`

warning: function `get_parser_LIBXML_AUTOMATA_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:302:8
    |
302 | pub fn get_parser_LIBXML_AUTOMATA_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_automata_enabled_add_cfg`

warning: function `get_parser_LIBXML_TREE_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:307:8
    |
307 | pub fn get_parser_LIBXML_TREE_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_tree_enabled_add_cfg`

warning: function `get_parser_LIBXML_XPTR_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:312:8
    |
312 | pub fn get_parser_LIBXML_XPTR_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_xptr_enabled_add_cfg`

warning: function `get_parser_LIBXML_XPATH_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:317:8
    |
317 | pub fn get_parser_LIBXML_XPATH_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_xpath_enabled_add_cfg`

warning: function `get_parser_DEBUG_MEMORY_LOCATION_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:322:8
    |
322 | pub fn get_parser_DEBUG_MEMORY_LOCATION_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_debug_memory_location_add_cfg`

warning: function `get_parser_LIBXML_SAX1_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:327:8
    |
327 | pub fn get_parser_LIBXML_SAX1_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_sax1_enabled_add_cfg`

warning: function `get_parser_LIBXML_DEBUG_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:332:8
    |
332 | pub fn get_parser_LIBXML_DEBUG_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_debug_enabled_add_cfg`

warning: function `get_parser_HAVE_SYS_STAT_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:337:8
    |
337 | pub fn get_parser_HAVE_SYS_STAT_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_have_sys_stat_h_add_cfg`

warning: function `get_parser_HAVE_STDLIB_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:342:8
    |
342 | pub fn get_parser_HAVE_STDLIB_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_have_stdlib_h_add_cfg`

warning: function `get_parser_LIBXML_ICONV_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:347:8
    |
347 | pub fn get_parser_LIBXML_ICONV_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_iconv_enabled_add_cfg`

warning: function `get_parser_LIBXML_EXPR_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:352:8
    |
352 | pub fn get_parser_LIBXML_EXPR_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_expr_enabled_add_cfg`

warning: function `get_parser_DEBUG_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:357:8
    |
357 | pub fn get_parser_DEBUG_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_debug_add_cfg`

warning: function `get_parser_LIBXML_PUSH_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:362:8
    |
362 | pub fn get_parser_LIBXML_PUSH_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_push_enabled_add_cfg`

warning: function `get_parser_LIBXML_LEGACY_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:367:8
    |
367 | pub fn get_parser_LIBXML_LEGACY_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_legacy_enabled_add_cfg`

warning: function `get_parser_LIBXML_MODULES_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:372:8
    |
372 | pub fn get_parser_LIBXML_MODULES_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_modules_enabled_add_cfg`

warning: function `get_parser_LIBXML_OUTPUT_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:377:8
    |
377 | pub fn get_parser_LIBXML_OUTPUT_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_output_enabled_add_cfg`

warning: function `get_parser_LIBXML_ISO8859X_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:382:8
    |
382 | pub fn get_parser_LIBXML_ISO8859X_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_libxml_iso8859_x_enabled_add_cfg`

warning: function `get_parserInternals_WIN32_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:391:8
    |
391 | pub fn get_parserInternals_WIN32_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_win32_add_cfg`

warning: function `get_parserInternals_CYGWIN_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:396:8
    |
396 | pub fn get_parserInternals_CYGWIN_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_cygwin_add_cfg`

warning: function `get_parserInternals_HAVE_CTYPE_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:401:8
    |
401 | pub fn get_parserInternals_HAVE_CTYPE_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_have_ctype_h_add_cfg`

warning: function `get_parserInternals_HAVE_STDLIB_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:406:8
    |
406 | pub fn get_parserInternals_HAVE_STDLIB_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_have_stdlib_h_add_cfg`

warning: function `get_parserInternals_HAVE_SYS_STAT_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:411:8
    |
411 | pub fn get_parserInternals_HAVE_SYS_STAT_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_have_sys_stat_h_add_cfg`

warning: function `get_parserInternals_HAVE_FCNTL_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:416:8
    |
416 | pub fn get_parserInternals_HAVE_FCNTL_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_have_fcntl_h_add_cfg`

warning: function `get_parserInternals_HAVE_UNISTD_H_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:421:8
    |
421 | pub fn get_parserInternals_HAVE_UNISTD_H_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_have_unistd_h_add_cfg`

warning: function `get_parserInternals_LIBXML_ZLIB_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:426:8
    |
426 | pub fn get_parserInternals_LIBXML_ZLIB_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_libxml_zlib_enabled_add_cfg`

warning: function `get_parserInternals_LIBXML_CATALOG_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:431:8
    |
431 | pub fn get_parserInternals_LIBXML_CATALOG_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_libxml_catalog_enabled_add_cfg`

warning: function `get_parserInternals_DEBUG_INPUT_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:436:8
    |
436 | pub fn get_parserInternals_DEBUG_INPUT_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_debug_input_add_cfg`

warning: function `get_parserInternals_LIBXML_SAX1_ENABLED_add_cfg` should have a snake case name
   --> /root/codes/libxml2-2.9.12_merge_version/rust_ffi/src/lib.rs:441:8
    |
441 | pub fn get_parserInternals_LIBXML_SAX1_ENABLED_add_cfg(){
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parser_internals_libxml_sax1_enabled_add_cfg`

warning: `rust_ffi` (lib) generated 63 warnings
warning: unused doc comment
  --> src/build.rs:12:5
   |
12 | /     /**
13 | |      * parser.c
14 | |      **/
   | |________^
15 |       rust_ffi::get_parser_LIBXML_XINCLUDE_ENABLED_add_cfg();
   |       ------------------------------------------------------ rustdoc does not generate documentation for expressions
   |
   = note: `#[warn(unused_doc_comments)]` on by default
   = help: use `/* */` for a plain comment

warning: unused doc comment
  --> src/build.rs:62:5
   |
62 | /     /**
63 | |      * parserInternals.c
64 | |      **/
   | |________^
65 |       rust_ffi::get_parserInternals_WIN32_add_cfg();
   |       --------------------------------------------- rustdoc does not generate documentation for expressions
   |
   = help: use `/* */` for a plain comment

warning: `rust_project` (build script) generated 2 warnings
   Compiling rust_project v0.1.0 (/root/codes/libxml2-2.9.12_merge_version/rust)
warning: type `__off_t` should have an upper camel case name
 --> src/defination.rs:4:10
  |
4 | pub type __off_t = libc::c_long;
  |          ^^^^^^^ help: convert the identifier to upper camel case: `OffT`
  |
  = note: `#[warn(non_camel_case_types)]` on by default

warning: type `__off64_t` should have an upper camel case name
 --> src/defination.rs:5:10
  |
5 | pub type __off64_t = libc::c_long;
  |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Off64T`

warning: type `_IO_lock_t` should have an upper camel case name
  --> src/defination.rs:39:10
   |
39 | pub type _IO_lock_t = ();
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `IoLockT`

warning: type `__uint32_t` should have an upper camel case name
  --> src/defination.rs:67:10
   |
67 | pub type __uint32_t = libc::c_uint;
   |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint32T`

warning: type `__time_t` should have an upper camel case name
  --> src/defination.rs:68:10
   |
68 | pub type __time_t = libc::c_long;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `TimeT`

warning: type `time_t` should have an upper camel case name
  --> src/defination.rs:69:10
   |
69 | pub type time_t = __time_t;
   |          ^^^^^^ help: convert the identifier to upper camel case: `TimeT`

warning: type `uint32_t` should have an upper camel case name
  --> src/defination.rs:70:10
   |
70 | pub type uint32_t = __uint32_t;
   |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint32T`

warning: type `xmlDictStringsPtr` should have an upper camel case name
  --> src/defination.rs:86:10
   |
86 | pub type xmlDictStringsPtr = *mut xmlDictStrings;
   |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDictStringsPtr`

warning: type `xmlDictStrings` should have an upper camel case name
  --> src/defination.rs:87:10
   |
87 | pub type xmlDictStrings = _xmlDictStrings;
   |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDictStrings`

warning: type `xmlDictEntry` should have an upper camel case name
   --> src/defination.rs:108:10
    |
108 | pub type xmlDictEntry = _xmlDictEntry;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDictEntry`

warning: type `xmlHashCopier` should have an upper camel case name
   --> src/defination.rs:138:10
    |
138 | pub type xmlHashCopier
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashCopier`

warning: type `xmlHashScanner` should have an upper camel case name
   --> src/defination.rs:142:10
    |
142 | pub type xmlHashScanner
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashScanner`

warning: type `xmlHashEntry` should have an upper camel case name
   --> src/defination.rs:147:10
    |
147 | pub type xmlHashEntry = _xmlHashEntry;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashEntry`

warning: type `xmlHashEntryPtr` should have an upper camel case name
   --> src/defination.rs:149:10
    |
149 | pub type xmlHashEntryPtr = *mut xmlHashEntry;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashEntryPtr`

warning: type `xmlRegTrans` should have an upper camel case name
   --> src/defination.rs:161:10
    |
161 | pub type xmlRegTrans = _xmlRegTrans;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegTrans`

warning: type `xmlRegAtomPtr` should have an upper camel case name
   --> src/defination.rs:171:10
    |
171 | pub type xmlRegAtomPtr = *mut xmlRegAtom;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegAtomPtr`

warning: type `xmlRegAtom` should have an upper camel case name
   --> src/defination.rs:172:10
    |
172 | pub type xmlRegAtom = _xmlRegAtom;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegAtom`

warning: type `xmlRegRangePtr` should have an upper camel case name
   --> src/defination.rs:193:10
    |
193 | pub type xmlRegRangePtr = *mut xmlRegRange;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegRangePtr`

warning: type `xmlRegRange` should have an upper camel case name
   --> src/defination.rs:194:10
    |
194 | pub type xmlRegRange = _xmlRegRange;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegRange`

warning: type `xmlRegAtomType` should have an upper camel case name
   --> src/defination.rs:204:10
    |
204 | pub type xmlRegAtomType = libc::c_uint;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegAtomType`

warning: type `xmlRegStatePtr` should have an upper camel case name
   --> src/defination.rs:258:10
    |
258 | pub type xmlRegStatePtr = *mut xmlRegState;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegStatePtr`

warning: type `xmlRegState` should have an upper camel case name
   --> src/defination.rs:259:10
    |
259 | pub type xmlRegState = _xmlAutomataState;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegState`

warning: type `xmlRegQuantType` should have an upper camel case name
   --> src/defination.rs:260:10
    |
260 | pub type xmlRegQuantType = libc::c_uint;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegQuantType`

warning: type `xmlRegMarkedType` should have an upper camel case name
   --> src/defination.rs:269:10
    |
269 | pub type xmlRegMarkedType = libc::c_uint;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegMarkedType`

warning: type `xmlRegStateType` should have an upper camel case name
   --> src/defination.rs:273:10
    |
273 | pub type xmlRegStateType = libc::c_uint;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegStateType`

warning: type `xmlRegCounter` should have an upper camel case name
   --> src/defination.rs:279:10
    |
279 | pub type xmlRegCounter = _xmlRegCounter;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegCounter`

warning: type `xmlRegexp` should have an upper camel case name
   --> src/defination.rs:305:10
    |
305 | pub type xmlRegexp = _xmlRegexp;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegexp`

warning: type `xmlRegexpPtr` should have an upper camel case name
   --> src/defination.rs:306:10
    |
306 | pub type xmlRegexpPtr = *mut xmlRegexp;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegexpPtr`

warning: type `xmlRegInputTokenPtr` should have an upper camel case name
   --> src/defination.rs:334:10
    |
334 | pub type xmlRegInputTokenPtr = *mut xmlRegInputToken;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegInputTokenPtr`

warning: type `xmlRegInputToken` should have an upper camel case name
   --> src/defination.rs:336:10
    |
336 | pub type xmlRegInputToken = _xmlRegInputToken;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegInputToken`

warning: type `xmlRegExecRollback` should have an upper camel case name
   --> src/defination.rs:343:10
    |
343 | pub type xmlRegExecRollback = _xmlRegExecRollback;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegExecRollback`

warning: type `xmlRegExecCallbacks` should have an upper camel case name
   --> src/defination.rs:352:10
    |
352 | pub type xmlRegExecCallbacks
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegExecCallbacks`

warning: type `xmlRegExecCtxtPtr` should have an upper camel case name
   --> src/defination.rs:357:10
    |
357 | pub type xmlRegExecCtxtPtr = *mut xmlRegExecCtxt;
    |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegExecCtxtPtr`

warning: type `xmlRegExecCtxt` should have an upper camel case name
   --> src/defination.rs:358:10
    |
358 | pub type xmlRegExecCtxt = _xmlRegExecCtxt;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegExecCtxt`

warning: type `xmlRegParserCtxtPtr` should have an upper camel case name
   --> src/defination.rs:359:10
    |
359 | pub type xmlRegParserCtxtPtr = *mut xmlRegParserCtxt;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegParserCtxtPtr`

warning: type `xmlRegParserCtxt` should have an upper camel case name
   --> src/defination.rs:360:10
    |
360 | pub type xmlRegParserCtxt = _xmlAutomata;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegParserCtxt`

warning: type `xmlRegTransPtr` should have an upper camel case name
   --> src/defination.rs:361:10
    |
361 | pub type xmlRegTransPtr = *mut xmlRegTrans;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegTransPtr`

warning: type `xmlRegCounterPtr` should have an upper camel case name
   --> src/defination.rs:362:10
    |
362 | pub type xmlRegCounterPtr = *mut xmlRegCounter;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRegCounterPtr`

warning: type `xmlElementPtr` should have an upper camel case name
   --> src/defination.rs:421:10
    |
421 | pub type xmlElementPtr = *mut xmlElement;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementPtr`

warning: type `xmlElement` should have an upper camel case name
   --> src/defination.rs:427:10
    |
427 | pub type xmlElement = _xmlElement;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElement`

warning: type `xmlElementTypeVal` should have an upper camel case name
   --> src/defination.rs:428:10
    |
428 | pub type xmlElementTypeVal = libc::c_uint;
    |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementTypeVal`

warning: type `xmlAttributePtr` should have an upper camel case name
   --> src/defination.rs:447:10
    |
447 | pub type xmlAttributePtr = *mut xmlAttribute;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttributePtr`

warning: type `xmlAttribute` should have an upper camel case name
   --> src/defination.rs:454:10
    |
454 | pub type xmlAttribute = _xmlAttribute;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttribute`

warning: type `xmlAttributeDefault` should have an upper camel case name
   --> src/defination.rs:475:10
    |
475 | pub type xmlAttributeDefault = libc::c_uint;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttributeDefault`

warning: type `xmlNotation` should have an upper camel case name
   --> src/defination.rs:485:10
    |
485 | pub type xmlNotation = _xmlNotation;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNotation`

warning: type `xmlNotationPtr` should have an upper camel case name
   --> src/defination.rs:486:10
    |
486 | pub type xmlNotationPtr = *mut xmlNotation;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNotationPtr`

warning: type `xmlID` should have an upper camel case name
   --> src/defination.rs:499:10
    |
499 | pub type xmlID = _xmlID;
    |          ^^^^^ help: convert the identifier to upper camel case: `XmlId`

warning: type `xmlIDPtr` should have an upper camel case name
   --> src/defination.rs:500:10
    |
500 | pub type xmlIDPtr = *mut xmlID;
    |          ^^^^^^^^ help: convert the identifier to upper camel case: `XmlIdptr`

warning: type `xmlRef` should have an upper camel case name
   --> src/defination.rs:516:10
    |
516 | pub type xmlRef = _xmlRef;
    |          ^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRef`

warning: type `xmlRefPtr` should have an upper camel case name
   --> src/defination.rs:517:10
    |
517 | pub type xmlRefPtr = *mut xmlRef;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRefPtr`

warning: type `xmlValidStatePtr` should have an upper camel case name
   --> src/defination.rs:518:10
    |
518 | pub type xmlValidStatePtr = *mut xmlValidState;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidStatePtr`

warning: type `xmlNotationTable` should have an upper camel case name
   --> src/defination.rs:519:10
    |
519 | pub type xmlNotationTable = _xmlHashTable;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNotationTable`

warning: type `xmlNotationTablePtr` should have an upper camel case name
   --> src/defination.rs:520:10
    |
520 | pub type xmlNotationTablePtr = *mut xmlNotationTable;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNotationTablePtr`

warning: type `xmlElementTable` should have an upper camel case name
   --> src/defination.rs:521:10
    |
521 | pub type xmlElementTable = _xmlHashTable;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementTable`

warning: type `xmlElementTablePtr` should have an upper camel case name
   --> src/defination.rs:522:10
    |
522 | pub type xmlElementTablePtr = *mut xmlElementTable;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementTablePtr`

warning: type `xmlAttributeTable` should have an upper camel case name
   --> src/defination.rs:523:10
    |
523 | pub type xmlAttributeTable = _xmlHashTable;
    |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttributeTable`

warning: type `xmlAttributeTablePtr` should have an upper camel case name
   --> src/defination.rs:524:10
    |
524 | pub type xmlAttributeTablePtr = *mut xmlAttributeTable;
    |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttributeTablePtr`

warning: type `xmlIDTable` should have an upper camel case name
   --> src/defination.rs:525:10
    |
525 | pub type xmlIDTable = _xmlHashTable;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlIdtable`

warning: type `xmlIDTablePtr` should have an upper camel case name
   --> src/defination.rs:526:10
    |
526 | pub type xmlIDTablePtr = *mut xmlIDTable;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlIdtablePtr`

warning: type `xmlRefTable` should have an upper camel case name
   --> src/defination.rs:527:10
    |
527 | pub type xmlRefTable = _xmlHashTable;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRefTable`

warning: type `xmlRefTablePtr` should have an upper camel case name
   --> src/defination.rs:528:10
    |
528 | pub type xmlRefTablePtr = *mut xmlRefTable;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlRefTablePtr`

warning: type `xmlValidateMemo` should have an upper camel case name
   --> src/defination.rs:529:10
    |
529 | pub type xmlValidateMemo = xmlValidateMemo_t;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidateMemo`

warning: type `xmlValidateMemoPtr` should have an upper camel case name
   --> src/defination.rs:536:10
    |
536 | pub type xmlValidateMemoPtr = *mut xmlValidateMemo;
    |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidateMemoPtr`

warning: type `xmlEntitiesTablePtr` should have an upper camel case name
   --> src/defination.rs:537:10
    |
537 | pub type xmlEntitiesTablePtr = *mut xmlEntitiesTable;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEntitiesTablePtr`

warning: type `xmlEntitiesTable` should have an upper camel case name
   --> src/defination.rs:538:10
    |
538 | pub type xmlEntitiesTable = _xmlHashTable;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEntitiesTable`

warning: type `xmlChar` should have an upper camel case name
   --> src/defination.rs:544:10
    |
544 | pub type xmlChar = libc::c_uchar;
    |          ^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlChar`

warning: type `size_t` should have an upper camel case name
   --> src/defination.rs:545:10
    |
545 | pub type size_t = libc::c_ulong;
    |          ^^^^^^ help: convert the identifier to upper camel case: `SizeT`

warning: type `ptrdiff_t` should have an upper camel case name
   --> src/defination.rs:546:10
    |
546 | pub type ptrdiff_t = libc::c_long;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case: `PtrdiffT`

warning: type `xmlFreeFunc` should have an upper camel case name
   --> src/defination.rs:547:10
    |
547 | pub type xmlFreeFunc
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlFreeFunc`

warning: type `xmlMallocFunc` should have an upper camel case name
   --> src/defination.rs:550:10
    |
550 | pub type xmlMallocFunc
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlMallocFunc`

warning: type `xmlReallocFunc` should have an upper camel case name
   --> src/defination.rs:553:10
    |
553 | pub type xmlReallocFunc
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlReallocFunc`

warning: type `xmlBufPtr` should have an upper camel case name
   --> src/defination.rs:571:10
    |
571 | pub type xmlBufPtr = *mut xmlBuf;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlBufPtr`

warning: type `xmlBuf` should have an upper camel case name
   --> src/defination.rs:572:10
    |
572 | pub type xmlBuf = _xmlBuf;
    |          ^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlBuf`

warning: type `xmlCharEncodingHandlerPtr` should have an upper camel case name
   --> src/defination.rs:573:10
    |
573 | pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlCharEncodingHandlerPtr`

warning: type `xmlCharEncodingHandler` should have an upper camel case name
   --> src/defination.rs:574:10
    |
574 | pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
    |          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlCharEncodingHandler`

warning: type `iconv_t` should have an upper camel case name
   --> src/defination.rs:586:10
    |
586 | pub type iconv_t = *mut libc::c_void;
    |          ^^^^^^^ help: convert the identifier to upper camel case: `IconvT`

warning: type `xmlCharEncodingOutputFunc` should have an upper camel case name
   --> src/defination.rs:587:10
    |
587 | pub type xmlCharEncodingOutputFunc
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlCharEncodingOutputFunc`

warning: type `xmlCharEncodingInputFunc` should have an upper camel case name
   --> src/defination.rs:592:10
    |
592 | pub type xmlCharEncodingInputFunc
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlCharEncodingInputFunc`

warning: type `xmlInputCloseCallback` should have an upper camel case name
   --> src/defination.rs:598:10
    |
598 | pub type xmlInputCloseCallback
    |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlInputCloseCallback`

warning: type `xmlInputReadCallback` should have an upper camel case name
   --> src/defination.rs:603:10
    |
603 | pub type xmlInputReadCallback
    |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlInputReadCallback`

warning: type `xmlParserInputBuffer` should have an upper camel case name
   --> src/defination.rs:607:10
    |
607 | pub type xmlParserInputBuffer = _xmlParserInputBuffer;
    |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserInputBuffer`

warning: type `xmlParserInputBufferPtr` should have an upper camel case name
   --> src/defination.rs:608:10
    |
608 | pub type xmlParserInputBufferPtr = *mut xmlParserInputBuffer;
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserInputBufferPtr`

warning: type `xmlParserInputDeallocate` should have an upper camel case name
   --> src/defination.rs:630:10
    |
630 | pub type xmlParserInputDeallocate
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserInputDeallocate`

warning: type `xmlParserInput` should have an upper camel case name
   --> src/defination.rs:634:10
    |
634 | pub type xmlParserInput = _xmlParserInput;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserInput`

warning: type `xmlParserInputPtr` should have an upper camel case name
   --> src/defination.rs:635:10
    |
635 | pub type xmlParserInputPtr = *mut xmlParserInput;
    |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserInputPtr`

warning: type `xmlParserNodeInfo` should have an upper camel case name
   --> src/defination.rs:731:10
    |
731 | pub type xmlParserNodeInfo = _xmlParserNodeInfo;
    |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserNodeInfo`

warning: type `xmlNs` should have an upper camel case name
   --> src/defination.rs:762:10
    |
762 | pub type xmlNs = _xmlNs;
    |          ^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNs`

warning: type `xmlElementType` should have an upper camel case name
   --> src/defination.rs:821:10
    |
821 | pub type xmlElementType = libc::c_uint;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementType`

warning: type `xmlNsType` should have an upper camel case name
   --> src/defination.rs:843:10
    |
843 | pub type xmlNsType = xmlElementType;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNsType`

warning: type `xmlAttributeType` should have an upper camel case name
   --> src/defination.rs:861:10
    |
861 | pub type xmlAttributeType = libc::c_uint;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttributeType`

warning: type `xmlParserMode` should have an upper camel case name
   --> src/defination.rs:872:10
    |
872 | pub type xmlParserMode = libc::c_uint;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserMode`

warning: type `xmlError` should have an upper camel case name
   --> src/defination.rs:880:10
    |
880 | pub type xmlError = _xmlError;
    |          ^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlError`

warning: type `xmlErrorLevel` should have an upper camel case name
   --> src/defination.rs:898:10
    |
898 | pub type xmlErrorLevel = libc::c_uint;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlErrorLevel`

warning: type `xmlAttrPtr` should have an upper camel case name
   --> src/defination.rs:903:10
    |
903 | pub type xmlAttrPtr = *mut xmlAttr;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttrPtr`

warning: type `xmlAttr` should have an upper camel case name
   --> src/defination.rs:904:10
    |
904 | pub type xmlAttr = _xmlAttr;
    |          ^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAttr`

warning: type `xmlNodePtr` should have an upper camel case name
   --> src/defination.rs:905:10
    |
905 | pub type xmlNodePtr = *mut xmlNode;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNodePtr`

warning: type `xmlNode` should have an upper camel case name
   --> src/defination.rs:906:10
    |
906 | pub type xmlNode = _xmlNode;
    |          ^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNode`

warning: type `xmlHashTablePtr` should have an upper camel case name
   --> src/defination.rs:908:10
    |
908 | pub type xmlHashTablePtr = *mut xmlHashTable;
    |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashTablePtr`

warning: type `xmlHashTable` should have an upper camel case name
   --> src/defination.rs:909:10
    |
909 | pub type xmlHashTable = _xmlHashTable;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashTable`

warning: type `xmlStartTag` should have an upper camel case name
   --> src/defination.rs:910:10
    |
910 | pub type xmlStartTag = _xmlStartTag;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlStartTag`

warning: type `xmlDictPtr` should have an upper camel case name
   --> src/defination.rs:920:10
    |
920 | pub type xmlDictPtr = *mut xmlDict;
    |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDictPtr`

warning: type `xmlDict` should have an upper camel case name
   --> src/defination.rs:921:10
    |
921 | pub type xmlDict = _xmlDict;
    |          ^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDict`

warning: type `xmlParserInputState` should have an upper camel case name
   --> src/defination.rs:922:10
    |
922 | pub type xmlParserInputState = libc::c_int;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserInputState`

warning: type `xmlValidCtxt` should have an upper camel case name
   --> src/defination.rs:941:10
    |
941 | pub type xmlValidCtxt = _xmlValidCtxt;
    |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidCtxt`

warning: type `xmlAutomataStatePtr` should have an upper camel case name
   --> src/defination.rs:963:10
    |
963 | pub type xmlAutomataStatePtr = *mut xmlAutomataState;
    |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAutomataStatePtr`

warning: type `xmlAutomataState` should have an upper camel case name
   --> src/defination.rs:964:10
    |
964 | pub type xmlAutomataState = _xmlAutomataState;
    |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAutomataState`

warning: type `xmlAutomataPtr` should have an upper camel case name
   --> src/defination.rs:965:10
    |
965 | pub type xmlAutomataPtr = *mut xmlAutomata;
    |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAutomataPtr`

warning: type `xmlAutomata` should have an upper camel case name
   --> src/defination.rs:966:10
    |
966 | pub type xmlAutomata = _xmlAutomata;
    |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlAutomata`

warning: type `xmlValidState` should have an upper camel case name
   --> src/defination.rs:967:10
    |
967 | pub type xmlValidState = _xmlValidState;
    |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidState`

warning: type `xmlDocPtr` should have an upper camel case name
   --> src/defination.rs:969:10
    |
969 | pub type xmlDocPtr = *mut xmlDoc;
    |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDocPtr`

warning: type `xmlDoc` should have an upper camel case name
   --> src/defination.rs:970:10
    |
970 | pub type xmlDoc = _xmlDoc;
    |          ^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDoc`

warning: type `xmlValidityWarningFunc` should have an upper camel case name
   --> src/defination.rs:971:10
    |
971 | pub type xmlValidityWarningFunc
    |          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidityWarningFunc`

warning: type `xmlValidityErrorFunc` should have an upper camel case name
   --> src/defination.rs:975:10
    |
975 | pub type xmlValidityErrorFunc
    |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidityErrorFunc`

warning: type `xmlParserNodeInfoSeq` should have an upper camel case name
   --> src/defination.rs:979:10
    |
979 | pub type xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;
    |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserNodeInfoSeq`

warning: type `xmlStructuredErrorFunc` should have an upper camel case name
    --> src/defination.rs:1024:10
     |
1024 | pub type xmlStructuredErrorFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlStructuredErrorFunc`

warning: type `xmlErrorPtr` should have an upper camel case name
    --> src/defination.rs:1027:10
     |
1027 | pub type xmlErrorPtr = *mut xmlError;
     |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlErrorPtr`

warning: type `endElementNsSAX2Func` should have an upper camel case name
    --> src/defination.rs:1028:10
     |
1028 | pub type endElementNsSAX2Func
     |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `EndElementNsSax2func`

warning: type `startElementNsSAX2Func` should have an upper camel case name
    --> src/defination.rs:1032:10
     |
1032 | pub type startElementNsSAX2Func
     |          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `StartElementNsSax2func`

warning: type `externalSubsetSAXFunc` should have an upper camel case name
    --> src/defination.rs:1039:10
     |
1039 | pub type externalSubsetSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ExternalSubsetSaxfunc`

warning: type `cdataBlockSAXFunc` should have an upper camel case name
    --> src/defination.rs:1043:10
     |
1043 | pub type cdataBlockSAXFunc
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CdataBlockSaxfunc`

warning: type `getParameterEntitySAXFunc` should have an upper camel case name
    --> src/defination.rs:1047:10
     |
1047 | pub type getParameterEntitySAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `GetParameterEntitySaxfunc`

warning: type `xmlEntityPtr` should have an upper camel case name
    --> src/defination.rs:1051:10
     |
1051 | pub type xmlEntityPtr = *mut xmlEntity;
     |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEntityPtr`

warning: type `xmlEntity` should have an upper camel case name
    --> src/defination.rs:1052:10
     |
1052 | pub type xmlEntity = _xmlEntity;
     |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEntity`

warning: type `xmlEntityType` should have an upper camel case name
    --> src/defination.rs:1077:10
     |
1077 | pub type xmlEntityType = libc::c_uint;
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEntityType`

warning: type `fatalErrorSAXFunc` should have an upper camel case name
    --> src/defination.rs:1084:10
     |
1084 | pub type fatalErrorSAXFunc
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `FatalErrorSaxfunc`

warning: type `errorSAXFunc` should have an upper camel case name
    --> src/defination.rs:1088:10
     |
1088 | pub type errorSAXFunc
     |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ErrorSaxfunc`

warning: type `warningSAXFunc` should have an upper camel case name
    --> src/defination.rs:1092:10
     |
1092 | pub type warningSAXFunc
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `WarningSaxfunc`

warning: type `commentSAXFunc` should have an upper camel case name
    --> src/defination.rs:1096:10
     |
1096 | pub type commentSAXFunc
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CommentSaxfunc`

warning: type `processingInstructionSAXFunc` should have an upper camel case name
    --> src/defination.rs:1100:10
     |
1100 | pub type processingInstructionSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ProcessingInstructionSaxfunc`

warning: type `ignorableWhitespaceSAXFunc` should have an upper camel case name
    --> src/defination.rs:1104:10
     |
1104 | pub type ignorableWhitespaceSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `IgnorableWhitespaceSaxfunc`

warning: type `charactersSAXFunc` should have an upper camel case name
    --> src/defination.rs:1108:10
     |
1108 | pub type charactersSAXFunc
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `CharactersSaxfunc`

warning: type `referenceSAXFunc` should have an upper camel case name
    --> src/defination.rs:1112:10
     |
1112 | pub type referenceSAXFunc
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ReferenceSaxfunc`

warning: type `endElementSAXFunc` should have an upper camel case name
    --> src/defination.rs:1116:10
     |
1116 | pub type endElementSAXFunc
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `EndElementSaxfunc`

warning: type `startElementSAXFunc` should have an upper camel case name
    --> src/defination.rs:1120:10
     |
1120 | pub type startElementSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `StartElementSaxfunc`

warning: type `endDocumentSAXFunc` should have an upper camel case name
    --> src/defination.rs:1124:10
     |
1124 | pub type endDocumentSAXFunc
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `EndDocumentSaxfunc`

warning: type `startDocumentSAXFunc` should have an upper camel case name
    --> src/defination.rs:1127:10
     |
1127 | pub type startDocumentSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `StartDocumentSaxfunc`

warning: type `setDocumentLocatorSAXFunc` should have an upper camel case name
    --> src/defination.rs:1130:10
     |
1130 | pub type setDocumentLocatorSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `SetDocumentLocatorSaxfunc`

warning: type `xmlSAXLocatorPtr` should have an upper camel case name
    --> src/defination.rs:1134:10
     |
1134 | pub type xmlSAXLocatorPtr = *mut xmlSAXLocator;
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlSaxlocatorPtr`

warning: type `xmlSAXLocator` should have an upper camel case name
    --> src/defination.rs:1135:10
     |
1135 | pub type xmlSAXLocator = _xmlSAXLocator;
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlSaxlocator`

warning: type `unparsedEntityDeclSAXFunc` should have an upper camel case name
    --> src/defination.rs:1148:10
     |
1148 | pub type unparsedEntityDeclSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `UnparsedEntityDeclSaxfunc`

warning: type `elementDeclSAXFunc` should have an upper camel case name
    --> src/defination.rs:1153:10
     |
1153 | pub type elementDeclSAXFunc
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ElementDeclSaxfunc`

warning: type `xmlElementContentPtr` should have an upper camel case name
    --> src/defination.rs:1158:10
     |
1158 | pub type xmlElementContentPtr = *mut xmlElementContent;
     |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementContentPtr`

warning: type `xmlElementContent` should have an upper camel case name
    --> src/defination.rs:1159:10
     |
1159 | pub type xmlElementContent = _xmlElementContent;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementContent`

warning: type `xmlElementContentOccur` should have an upper camel case name
    --> src/defination.rs:1171:10
     |
1171 | pub type xmlElementContentOccur = libc::c_uint;
     |          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementContentOccur`

warning: type `xmlElementContentType` should have an upper camel case name
    --> src/defination.rs:1176:10
     |
1176 | pub type xmlElementContentType = libc::c_uint;
     |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlElementContentType`

warning: type `attributeDeclSAXFunc` should have an upper camel case name
    --> src/defination.rs:1181:10
     |
1181 | pub type attributeDeclSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `AttributeDeclSaxfunc`

warning: type `xmlEnumerationPtr` should have an upper camel case name
    --> src/defination.rs:1187:10
     |
1187 | pub type xmlEnumerationPtr = *mut xmlEnumeration;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEnumerationPtr`

warning: type `xmlEnumeration` should have an upper camel case name
    --> src/defination.rs:1188:10
     |
1188 | pub type xmlEnumeration = _xmlEnumeration;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEnumeration`

warning: type `notationDeclSAXFunc` should have an upper camel case name
    --> src/defination.rs:1195:10
     |
1195 | pub type notationDeclSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `NotationDeclSaxfunc`

warning: type `entityDeclSAXFunc` should have an upper camel case name
    --> src/defination.rs:1199:10
     |
1199 | pub type entityDeclSAXFunc
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `EntityDeclSaxfunc`

warning: type `getEntitySAXFunc` should have an upper camel case name
    --> src/defination.rs:1204:10
     |
1204 | pub type getEntitySAXFunc
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `GetEntitySaxfunc`

warning: type `resolveEntitySAXFunc` should have an upper camel case name
    --> src/defination.rs:1208:10
     |
1208 | pub type resolveEntitySAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ResolveEntitySaxfunc`

warning: type `hasExternalSubsetSAXFunc` should have an upper camel case name
    --> src/defination.rs:1212:10
     |
1212 | pub type hasExternalSubsetSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HasExternalSubsetSaxfunc`

warning: type `hasInternalSubsetSAXFunc` should have an upper camel case name
    --> src/defination.rs:1215:10
     |
1215 | pub type hasInternalSubsetSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HasInternalSubsetSaxfunc`

warning: type `isStandaloneSAXFunc` should have an upper camel case name
    --> src/defination.rs:1218:10
     |
1218 | pub type isStandaloneSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `IsStandaloneSaxfunc`

warning: type `internalSubsetSAXFunc` should have an upper camel case name
    --> src/defination.rs:1221:10
     |
1221 | pub type internalSubsetSAXFunc
     |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `InternalSubsetSaxfunc`

warning: type `xmlParserCtxt` should have an upper camel case name
    --> src/defination.rs:1225:10
     |
1225 | pub type xmlParserCtxt = _xmlParserCtxt;
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserCtxt`

warning: type `xmlParserCtxtPtr` should have an upper camel case name
    --> src/defination.rs:1226:10
     |
1226 | pub type xmlParserCtxtPtr = *mut xmlParserCtxt;
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserCtxtPtr`

warning: type `xmlSAXHandler` should have an upper camel case name
    --> src/defination.rs:1227:10
     |
1227 | pub type xmlSAXHandler = _xmlSAXHandler;
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlSaxhandler`

warning: type `xmlSAXHandlerPtr` should have an upper camel case name
    --> src/defination.rs:1228:10
     |
1228 | pub type xmlSAXHandlerPtr = *mut xmlSAXHandler;
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlSaxhandlerPtr`

warning: type `xmlBufferAllocationScheme` should have an upper camel case name
    --> src/defination.rs:1229:10
     |
1229 | pub type xmlBufferAllocationScheme = libc::c_uint;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlBufferAllocationScheme`

warning: type `xmlBuffer` should have an upper camel case name
    --> src/defination.rs:1245:10
     |
1245 | pub type xmlBuffer = _xmlBuffer;
     |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlBuffer`

warning: type `xmlBufferPtr` should have an upper camel case name
    --> src/defination.rs:1246:10
     |
1246 | pub type xmlBufferPtr = *mut xmlBuffer;
     |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlBufferPtr`

warning: type `C2RustUnnamed_0` should have an upper camel case name
    --> src/defination.rs:1252:10
     |
1252 | pub type C2RustUnnamed_0 = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed0`

warning: type `xmlNsPtr` should have an upper camel case name
    --> src/defination.rs:1258:10
     |
1258 | pub type xmlNsPtr = *mut xmlNs;
     |          ^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNsPtr`

warning: type `xmlDtd` should have an upper camel case name
    --> src/defination.rs:1259:10
     |
1259 | pub type xmlDtd = _xmlDtd;
     |          ^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDtd`

warning: type `xmlDtdPtr` should have an upper camel case name
    --> src/defination.rs:1260:10
     |
1260 | pub type xmlDtdPtr = *mut xmlDtd;
     |          ^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDtdPtr`

warning: type `C2RustUnnamed_1` should have an upper camel case name
    --> src/defination.rs:1261:10
     |
1261 | pub type C2RustUnnamed_1 = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed1`

warning: type `xmlHashDeallocator` should have an upper camel case name
    --> src/defination.rs:1299:10
     |
1299 | pub type xmlHashDeallocator
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashDeallocator`

warning: type `xmlHashScannerFull` should have an upper camel case name
    --> src/defination.rs:1313:10
     |
1313 | pub type xmlHashScannerFull
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlHashScannerFull`

warning: type `C2RustUnnamed_2` should have an upper camel case name
    --> src/defination.rs:1318:10
     |
1318 | pub type C2RustUnnamed_2 = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed2`

warning: type `xmlParserErrors` should have an upper camel case name
    --> src/defination.rs:1350:10
     |
1350 | pub type xmlParserErrors = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserErrors`

warning: type `xmlGenericErrorFunc` should have an upper camel case name
    --> src/defination.rs:2087:10
     |
2087 | pub type xmlGenericErrorFunc
     |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlGenericErrorFunc`

warning: type `xmlValidCtxtPtr` should have an upper camel case name
    --> src/defination.rs:2091:10
     |
2091 | pub type xmlValidCtxtPtr = *mut xmlValidCtxt;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlValidCtxtPtr`

warning: type `xmlParserNodeInfoPtr` should have an upper camel case name
    --> src/defination.rs:2092:10
     |
2092 | pub type xmlParserNodeInfoPtr = *mut xmlParserNodeInfo;
     |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserNodeInfoPtr`

warning: type `xmlParserNodeInfoSeqPtr` should have an upper camel case name
    --> src/defination.rs:2093:10
     |
2093 | pub type xmlParserNodeInfoSeqPtr = *mut xmlParserNodeInfoSeq;
     |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlParserNodeInfoSeqPtr`

warning: type `xmlSAXHandlerV1` should have an upper camel case name
    --> src/defination.rs:2126:10
     |
2126 | pub type xmlSAXHandlerV1 = _xmlSAXHandlerV1;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlSaxhandlerV1`

warning: type `xmlCharEncoding` should have an upper camel case name
    --> src/defination.rs:2128:10
     |
2128 | pub type xmlCharEncoding = libc::c_int;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlCharEncoding`

warning: type `xmlCatalogAllow` should have an upper camel case name
    --> src/defination.rs:2180:10
     |
2180 | pub type xmlCatalogAllow = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlCatalogAllow`

warning: type `xmlChRangeGroup` should have an upper camel case name
    --> src/defination.rs:2189:10
     |
2189 | pub type xmlChRangeGroup = _xmlChRangeGroup;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlChRangeGroup`

warning: type `xmlChLRange` should have an upper camel case name
    --> src/defination.rs:2198:10
     |
2198 | pub type xmlChLRange = _xmlChLRange;
     |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlChLrange`

warning: type `xmlChSRange` should have an upper camel case name
    --> src/defination.rs:2205:10
     |
2205 | pub type xmlChSRange = _xmlChSRange;
     |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlChSrange`

warning: type `xmlEntityReferenceFunc` should have an upper camel case name
    --> src/defination.rs:2213:10
     |
2213 | pub type xmlEntityReferenceFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlEntityReferenceFunc`

warning: type `xmlDefAttrsPtr` should have an upper camel case name
    --> src/defination.rs:2218:10
     |
2218 | pub type xmlDefAttrsPtr = *mut xmlDefAttrs;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDefAttrsPtr`

warning: type `xmlDefAttrs` should have an upper camel case name
    --> src/defination.rs:2219:10
     |
2219 | pub type xmlDefAttrs = _xmlDefAttrs;
     |          ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlDefAttrs`

warning: type `xmlURIPtr` should have an upper camel case name
    --> src/defination.rs:2237:10
     |
2237 | pub type xmlURIPtr = *mut xmlURI;
     |          ^^^^^^^^^ help: convert the identifier to upper camel case: `XmlUriptr`

warning: type `xmlURI` should have an upper camel case name
    --> src/defination.rs:2257:10
     |
2257 | pub type xmlURI = _xmlURI;
     |          ^^^^^^ help: convert the identifier to upper camel case: `XmlUri`

warning: type `htmlParserCtxtPtr` should have an upper camel case name
    --> src/defination.rs:2286:10
     |
2286 | pub type htmlParserCtxtPtr = xmlParserCtxtPtr;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlParserCtxtPtr`

warning: type `C2RustUnnamed_3` should have an upper camel case name
    --> src/defination.rs:2287:10
     |
2287 | pub type C2RustUnnamed_3 = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed3`

warning: type `xmlFeature` should have an upper camel case name
    --> src/defination.rs:2300:10
     |
2300 | pub type xmlFeature = libc::c_uint;
     |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlFeature`

warning: type `C2RustUnnamed_4` should have an upper camel case name
    --> src/defination.rs:2335:10
     |
2335 | pub type C2RustUnnamed_4 = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `C2rustUnnamed4`

warning: type `__int32_t` should have an upper camel case name
    --> src/defination.rs:2349:10
     |
2349 | pub type __int32_t = libc::c_int;
     |          ^^^^^^^^^ help: convert the identifier to upper camel case: `Int32T`

warning: type `__compar_fn_t` should have an upper camel case name
    --> src/defination.rs:2356:10
     |
2356 | pub type __compar_fn_t
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ComparFnT`

warning: type `htmlEntityDesc` should have an upper camel case name
    --> src/defination.rs:2360:10
     |
2360 | pub type htmlEntityDesc = _htmlEntityDesc;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlEntityDesc`

warning: type `htmlEntityDescPtr` should have an upper camel case name
    --> src/defination.rs:2368:10
     |
2368 | pub type htmlEntityDescPtr = *mut htmlEntityDesc;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlEntityDescPtr`

warning: type `htmlParserNodeInfo` should have an upper camel case name
    --> src/defination.rs:2370:10
     |
2370 | pub type htmlParserNodeInfo = xmlParserNodeInfo;
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlParserNodeInfo`

warning: type `htmlElemDesc` should have an upper camel case name
    --> src/defination.rs:2371:10
     |
2371 | pub type htmlElemDesc = _htmlElemDesc;
     |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlElemDesc`

warning: type `htmlParserCtxt` should have an upper camel case name
    --> src/defination.rs:2398:10
     |
2398 | pub type htmlParserCtxt = xmlParserCtxt;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlParserCtxt`

warning: type `htmlSAXHandler` should have an upper camel case name
    --> src/defination.rs:2399:10
     |
2399 | pub type htmlSAXHandler = xmlSAXHandler;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlSaxhandler`

warning: type `htmlSAXHandlerPtr` should have an upper camel case name
    --> src/defination.rs:2400:10
     |
2400 | pub type htmlSAXHandlerPtr = xmlSAXHandlerPtr;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlSaxhandlerPtr`

warning: type `htmlParserInput` should have an upper camel case name
    --> src/defination.rs:2401:10
     |
2401 | pub type htmlParserInput = xmlParserInput;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlParserInput`

warning: type `htmlParserInputPtr` should have an upper camel case name
    --> src/defination.rs:2402:10
     |
2402 | pub type htmlParserInputPtr = xmlParserInputPtr;
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlParserInputPtr`

warning: type `htmlDocPtr` should have an upper camel case name
    --> src/defination.rs:2403:10
     |
2403 | pub type htmlDocPtr = xmlDocPtr;
     |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlDocPtr`

warning: type `htmlNodePtr` should have an upper camel case name
    --> src/defination.rs:2404:10
     |
2404 | pub type htmlNodePtr = xmlNodePtr;
     |          ^^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlNodePtr`

warning: type `htmlStatus` should have an upper camel case name
    --> src/defination.rs:2408:10
     |
2408 | pub type htmlStatus = libc::c_uint;
     |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `HtmlStatus`

warning: type `xmlXPathFuncLookupFunc` should have an upper camel case name
    --> src/defination.rs:2497:10
     |
2497 | pub type xmlXPathFuncLookupFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathFuncLookupFunc`

warning: type `xmlXPathFunction` should have an upper camel case name
    --> src/defination.rs:2511:10
     |
2511 | pub type xmlXPathFunction
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathFunction`

warning: type `xmlXPathParserContextPtr` should have an upper camel case name
    --> src/defination.rs:2515:10
     |
2515 | pub type xmlXPathParserContextPtr = *mut xmlXPathParserContext;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathParserContextPtr`

warning: type `xmlXPathParserContext` should have an upper camel case name
    --> src/defination.rs:2516:10
     |
2516 | pub type xmlXPathParserContext = _xmlXPathParserContext;
     |          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathParserContext`

warning: type `xmlXPathCompExprPtr` should have an upper camel case name
    --> src/defination.rs:2539:10
     |
2539 | pub type xmlXPathCompExprPtr = *mut xmlXPathCompExpr;
     |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathCompExprPtr`

warning: type `xmlXPathCompExpr` should have an upper camel case name
    --> src/defination.rs:2543:10
     |
2543 | pub type xmlXPathCompExpr = _xmlXPathCompExpr;
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathCompExpr`

warning: type `xmlPatternPtr` should have an upper camel case name
    --> src/defination.rs:2555:10
     |
2555 | pub type xmlPatternPtr = *mut xmlPattern;
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlPatternPtr`

warning: type `xmlPattern` should have an upper camel case name
    --> src/defination.rs:2570:10
     |
2570 | pub type xmlPattern = _xmlPattern;
     |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlPattern`

warning: type `xmlXPathStepOp` should have an upper camel case name
    --> src/defination.rs:2571:10
     |
2571 | pub type xmlXPathStepOp = _xmlXPathStepOp;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathStepOp`

warning: type `xmlXPathOp` should have an upper camel case name
    --> src/defination.rs:2586:10
     |
2586 | pub type xmlXPathOp = libc::c_uint;
     |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathOp`

warning: type `xmlXPathObjectPtr` should have an upper camel case name
    --> src/defination.rs:2606:10
     |
2606 | pub type xmlXPathObjectPtr = *mut xmlXPathObject;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathObjectPtr`

warning: type `xmlXPathObject` should have an upper camel case name
    --> src/defination.rs:2607:10
     |
2607 | pub type xmlXPathObject = _xmlXPathObject;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathObject`

warning: type `xmlNodeSetPtr` should have an upper camel case name
    --> src/defination.rs:2621:10
     |
2621 | pub type xmlNodeSetPtr = *mut xmlNodeSet;
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNodeSetPtr`

warning: type `xmlNodeSet` should have an upper camel case name
    --> src/defination.rs:2625:10
     |
2625 | pub type xmlNodeSet = _xmlNodeSet;
     |          ^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlNodeSet`

warning: type `xmlXPathObjectType` should have an upper camel case name
    --> src/defination.rs:2633:10
     |
2633 | pub type xmlXPathObjectType = libc::c_uint;
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathObjectType`

warning: type `xmlXPathContextPtr` should have an upper camel case name
    --> src/defination.rs:2644:10
     |
2644 | pub type xmlXPathContextPtr = *mut xmlXPathContext;
     |          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathContextPtr`

warning: type `xmlXPathContext` should have an upper camel case name
    --> src/defination.rs:2664:10
     |
2664 | pub type xmlXPathContext = _xmlXPathContext;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathContext`

warning: type `xmlXPathVariableLookupFunc` should have an upper camel case name
    --> src/defination.rs:2679:10
     |
2679 | pub type xmlXPathVariableLookupFunc
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathVariableLookupFunc`

warning: type `xmlXPathAxisPtr` should have an upper camel case name
    --> src/defination.rs:2683:10
     |
2683 | pub type xmlXPathAxisPtr = *mut xmlXPathAxis;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathAxisPtr`

warning: type `xmlXPathAxis` should have an upper camel case name
    --> src/defination.rs:2687:10
     |
2687 | pub type xmlXPathAxis = _xmlXPathAxis;
     |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathAxis`

warning: type `xmlXPathAxisFunc` should have an upper camel case name
    --> src/defination.rs:2706:10
     |
2706 | pub type xmlXPathAxisFunc
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathAxisFunc`

warning: type `xmlXPathTypePtr` should have an upper camel case name
    --> src/defination.rs:2710:10
     |
2710 | pub type xmlXPathTypePtr = *mut xmlXPathType;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathTypePtr`

warning: type `xmlXPathType` should have an upper camel case name
    --> src/defination.rs:2714:10
     |
2714 | pub type xmlXPathType = _xmlXPathType;
     |          ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathType`

warning: type `xmlXPathConvertFunc` should have an upper camel case name
    --> src/defination.rs:2731:10
     |
2731 | pub type xmlXPathConvertFunc
     |          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathConvertFunc`

warning: type `xmlLocationSetPtr` should have an upper camel case name
    --> src/defination.rs:2762:10
     |
2762 | pub type xmlLocationSetPtr = *mut xmlLocationSet;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlLocationSetPtr`

warning: type `xmlLocationSet` should have an upper camel case name
    --> src/defination.rs:2781:10
     |
2781 | pub type xmlLocationSet = _xmlLocationSet;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlLocationSet`

warning: type `__uint64_t` should have an upper camel case name
    --> src/defination.rs:2801:10
     |
2801 | pub type __uint64_t = libc::c_ulong;
     |          ^^^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `uint64_t` should have an upper camel case name
    --> src/defination.rs:2802:10
     |
2802 | pub type uint64_t = __uint64_t;
     |          ^^^^^^^^ help: convert the identifier to upper camel case: `Uint64T`

warning: type `xmlPointerListPtr` should have an upper camel case name
    --> src/defination.rs:2803:10
     |
2803 | pub type xmlPointerListPtr = *mut xmlPointerList;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlPointerListPtr`

warning: type `xmlPointerList` should have an upper camel case name
    --> src/defination.rs:2804:10
     |
2804 | pub type xmlPointerList = _xmlPointerList;
     |          ^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlPointerList`

warning: type `xmlXPathContextCachePtr` should have an upper camel case name
    --> src/defination.rs:2812:10
     |
2812 | pub type xmlXPathContextCachePtr = *mut xmlXPathContextCache;
     |          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathContextCachePtr`

warning: type `xmlXPathContextCache` should have an upper camel case name
    --> src/defination.rs:2813:10
     |
2813 | pub type xmlXPathContextCache = _xmlXPathContextCache;
     |          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathContextCache`

warning: type `xmlXPathStepOpPtr` should have an upper camel case name
    --> src/defination.rs:2828:10
     |
2828 | pub type xmlXPathStepOpPtr = *mut xmlXPathStepOp;
     |          ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathStepOpPtr`

warning: type `xmlXPathNodeSetMergeFunction` should have an upper camel case name
    --> src/defination.rs:2833:10
     |
2833 | pub type xmlXPathNodeSetMergeFunction
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathNodeSetMergeFunction`

warning: type `xmlXPathAxisVal` should have an upper camel case name
    --> src/defination.rs:2838:10
     |
2838 | pub type xmlXPathAxisVal = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathAxisVal`

warning: type `xmlXPathTypeVal` should have an upper camel case name
    --> src/defination.rs:2856:10
     |
2856 | pub type xmlXPathTypeVal = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathTypeVal`

warning: type `xmlXPathTestVal` should have an upper camel case name
    --> src/defination.rs:2862:10
     |
2862 | pub type xmlXPathTestVal = libc::c_uint;
     |          ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathTestVal`

warning: type `xmlXPathTraversalFunction` should have an upper camel case name
    --> src/defination.rs:2863:10
     |
2863 | pub type xmlXPathTraversalFunction
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `XmlXpathTraversalFunction`

warning: type `xmlStreamCtxtPtr` should have an upper camel case name
    --> src/defination.rs:2867:10
     |
2867 | pub type xmlStreamCtxtPtr = *mut xmlStreamCtxt;
     |          ^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlStreamCtxtPtr`

warning: type `xmlStreamCtxt` should have an upper camel case name
    --> src/defination.rs:2869:10
     |
2869 | pub type xmlStreamCtxt = _xmlStreamCtxt;
     |          ^^^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `XmlStreamCtxt`

warning: unnecessary parentheses around assigned value
     --> src/xpath.rs:11244:33
      |
11244 | ...                   (if __c < -(128 as libc::c_int) ||
      |                       ^
...
11250 | ...                    })
      |                         ^
      |
      = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
      |
11244 ~                                 if __c < -(128 as libc::c_int) ||
11245 |                                         __c > 255 as libc::c_int {
11246 |                                      __c
11247 |                                  } else {
11248 |                                      *(*__ctype_toupper_loc()).offset(__c as
11249 |                                                                           isize)
    ...

warning: unnecessary parentheses around assigned value
     --> src/xpath.rs:11275:37
      |
11275 | ...                   (if __c < -(128 as libc::c_int) ||
      |                       ^
...
11282 | ...                    })
      |                         ^
      |
help: remove these parentheses
      |
11275 ~                                     if __c < -(128 as libc::c_int) ||
11276 |                                             __c > 255 as libc::c_int {
11277 |                                          __c
11278 |                                      } else {
11279 |                                          *(*__ctype_toupper_loc()).offset(__c
11280 |                                                                               as
    ...

warning: `#[no_mangle]` has no effect on a foreign function
 --> src/ffi.rs:3:5
  |
3 |     #[no_mangle]
  |     ^^^^^^^^^^^^ help: remove this attribute
4 |     fn xmlStrcmp(str1: *const xmlChar, str2: *const xmlChar) -> libc::c_int;
  |     ------------------------------------------------------------------------ foreign function
  |
  = note: `#[warn(unused_attributes)]` on by default
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
  = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:5:5
   |
5  |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
6  | /     fn __xmlRaiseError(schannel: xmlStructuredErrorFunc,
7  | |                        channel: xmlGenericErrorFunc, data: *mut libc::c_void,
8  | |                        ctx: *mut libc::c_void, node: *mut libc::c_void,
9  | |                        domain: libc::c_int, code: libc::c_int,
...  |
13 | |                        int1: libc::c_int, col: libc::c_int,
14 | |                        msg: *const libc::c_char, _: ...);
   | |_________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
  --> src/ffi.rs:15:5
   |
15 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
16 |     static mut stderr: *mut _IO_FILE;
   |     --------------------------------- foreign static
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:17:5
   |
17 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
18 |     fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
   |     ------------------------------------------------------------------------ foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:19:5
   |
19 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
20 |     fn xmlStrdup(cur: *const xmlChar) -> *mut xmlChar;
   |     -------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:21:5
   |
21 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
22 |     fn xmlStrlen(str: *const xmlChar) -> libc::c_int;
   |     ------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:23:5
   |
23 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
24 | /     fn __xmlLoaderErr(ctx: *mut libc::c_void, msg: *const libc::c_char,
25 | |                       filename: *const libc::c_char);
   | |_____________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:26:5
   |
26 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
27 | /     fn snprintf(_: *mut libc::c_char, _: libc::c_ulong,
28 | |                 _: *const libc::c_char, _: ...) -> libc::c_int;
   | |_______________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:29:5
   |
29 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
30 | /     fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong)
31 | |               -> *mut libc::c_void;
   | |___________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:32:5
   |
32 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
33 |     fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
   |     ------------------------------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:34:5
   |
34 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
35 |     fn xmlBufContent(buf: *const xmlBuf) -> *mut xmlChar;
   |     ----------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:36:5
   |
36 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
37 |     fn xmlBufEnd(buf: xmlBufPtr) -> *mut xmlChar;
   |     --------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:38:5
   |
38 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
39 |     fn xmlBufUse(buf: xmlBufPtr) -> size_t;
   |     --------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:40:5
   |
40 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
41 |     fn xmlBufShrink(buf: xmlBufPtr, len: size_t) -> size_t;
   |     ------------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:42:5
   |
42 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
43 |     fn xmlDictCreate() -> xmlDictPtr;
   |     --------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:44:5
   |
44 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
45 |     fn xmlDictSetLimit(dict: xmlDictPtr, limit: size_t) -> size_t;
   |     -------------------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:46:5
   |
46 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
47 |     fn xmlDictFree(dict: xmlDictPtr);
   |     --------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:48:5
   |
48 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
49 |     fn __xmlGenericError() -> *mut xmlGenericErrorFunc;
   |     --------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:50:5
   |
50 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
51 |     fn xmlHashFree(table: xmlHashTablePtr, f: xmlHashDeallocator);
   |     -------------------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:52:5
   |
52 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
53 | /     fn xmlHashDefaultDeallocator(entry: *mut libc::c_void,
54 | |                                  name: *const xmlChar);
   | |_______________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:55:5
   |
55 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
56 | /     fn xmlParserValidityError(ctx: *mut libc::c_void,
57 | |                               msg: *const libc::c_char, _: ...);
   | |________________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:58:5
   |
58 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
59 | /     fn xmlParserValidityWarning(ctx: *mut libc::c_void,
60 | |                                 msg: *const libc::c_char, _: ...);
   | |__________________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:61:5
   |
61 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
62 | /     fn xmlGetCharEncodingHandler(enc: xmlCharEncoding)
63 | |                                  -> xmlCharEncodingHandlerPtr;
   | |______________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:64:5
   |
64 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
65 | /     fn xmlCharEncCloseFunc(handler: *mut xmlCharEncodingHandler)
66 | |                            -> libc::c_int;
   | |__________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:67:5
   |
67 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
68 | /     fn xmlParserInputBufferCreateFilename(URI: *const libc::c_char,
69 | |                                           enc: xmlCharEncoding)
70 | |                                           -> xmlParserInputBufferPtr;
   | |_____________________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:71:5
   |
71 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
72 | /     fn xmlParserInputBufferRead(in_0: xmlParserInputBufferPtr,
73 | |                                 len: libc::c_int) -> libc::c_int;
   | |_________________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:74:5
   |
74 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
75 | /     fn xmlParserInputBufferGrow(in_0: xmlParserInputBufferPtr,
76 | |                                 len: libc::c_int) -> libc::c_int;
   | |_________________________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:77:5
   |
77 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
78 |     fn xmlFreeParserInputBuffer(in_0: xmlParserInputBufferPtr);
   |     ----------------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:79:5
   |
79 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
80 | /     fn xmlParserGetDirectory(filename: *const libc::c_char)
81 | |                              -> *mut libc::c_char;
   | |__________________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:82:5
   |
82 |       #[no_mangle]
   |       ^^^^^^^^^^^^ help: remove this attribute
83 | /     fn xmlCheckHTTPInput(ctxt: xmlParserCtxtPtr, ret: xmlParserInputPtr)
84 | |                          -> xmlParserInputPtr;
   | |______________________________________________- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:85:5
   |
85 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
86 |     fn __xmlSubstituteEntitiesDefaultValue() -> *mut libc::c_int;
   |     ------------------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:87:5
   |
87 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
88 |     fn __xmlKeepBlanksDefaultValue() -> *mut libc::c_int;
   |     ----------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:89:5
   |
89 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
90 |     fn __xmlIndentTreeOutput() -> *mut libc::c_int;
   |     ----------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:91:5
   |
91 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
92 |     fn __xmlPedanticParserDefaultValue() -> *mut libc::c_int;
   |     --------------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:93:5
   |
93 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
94 |     fn __xmlLineNumbersDefaultValue() -> *mut libc::c_int;
   |     ------------------------------------------------------ foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
  --> src/ffi.rs:95:5
   |
95 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
96 |     static mut xmlFree: xmlFreeFunc;
   |     -------------------------------- foreign static
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
  --> src/ffi.rs:97:5
   |
97 |     #[no_mangle]
   |     ^^^^^^^^^^^^ help: remove this attribute
98 |     fn __xmlDefaultSAXHandler() -> *mut xmlSAXHandlerV1;
   |     ---------------------------------------------------- foreign function
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:99:5
    |
99  |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
100 |     fn __xmlGetWarningsDefaultValue() -> *mut libc::c_int;
    |     ------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:101:5
    |
101 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
102 | /     fn xmlSAX2IgnorableWhitespace(ctx: *mut libc::c_void, ch: *const xmlChar,
103 | |                                   len: libc::c_int);
    | |____________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:104:5
    |
104 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
105 |     fn __xmlDoValidityCheckingDefaultValue() -> *mut libc::c_int;
    |     ------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:106:5
    |
106 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
107 |     fn __xmlLoadExtDtdDefaultValue() -> *mut libc::c_int;
    |     ----------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:108:5
    |
108 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
109 |     fn __xmlGenericErrorContext() -> *mut *mut libc::c_void;
    |     -------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:110:5
    |
110 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
111 |     static mut xmlMalloc: xmlMallocFunc;
    |     ------------------------------------ foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:112:5
    |
112 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
113 | /     fn xmlSAXVersion(hdlr: *mut xmlSAXHandler, version: libc::c_int)
114 | |                      -> libc::c_int;
    | |____________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:115:5
    |
115 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
116 |     fn xmlDefaultSAXHandlerInit();
    |     ------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:117:5
    |
117 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
118 |     fn __xmlParserDebugEntities() -> *mut libc::c_int;
    |     -------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:119:5
    |
119 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
120 |     static mut xmlRealloc: xmlReallocFunc;
    |     -------------------------------------- foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:121:5
    |
121 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
122 | /     fn xmlLoadExternalEntity(URL: *const libc::c_char,
123 | |                              ID: *const libc::c_char, ctxt: xmlParserCtxtPtr)
124 | |                              -> xmlParserInputPtr;
    | |__________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:125:5
    |
125 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
126 | /     fn xmlCharInRange(val: libc::c_uint, group: *const xmlChRangeGroup)
127 | |                       -> libc::c_int;
    | |_____________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:128:5
    |
128 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
129 |     static xmlIsBaseCharGroup: xmlChRangeGroup;
    |     ------------------------------------------- foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:130:5
    |
130 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
131 |     fn xmlCanonicPath(path: *const xmlChar) -> *mut xmlChar;
    |     -------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:132:5
    |
132 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
133 |     fn xmlCatalogFreeLocal(catalogs: *mut libc::c_void);
    |     ---------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:134:5
    |
134 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
135 |     fn xmlBufCreate() -> xmlBufPtr;
    |     ------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:136:5
    |
136 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
137 |     fn xmlBufIsEmpty(buf: xmlBufPtr) -> libc::c_int;
    |     ------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:138:5
    |
138 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
139 | /     fn xmlBufResetInput(buf: xmlBufPtr, input: xmlParserInputPtr)
140 | |                         -> libc::c_int;
    | |_______________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:141:5
    |
141 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
142 | /     fn xmlCharEncFirstLineInput(input: xmlParserInputBufferPtr,
143 | |                                 len: libc::c_int) -> libc::c_int;
    | |_________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:144:5
    |
144 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
145 | /     fn xmlCharEncInput(input: xmlParserInputBufferPtr, flush: libc::c_int)
146 | |                        -> libc::c_int;
    | |______________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:147:5
    |
147 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
148 | /     fn xmlStrncmp(str1: *const xmlChar, str2: *const xmlChar,
149 | |                   len: libc::c_int) -> libc::c_int;
    | |___________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:150:5
    |
150 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
151 | /     fn xmlStrcasecmp(str1: *const xmlChar, str2: *const xmlChar)
152 | |                      -> libc::c_int;
    | |____________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:153:5
    |
153 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
154 |     fn xmlStrEqual(str1: *const xmlChar, str2: *const xmlChar) -> libc::c_int;
    |     -------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:155:5
    |
155 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
156 | /     fn xmlStrcasestr(str: *const xmlChar, val: *const xmlChar)
157 | |                      -> *const xmlChar;
    | |_______________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:158:5
    |
158 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
159 |     fn xmlStrchr(str: *const xmlChar, val: xmlChar) -> *const xmlChar;
    |     ------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:160:5
    |
160 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
161 |     fn xmlCharStrdup(cur: *const libc::c_char) -> *mut xmlChar;
    |     ----------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:162:5
    |
162 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
163 |     fn xmlStrndup(cur: *const xmlChar, len: libc::c_int) -> *mut xmlChar;
    |     --------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:168:5
    |
168 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
169 |     fn __htmlParseContent(ctx: *mut libc::c_void);
    |     ---------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:173:5
    |
173 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
174 |     fn __xmlGlobalInitMutexLock();
    |     ------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:175:5
    |
175 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
176 |     fn __xmlGlobalInitMutexUnlock();
    |     -------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:177:5
    |
177 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
178 | /     fn xmlInputReadCallbackNop(context: *mut libc::c_void,
179 | |                                buffer: *mut libc::c_char, len: libc::c_int)
180 | |                                -> libc::c_int;
    | |______________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:181:5
    |
181 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
182 | /     fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
183 | |               -> *mut libc::c_void;
    | |___________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:184:5
    |
184 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
185 | /     fn memmove(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
186 | |                -> *mut libc::c_void;
    | |____________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:187:5
    |
187 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
188 | /     fn memchr(_: *const libc::c_void, _: libc::c_int, _: libc::c_ulong)
189 | |               -> *mut libc::c_void;
    | |___________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:190:5
    |
190 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
191 | /     fn strncmp(_: *const libc::c_char, _: *const libc::c_char,
192 | |                _: libc::c_ulong) -> libc::c_int;
    | |________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:193:5
    |
193 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
194 |     fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    |     --------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:199:5
    |
199 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
200 |     fn xmlCleanupInputCallbacks();
    |     ------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:201:5
    |
201 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
202 |     fn xmlRegisterDefaultInputCallbacks();
    |     -------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:203:5
    |
203 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
204 | /     fn xmlAllocParserInputBuffer(enc: xmlCharEncoding)
205 | |                                  -> xmlParserInputBufferPtr;
    | |____________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:206:5
    |
206 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
207 | /     fn xmlParserInputBufferCreateFd(fd: libc::c_int, enc: xmlCharEncoding)
208 | |                                     -> xmlParserInputBufferPtr;
    | |_______________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:209:5
    |
209 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
210 | /     fn xmlParserInputBufferCreateMem(mem: *const libc::c_char,
211 | |                                      size: libc::c_int, enc: xmlCharEncoding)
212 | |                                      -> xmlParserInputBufferPtr;
    | |________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:213:5
    |
213 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
214 | /     fn xmlParserInputBufferCreateIO(ioread: xmlInputReadCallback,
215 | |                                     ioclose: xmlInputCloseCallback,
216 | |                                     ioctx: *mut libc::c_void,
217 | |                                     enc: xmlCharEncoding)
218 | |                                     -> xmlParserInputBufferPtr;
    | |_______________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:219:5
    |
219 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
220 | /     fn xmlParserInputBufferPush(in_0: xmlParserInputBufferPtr,
221 | |                                 len: libc::c_int, buf: *const libc::c_char)
222 | |                                 -> libc::c_int;
    | |_______________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:226:5
    |
226 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
227 |     fn xmlCleanupOutputCallbacks();
    |     ------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:228:5
    |
228 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
229 |     fn xmlRegisterDefaultOutputCallbacks();
    |     --------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:230:5
    |
230 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
231 |     fn xmlInitializeDict() -> libc::c_int;
    |     -------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:232:5
    |
232 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
233 |     fn xmlDictReference(dict: xmlDictPtr) -> libc::c_int;
    |     ----------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:237:5
    |
237 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
238 | /     fn xmlDictLookup(dict: xmlDictPtr, name: *const xmlChar, len: libc::c_int)
239 | |                      -> *const xmlChar;
    | |_______________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:240:5
    |
240 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
241 |     fn xmlDictOwns(dict: xmlDictPtr, str: *const xmlChar) -> libc::c_int;
    |     --------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:245:5
    |
245 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
246 |     fn xmlDictCleanup();
    |     -------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:247:5
    |
247 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
248 | /     fn xmlBuildQName(ncname: *const xmlChar, prefix: *const xmlChar,
249 | |                      memory: *mut xmlChar, len: libc::c_int) -> *mut xmlChar;
    | |_____________________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:250:5
    |
250 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
251 | /     fn xmlSplitQName3(name: *const xmlChar, len: *mut libc::c_int)
252 | |                       -> *const xmlChar;
    | |________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:253:5
    |
253 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
254 |     fn xmlBufferCreate() -> xmlBufferPtr;
    |     ------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:255:5
    |
255 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
256 |     fn xmlBufferFree(buf: xmlBufferPtr);
    |     ------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:257:5
    |
257 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
258 | /     fn xmlBufferAdd(buf: xmlBufferPtr, str: *const xmlChar, len: libc::c_int)
259 | |                     -> libc::c_int;
    | |___________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:263:5
    |
263 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
264 | /     fn xmlCreateIntSubset(doc: xmlDocPtr, name: *const xmlChar,
265 | |                           ExternalID: *const xmlChar,
266 | |                           SystemID: *const xmlChar) -> xmlDtdPtr;
    | |_________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:267:5
    |
267 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
268 | /     fn xmlNewDtd(doc: xmlDocPtr, name: *const xmlChar,
269 | |                  ExternalID: *const xmlChar, SystemID: *const xmlChar)
270 | |                  -> xmlDtdPtr;
    | |______________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:271:5
    |
271 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
272 |     fn xmlNewDoc(version: *const xmlChar) -> xmlDocPtr;
    |     --------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:273:5
    |
273 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
274 |     fn xmlFreeDoc(cur: xmlDocPtr);
    |     ------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:279:5
    |
279 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
280 | /     fn xmlNewDocNode(doc: xmlDocPtr, ns: xmlNsPtr, name: *const xmlChar,
281 | |                      content: *const xmlChar) -> xmlNodePtr;
    | |____________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:282:5
    |
282 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
283 |     fn xmlNewComment(content: *const xmlChar) -> xmlNodePtr;
    |     -------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:284:5
    |
284 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
285 | /     fn xmlDocCopyNode(node: xmlNodePtr, doc: xmlDocPtr,
286 | |                       recursive: libc::c_int) -> xmlNodePtr;
    | |____________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:287:5
    |
287 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
288 |     fn xmlGetLastChild(parent: *const xmlNode) -> xmlNodePtr;
    |     --------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:289:5
    |
289 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
290 |     fn xmlNodeIsText(node: *const xmlNode) -> libc::c_int;
    |     ------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:292:5
    |
292 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
293 |     fn xmlAddChild(parent: xmlNodePtr, cur: xmlNodePtr) -> xmlNodePtr;
    |     ------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:294:5
    |
294 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
295 |     fn xmlAddChildList(parent: xmlNodePtr, cur: xmlNodePtr) -> xmlNodePtr;
    |     ---------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:296:5
    |
296 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
297 |     fn xmlUnlinkNode(cur: xmlNodePtr);
    |     ---------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:298:5
    |
298 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
299 |     fn xmlFreeNodeList(cur: xmlNodePtr);
    |     ------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:300:5
    |
300 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
301 |     fn xmlFreeNode(cur: xmlNodePtr);
    |     -------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:302:5
    |
302 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
303 |     fn xmlSetTreeDoc(tree: xmlNodePtr, doc: xmlDocPtr);
    |     --------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:304:5
    |
304 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
305 | /     fn xmlSearchNsByHref(doc: xmlDocPtr, node: xmlNodePtr,
306 | |                          href: *const xmlChar) -> xmlNsPtr;
    | |___________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:307:5
    |
307 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
308 | /     fn xmlHashCreateDict(size: libc::c_int, dict: xmlDictPtr)
309 | |                          -> xmlHashTablePtr;
    | |____________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:310:5
    |
310 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
311 | /     fn xmlHashAddEntry2(table: xmlHashTablePtr, name: *const xmlChar,
312 | |                         name2: *const xmlChar, userdata: *mut libc::c_void)
313 | |                         -> libc::c_int;
    | |_______________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:314:5
    |
314 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
315 | /     fn xmlHashUpdateEntry2(table: xmlHashTablePtr, name: *const xmlChar,
316 | |                            name2: *const xmlChar, userdata: *mut libc::c_void,
317 | |                            f: xmlHashDeallocator) -> libc::c_int;
    | |_________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:318:5
    |
318 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
319 | /     fn xmlHashRemoveEntry2(table: xmlHashTablePtr, name: *const xmlChar,
320 | |                            name2: *const xmlChar, f: xmlHashDeallocator)
321 | |                            -> libc::c_int;
    | |__________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:322:5
    |
322 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
323 | /     fn xmlHashLookup2(table: xmlHashTablePtr, name: *const xmlChar,
324 | |                       name2: *const xmlChar) -> *mut libc::c_void;
    | |__________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:325:5
    |
325 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
326 | /     fn xmlHashQLookup2(table: xmlHashTablePtr, name: *const xmlChar,
327 | |                        prefix: *const xmlChar, name2: *const xmlChar,
328 | |                        prefix2: *const xmlChar) -> *mut libc::c_void;
    | |_____________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:329:5
    |
329 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
330 |     fn xmlHashSize(table: xmlHashTablePtr) -> libc::c_int;
    |     ------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:331:5
    |
331 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
332 | /     fn xmlHashScanFull(table: xmlHashTablePtr, f: xmlHashScannerFull,
333 | |                        data: *mut libc::c_void);
    | |________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:334:5
    |
334 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
335 |     fn initGenericErrorDefaultFunc(handler: *mut xmlGenericErrorFunc);
    |     ------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:336:5
    |
336 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
337 |     fn xmlResetLastError();
    |     ----------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:338:5
    |
338 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
339 |     fn xmlResetError(err: xmlErrorPtr);
    |     ----------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:340:5
    |
340 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
341 |     fn xmlCopyError(from: xmlErrorPtr, to: xmlErrorPtr) -> libc::c_int;
    |     ------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:342:5
    |
342 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
343 | /     fn xmlNewDocElementContent(doc: xmlDocPtr, name: *const xmlChar,
344 | |                                type_0: xmlElementContentType)
345 | |                                -> xmlElementContentPtr;
    | |_______________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:346:5
    |
346 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
347 |     fn xmlFreeDocElementContent(doc: xmlDocPtr, cur: xmlElementContentPtr);
    |     ----------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:348:5
    |
348 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
349 |     fn xmlCreateEnumeration(name: *const xmlChar) -> xmlEnumerationPtr;
    |     ------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:350:5
    |
350 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
351 |     fn xmlFreeEnumeration(cur: xmlEnumerationPtr);
    |     ---------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:352:5
    |
352 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
353 |     fn xmlValidateRoot(ctxt: xmlValidCtxtPtr, doc: xmlDocPtr) -> libc::c_int;
    |     ------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:354:5
    |
354 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
355 | /     fn xmlValidateElement(ctxt: xmlValidCtxtPtr, doc: xmlDocPtr,
356 | |                           elem: xmlNodePtr) -> libc::c_int;
    | |___________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:357:5
    |
357 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
358 |     fn xmlIsMixedElement(doc: xmlDocPtr, name: *const xmlChar) -> libc::c_int;
    |     -------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:359:5
    |
359 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
360 |     fn xmlGetPredefinedEntity(name: *const xmlChar) -> xmlEntityPtr;
    |     ---------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:361:5
    |
361 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
362 |     fn xmlInitCharEncodingHandlers();
    |     --------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:363:5
    |
363 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
364 |     fn xmlCleanupCharEncodingHandlers();
    |     ------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:365:5
    |
365 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
366 | /     fn xmlFindCharEncodingHandler(name: *const libc::c_char)
367 | |                                   -> xmlCharEncodingHandlerPtr;
    | |_______________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:371:5
    |
371 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
372 | /     fn xmlDetectCharEncoding(in_0: *const libc::c_uchar, len: libc::c_int)
373 | |                              -> xmlCharEncoding;
    | |________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:374:5
    |
374 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
375 |     fn xmlCleanupMemory();
    |     ---------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:376:5
    |
376 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
377 |     fn xmlInitMemory() -> libc::c_int;
    |     ---------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:378:5
    |
378 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
379 |     fn htmlDefaultSAXHandlerInit();
    |     ------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:380:5
    |
380 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
381 |     fn xmlInitGlobals();
    |     -------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:385:5
    |
385 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
386 |     fn xmlInitThreads();
    |     -------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:387:5
    |
387 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
388 |     fn xmlCleanupThreads();
    |     ----------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:389:5
    |
389 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
390 |     fn xmlCleanupGlobals();
    |     ----------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:391:5
    |
391 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
392 |     static mut xmlMallocAtomic: xmlMallocFunc;
    |     ------------------------------------------ foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:393:5
    |
393 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
394 | /     fn xmlSAX2GetEntity(ctx: *mut libc::c_void, name: *const xmlChar)
395 | |                         -> xmlEntityPtr;
    | |________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:396:5
    |
396 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
397 | /     fn xmlSAX2StartElement(ctx: *mut libc::c_void, fullname: *const xmlChar,
398 | |                            atts: *mut *const xmlChar);
    | |______________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:399:5
    |
399 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
400 |     fn xmlSAX2EndElement(ctx: *mut libc::c_void, name: *const xmlChar);
    |     ------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:401:5
    |
401 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
402 |     fn __xmlDefaultSAXLocator() -> *mut xmlSAXLocator;
    |     -------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:403:5
    |
403 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
404 | /     fn xmlSAX2EntityDecl(ctx: *mut libc::c_void, name: *const xmlChar,
405 | |                          type_0: libc::c_int, publicId: *const xmlChar,
406 | |                          systemId: *const xmlChar, content: *mut xmlChar);
    | |__________________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:407:5
    |
407 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
408 |     static xmlIsCombiningGroup: xmlChRangeGroup;
    |     -------------------------------------------- foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:409:5
    |
409 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
410 |     static xmlIsDigitGroup: xmlChRangeGroup;
    |     ---------------------------------------- foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:411:5
    |
411 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
412 |     static xmlIsExtenderGroup: xmlChRangeGroup;
    |     ------------------------------------------- foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:413:5
    |
413 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
414 | /     fn htmlCreateMemoryParserCtxt(buffer: *const libc::c_char,
415 | |                                   size: libc::c_int) -> htmlParserCtxtPtr;
    | |__________________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign static
   --> src/ffi.rs:416:5
    |
416 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
417 |     static xmlIsPubidChar_tab: [libc::c_uchar; 256];
    |     ------------------------------------------------ foreign static
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:418:5
    |
418 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
419 |     fn htmlInitAutoClose();
    |     ----------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:420:5
    |
420 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
421 |     fn xmlBuildURI(URI: *const xmlChar, base: *const xmlChar) -> *mut xmlChar;
    |     -------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:422:5
    |
422 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
423 |     fn xmlParseURI(str: *const libc::c_char) -> xmlURIPtr;
    |     ------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:424:5
    |
424 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
425 |     fn xmlFreeURI(uri: xmlURIPtr);
    |     ------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:426:5
    |
426 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
427 |     fn xmlCatalogCleanup();
    |     ----------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:432:5
    |
432 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
433 | /     fn xmlCatalogAddLocal(catalogs: *mut libc::c_void, URL: *const xmlChar)
434 | |                           -> *mut libc::c_void;
    | |_______________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:435:5
    |
435 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
436 |     fn xmlCatalogGetDefaults() -> xmlCatalogAllow;
    |     ---------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:437:5
    |
437 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
438 |     fn xmlSchemaCleanupTypes();
    |     --------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:439:5
    |
439 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
440 |     fn xmlRelaxNGCleanupTypes();
    |     ---------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:442:5
    |
442 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
443 |     fn xmlBufGetInputBase(buf: xmlBufPtr, input: xmlParserInputPtr) -> size_t;
    |     -------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:444:5
    |
444 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
445 | /     fn xmlBufSetInputBaseCur(buf: xmlBufPtr, input: xmlParserInputPtr,
446 | |                              base: size_t, cur: size_t) -> libc::c_int;
    | |_______________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:448:5
    |
448 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
449 |     fn xmlXPathInit();
    |     ------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:456:5
    |
456 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
457 | /     fn xmlGenericErrorDefaultFunc(ctx: *mut libc::c_void,
458 | |                                   msg: *const libc::c_char, _: ...);
    | |____________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:472:5
    |
472 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
473 | /     fn xmlParserInputGrow(_: xmlParserInputPtr,
474 | |                                           _: libc::c_int) -> libc::c_int;
    | |_________________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:476:5
    |
476 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
477 |     fn xmlGetIntSubset(_: *const xmlDoc) -> xmlDtdPtr;
    |     -------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:478:5
    |
478 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
479 | /     fn xmlSwitchEncoding(_: xmlParserCtxtPtr,
480 | |                                          _: xmlCharEncoding) -> libc::c_int;
    | |____________________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:481:5
    |
481 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
482 | /     fn xmlSwitchToEncoding(_: xmlParserCtxtPtr,
483 | |                                            _: xmlCharEncodingHandlerPtr)
484 | |                                            -> libc::c_int;
    | |__________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:485:5
    |
485 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
486 |     fn xmlParserInputShrink(_: xmlParserInputPtr);
    |     ---------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:487:5
    |
487 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
488 | /     fn xmlCopyChar(_: libc::c_int, _: *mut xmlChar,
489 | |                                    _: libc::c_int) -> libc::c_int;
    | |__________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:490:5
    |
490 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
491 |     fn xmlNextChar(_: xmlParserCtxtPtr);
    |     ------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:492:5
    |
492 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
493 | /     fn xmlParserAddNodeInfo(_: xmlParserCtxtPtr,
494 | |                                             _: xmlParserNodeInfoPtr);
    | |_____________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:495:5
    |
495 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
496 |     fn nodePop(_: xmlParserCtxtPtr) -> xmlNodePtr;
    |     ---------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:497:5
    |
497 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
498 | /     fn xmlParseCharEncoding(_: *const libc::c_char)
499 | |                                             -> xmlCharEncoding;
    | |_______________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:500:5
    |
500 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
501 |     fn xmlPopInput(_: xmlParserCtxtPtr) -> xmlChar;
    |     ----------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:502:5
    |
502 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
503 | /     fn xmlStrncasecmp(_: *const xmlChar, _: *const xmlChar,
504 | |                                       _: libc::c_int) -> libc::c_int;
    | |_____________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:505:5
    |
505 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
506 |     fn __htmlDefaultSAXHandler() -> *mut xmlSAXHandlerV1;
    |     ----------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:507:5
    |
507 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
508 | /     fn inputPush(_: xmlParserCtxtPtr, _: xmlParserInputPtr)
509 | |                                  -> libc::c_int;
    | |________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:510:5
    |
510 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
511 |     fn xmlFreeParserCtxt(_: xmlParserCtxtPtr);
    |     ------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:512:5
    |
512 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
513 |     fn xmlInitNodeInfoSeq(_: xmlParserNodeInfoSeqPtr);
    |     -------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:514:5
    |
514 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
515 | /     fn xmlNewInputStream(_: xmlParserCtxtPtr)
516 | |                                          -> xmlParserInputPtr;
    | |______________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:517:5
    |
517 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
518 |     fn xmlInitParser();
    |     ------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:519:5
    |
519 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
520 | /     fn xmlNewStringInputStream(_: xmlParserCtxtPtr,
521 | |                                                _: *const xmlChar)
522 | |                                                -> xmlParserInputPtr;
    | |____________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:523:5
    |
523 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
524 |     fn xmlFreeInputStream(_: xmlParserInputPtr);
    |     -------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:525:5
    |
525 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
526 |     fn inputPop(_: xmlParserCtxtPtr) -> xmlParserInputPtr;
    |     ------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:527:5
    |
527 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
528 | /     fn xmlNewIOInputStream(_: xmlParserCtxtPtr,
529 | |                                            _: xmlParserInputBufferPtr,
530 | |                                            _: xmlCharEncoding)
531 | |                                            -> xmlParserInputPtr;
    | |________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:532:5
    |
532 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
533 |     fn xmlNewParserCtxt() -> xmlParserCtxtPtr;
    |     ------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:534:5
    |
534 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
535 | /     fn xmlCreateMemoryParserCtxt(_: *const libc::c_char,
536 | |                                                  _: libc::c_int)
537 | |                                                  -> xmlParserCtxtPtr;
    | |_____________________________________________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:538:5
    |
538 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
539 | /     fn strcpy(_: *mut libc::c_char, _: *const libc::c_char)
540 | |               -> *mut libc::c_char;
    | |___________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:541:5
    |
541 |       #[no_mangle]
    |       ^^^^^^^^^^^^ help: remove this attribute
542 | /     fn strcat(_: *mut libc::c_char, _: *const libc::c_char)
543 | |               -> *mut libc::c_char;
    | |___________________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:544:5
    |
544 |     #[no_mangle]
    |     ^^^^^^^^^^^^ help: remove this attribute
545 |     fn __ctype_toupper_loc() -> *mut *const __int32_t;
    |     -------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:796:4
    |
796 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
797 |    fn xmlStopParser(ctxt: xmlParserCtxtPtr);
    |    ----------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:798:4
    |
798 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
799 |    fn xmlCtxtReset(ctxt: xmlParserCtxtPtr);
    |    ---------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:809:4
    |
809 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
810 | /    fn xmlStrPrintf(
811 | |       buf: *mut xmlChar,
812 | |       len: libc::c_int,
813 | |       msg: *const libc::c_char,
814 | |       _: ...
815 | |    ) -> libc::c_int;
    | |____________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:816:4
    |
816 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
817 |    fn xmlUTF8Strsize(utf: *const xmlChar, len: libc::c_int) -> libc::c_int;
    |    ------------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:818:4
    |
818 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
819 |    fn xmlUTF8Strpos(utf: *const xmlChar, pos: libc::c_int) -> *const xmlChar;
    |    -------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:820:4
    |
820 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
821 |    fn xmlUTF8Strloc(utf: *const xmlChar, utfchar: *const xmlChar) -> libc::c_int;
    |    ------------------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:822:4
    |
822 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
823 |    fn xmlUTF8Strsub(utf: *const xmlChar, start: libc::c_int, len: libc::c_int) -> *mut xmlChar;
    |    -------------------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:824:4
    |
824 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
825 |    fn xmlUTF8Strlen(utf: *const xmlChar) -> libc::c_int;
    |    ----------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:826:4
    |
826 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
827 |    fn xmlStrcat(cur: *mut xmlChar, add: *const xmlChar) -> *mut xmlChar;
    |    --------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:828:4
    |
828 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
829 |    fn xmlStrstr(str: *const xmlChar, val: *const xmlChar) -> *const xmlChar;
    |    ------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:830:4
    |
830 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
831 |    fn log10(_: libc::c_double) -> libc::c_double;
    |    ---------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:832:4
    |
832 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
833 |    fn pow(_: libc::c_double, _: libc::c_double) -> libc::c_double;
    |    --------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:834:4
    |
834 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
835 |    fn ceil(_: libc::c_double) -> libc::c_double;
    |    --------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:836:4
    |
836 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
837 |    fn fabs(_: libc::c_double) -> libc::c_double;
    |    --------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:838:4
    |
838 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
839 |    fn floor(_: libc::c_double) -> libc::c_double;
    |    ---------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:840:4
    |
840 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
841 |    fn fmod(_: libc::c_double, _: libc::c_double) -> libc::c_double;
    |    ---------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:842:4
    |
842 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
843 |    fn __isinff(__value: libc::c_float) -> libc::c_int;
    |    --------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:844:4
    |
844 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
845 |    fn __isnanf(__value: libc::c_float) -> libc::c_int;
    |    --------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:846:4
    |
846 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
847 |    fn __isinfl(__value: f128::f128) -> libc::c_int;
    |    ------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:848:4
    |
848 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
849 |    fn __isnanl(__value: f128::f128) -> libc::c_int;
    |    ------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:850:4
    |
850 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
851 |    fn __isinf(__value: libc::c_double) -> libc::c_int;
    |    --------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:852:4
    |
852 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
853 |    fn __isnan(__value: libc::c_double) -> libc::c_int;
    |    --------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:855:4
    |
855 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
856 |    fn xmlDocGetRootElement(doc: *const xmlDoc) -> xmlNodePtr;
    |    ---------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:857:4
    |
857 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
858 |    fn xmlGetNsList(doc: *const xmlDoc, node: *const xmlNode) -> *mut xmlNsPtr;
    |    --------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:859:4
    |
859 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
860 |    fn xmlNodeGetContent(cur: *const xmlNode) -> *mut xmlChar;
    |    ---------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:861:4
    |
861 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
862 |    fn xmlNodeGetLang(cur: *const xmlNode) -> *mut xmlChar;
    |    ------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:863:4
    |
863 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
864 |    fn xmlHashCreate(size: libc::c_int) -> xmlHashTablePtr;
    |    ------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:865:4
    |
865 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
866 | /    fn xmlHashAddEntry(
867 | |       table: xmlHashTablePtr,
868 | |       name: *const xmlChar,
869 | |       userdata: *mut libc::c_void,
870 | |    ) -> libc::c_int;
    | |____________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:871:4
    |
871 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
872 | /    fn xmlHashUpdateEntry(
873 | |       table: xmlHashTablePtr,
874 | |       name: *const xmlChar,
875 | |       userdata: *mut libc::c_void,
876 | |       f: xmlHashDeallocator,
877 | |    ) -> libc::c_int;
    | |____________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:881:4
    |
881 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
882 | /    fn xmlHashRemoveEntry(
883 | |       table: xmlHashTablePtr,
884 | |       name: *const xmlChar,
885 | |       f: xmlHashDeallocator,
886 | |    ) -> libc::c_int;
    | |____________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:890:4
    |
890 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
891 |    fn xmlHashLookup(table: xmlHashTablePtr, name: *const xmlChar) -> *mut libc::c_void;
    |    ------------------------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:892:4
    |
892 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
893 |    fn xmlGetID(doc: xmlDocPtr, ID: *const xmlChar) -> xmlAttrPtr;
    |    -------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:894:4
    |
894 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
895 |    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    |    ------------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:896:4
    |
896 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
897 |    fn free(__ptr: *mut libc::c_void);
    |    ---------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:898:4
    |
898 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
899 |    fn exit(_: libc::c_int) -> !;
    |    ----------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:904:4
    |
904 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
905 |    fn xmlXPtrLocationSetCreate(val: xmlXPathObjectPtr) -> xmlLocationSetPtr;
    |    ------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:906:4
    |
906 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
907 |    fn xmlXPtrFreeLocationSet(obj: xmlLocationSetPtr);
    |    -------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:908:4
    |
908 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
909 | /    fn xmlXPtrLocationSetMerge(
910 | |       val1: xmlLocationSetPtr,
911 | |       val2: xmlLocationSetPtr,
912 | |    ) -> xmlLocationSetPtr;
    | |__________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:913:4
    |
913 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
914 | /    fn xmlXPtrNewRange(
915 | |       start: xmlNodePtr,
916 | |       startindex: libc::c_int,
917 | |       end: xmlNodePtr,
918 | |       endindex: libc::c_int,
919 | |    ) -> xmlXPathObjectPtr;
    | |__________________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:920:4
    |
920 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
921 |    fn xmlXPtrNewRangeNodeObject(start: xmlNodePtr, end: xmlXPathObjectPtr) -> xmlXPathObjectPtr;
    |    --------------------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:922:4
    |
922 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
923 |    fn xmlXPtrLocationSetAdd(cur: xmlLocationSetPtr, val: xmlXPathObjectPtr);
    |    ------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:924:4
    |
924 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
925 |    fn xmlXPtrWrapLocationSet(val: xmlLocationSetPtr) -> xmlXPathObjectPtr;
    |    ----------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:926:4
    |
926 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
927 |    fn xmlDebugDumpString(output: *mut FILE, str: *const xmlChar);
    |    -------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:928:4
    |
928 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
929 |    fn xmlDebugDumpAttr(output: *mut FILE, attr: xmlAttrPtr, depth: libc::c_int);
    |    ----------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:930:4
    |
930 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
931 |    fn xmlDebugDumpOneNode(output: *mut FILE, node: xmlNodePtr, depth: libc::c_int);
    |    -------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:932:4
    |
932 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
933 |    fn xmlFreePattern(comp: xmlPatternPtr);
    |    --------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:934:4
    |
934 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
935 |    fn xmlFreePatternList(comp: xmlPatternPtr);
    |    ------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:936:4
    |
936 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
937 | /    fn xmlPatterncompile(
938 | |       pattern: *const xmlChar,
939 | |       dict: *mut xmlDict,
940 | |       flags: libc::c_int,
941 | |       namespaces: *mut *const xmlChar,
942 | |    ) -> xmlPatternPtr;
    | |______________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:943:4
    |
943 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
944 |    fn xmlPatternStreamable(comp: xmlPatternPtr) -> libc::c_int;
    |    ------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:945:4
    |
945 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
946 |    fn xmlPatternMaxDepth(comp: xmlPatternPtr) -> libc::c_int;
    |    ---------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:947:4
    |
947 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
948 |    fn xmlPatternMinDepth(comp: xmlPatternPtr) -> libc::c_int;
    |    ---------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:949:4
    |
949 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
950 |    fn xmlPatternFromRoot(comp: xmlPatternPtr) -> libc::c_int;
    |    ---------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:951:4
    |
951 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
952 |    fn xmlPatternGetStreamCtxt(comp: xmlPatternPtr) -> xmlStreamCtxtPtr;
    |    -------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:953:4
    |
953 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
954 |    fn xmlFreeStreamCtxt(stream: xmlStreamCtxtPtr);
    |    ----------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:955:4
    |
955 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
956 | /    fn xmlStreamPushNode(
957 | |       stream: xmlStreamCtxtPtr,
958 | |       name: *const xmlChar,
959 | |       ns: *const xmlChar,
960 | |       nodeType: libc::c_int,
961 | |    ) -> libc::c_int;
    | |____________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:962:4
    |
962 |      #[no_mangle]
    |      ^^^^^^^^^^^^ help: remove this attribute
963 | /    fn xmlStreamPush(
964 | |       stream: xmlStreamCtxtPtr,
965 | |       name: *const xmlChar,
966 | |       ns: *const xmlChar,
967 | |    ) -> libc::c_int;
    | |____________________- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:968:4
    |
968 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
969 |    fn xmlStreamPop(stream: xmlStreamCtxtPtr) -> libc::c_int;
    |    --------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:970:4
    |
970 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
971 |    fn xmlStreamWantsAnyNode(stream: xmlStreamCtxtPtr) -> libc::c_int;
    |    ------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:972:4
    |
972 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
973 |    fn xmlBufFree(buf: xmlBufPtr);
    |    ------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:974:4
    |
974 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
975 |    fn xmlBufAdd(buf: xmlBufPtr, str: *const xmlChar, len: libc::c_int) -> libc::c_int;
    |    ----------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:976:4
    |
976 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
977 |    fn xmlXPathDebugDumpObject(output: *mut FILE, cur: xmlXPathObjectPtr, depth: libc::c_int);
    |    ------------------------------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:978:4
    |
978 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
979 |    fn xmlXPathCastToBoolean(val: xmlXPathObjectPtr) -> libc::c_int;
    |    ---------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:980:4
    |
980 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
981 |    fn xmlXPathStringEvalNumber(str: *const xmlChar) -> libc::c_double;
    |    ------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:982:4
    |
982 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
983 |    fn xmlXPathCastToNumber(val: xmlXPathObjectPtr) -> libc::c_double;
    |    ------------------------------------------------------------------ foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:984:4
    |
984 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
985 |    fn xmlXPathIsNaN(val: libc::c_double) -> libc::c_int;
    |    ----------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:986:4
    |
986 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
987 |    fn xmlXPathIsInf(val: libc::c_double) -> libc::c_int;
    |    ----------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:988:4
    |
988 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
989 |    fn xmlXPathNsLookup(ctxt: xmlXPathContextPtr, prefix: *const xmlChar) -> *const xmlChar;
    |    ---------------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:990:4
    |
990 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
991 |    fn xmlXPathEvalExpr(ctxt: xmlXPathParserContextPtr);
    |    ---------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:992:4
    |
992 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
993 |    fn xmlXPathCtxtCompile(ctxt: xmlXPathContextPtr, str: *const xmlChar) -> xmlXPathCompExprPtr;
    |    --------------------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:994:4
    |
994 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
995 |    fn xmlXPathEvaluatePredicateResult(ctxt: xmlXPathParserContextPtr, res: xmlXPathObjectPtr) -> libc::c_int;
    |    ---------------------------------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:996:4
    |
996 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
997 |    fn xmlXPathCeilingFunction(ctxt: xmlXPathParserContextPtr, nargs: libc::c_int);
    |    ------------------------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
   --> src/ffi.rs:998:4
    |
998 |    #[no_mangle]
    |    ^^^^^^^^^^^^ help: remove this attribute
999 |    fn xmlXPathCastToString(val: xmlXPathObjectPtr) -> *mut xmlChar;
    |    ---------------------------------------------------------------- foreign function
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1000:4
     |
1000 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1001 |    fn xmlXPathConvertString(val: xmlXPathObjectPtr) -> xmlXPathObjectPtr;
     |    ---------------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1002:4
     |
1002 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1003 |    fn xmlXPathFreeParserContext(ctxt: xmlXPathParserContextPtr);
     |    ------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1004:4
     |
1004 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1005 |    fn xmlXPathEqualValues(ctxt: xmlXPathParserContextPtr) -> libc::c_int;
     |    ---------------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1006:4
     |
1006 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1007 |    fn xmlXPathNotEqualValues(ctxt: xmlXPathParserContextPtr) -> libc::c_int;
     |    ------------------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1008:4
     |
1008 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1009 |    fn xmlXPathNextChild(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
     |    ------------------------------------------------------------------------------------ foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1010:4
     |
1010 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1011 |    fn xmlXPathNextParent(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
     |    ------------------------------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1012:4
     |
1012 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1013 |    fn xmlXPathLastFunction(ctxt: xmlXPathParserContextPtr, nargs: libc::c_int);
     |    ---------------------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1014:4
     |
1014 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1015 |    fn xmlXPathPositionFunction(ctxt: xmlXPathParserContextPtr, nargs: libc::c_int);
     |    -------------------------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: `#[no_mangle]` has no effect on a foreign function
    --> src/ffi.rs:1016:4
     |
1016 |    #[no_mangle]
     |    ^^^^^^^^^^^^ help: remove this attribute
1017 |    fn xmlXPathNextAncestor(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
     |    --------------------------------------------------------------------------------------- foreign function
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: symbol names in extern blocks are not mangled

warning: unreachable pattern
     --> src/parser.rs:11381:69
      |
11374 |                     #[cfg(HAVE_parser_LIBXML_LEGACY_ENABLED)] _ => {
      |                                                               - matches any value
...
11381 |                     #[cfg(not(HAVE_parser_LIBXML_LEGACY_ENABLEDb))] _ => {}
      |                                                                     ^ unreachable pattern
      |
      = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `in_0`
   --> src/parserInternals.rs:225:32
    |
225 | pub unsafe fn check_buffer(mut in_0: xmlParserInputPtr) {
    |                                ^^^^ help: if this is intentional, prefix it with an underscore: `_in_0`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `in_0`
   --> src/parserInternals.rs:285:38
    |
285 | pub unsafe fn xmlParserInputRead(mut in_0: xmlParserInputPtr,
    |                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_in_0`

warning: unused variable: `len`
   --> src/parserInternals.rs:286:49
    |
286 | ...                   mut len: libc::c_int)
    |                           ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: value assigned to `ret` is never read
   --> src/parserInternals.rs:305:13
    |
305 |     let mut ret: libc::c_int = 0;
    |             ^^^
    |
    = note: `#[warn(unused_assignments)]` on by default
    = help: maybe it is overwritten before being read?

warning: value assigned to `indx` is never read
   --> src/parserInternals.rs:306:13
    |
306 |     let mut indx: size_t = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `content` is never read
   --> src/parserInternals.rs:307:13
    |
307 |     let mut content: *const xmlChar = 0 as *const xmlChar;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `used` is never read
   --> src/parserInternals.rs:374:13
    |
374 |     let mut used: size_t = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
   --> src/parserInternals.rs:375:13
    |
375 |     let mut ret: size_t = 0;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `indx` is never read
   --> src/parserInternals.rs:376:13
    |
376 |     let mut indx: size_t = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `content` is never read
   --> src/parserInternals.rs:377:13
    |
377 |     let mut content: *const xmlChar = 0 as *const xmlChar;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
   --> src/parserInternals.rs:476:17
    |
476 |         let mut cur: *const libc::c_uchar = 0 as *const libc::c_uchar;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
   --> src/parserInternals.rs:477:17
    |
477 |         let mut c: libc::c_uchar = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
   --> src/parserInternals.rs:737:17
    |
737 |         let mut c: libc::c_uchar = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
   --> src/parserInternals.rs:993:17
    |
993 |         let mut c: libc::c_uchar = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `bits` is never read
    --> src/parserInternals.rs:1176:17
     |
1176 |         let mut bits: libc::c_int = 0;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `len`
    --> src/parserInternals.rs:1226:47
     |
1226 | pub unsafe fn xmlCopyChar_parserInternals(mut len: libc::c_int,
     |                                               ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: value assigned to `handler` is never read
    --> src/parserInternals.rs:1249:13
     |
1249 |     let mut handler: xmlCharEncodingHandlerPtr =
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parserInternals.rs:1252:13
     |
1252 |     let mut ret: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `nbchars` is never read
    --> src/parserInternals.rs:1453:13
     |
1453 |     let mut nbchars: libc::c_int = 0;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `processed` is never read
    --> src/parserInternals.rs:1491:21
     |
1491 |             let mut processed: libc::c_int = 0;
     |                     ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `use_0` is never read
    --> src/parserInternals.rs:1492:21
     |
1492 |             let mut use_0: libc::c_uint = 0;
     |                     ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parserInternals.rs:1643:13
     |
1643 |     let mut ret: libc::c_int = 0 as libc::c_int;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
    --> src/parserInternals.rs:1730:13
     |
1730 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inputStream` is never read
    --> src/parserInternals.rs:1775:13
     |
1775 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
    --> src/parserInternals.rs:1808:13
     |
1808 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
    --> src/parserInternals.rs:1892:13
     |
1892 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
    --> src/parserInternals.rs:1937:13
     |
1937 |     let mut buf: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inputStream` is never read
    --> src/parserInternals.rs:1938:13
     |
1938 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `directory` is never read
    --> src/parserInternals.rs:1939:13
     |
1939 |     let mut directory: *mut libc::c_char = 0 as *mut libc::c_char;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `URI` is never read
    --> src/parserInternals.rs:1940:13
     |
1940 |     let mut URI: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
    --> src/parserInternals.rs:2010:13
     |
2010 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
    --> src/parserInternals.rs:2240:13
     |
2240 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parserInternals.rs:2343:17
     |
2343 |         let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `next` is never read
    --> src/parserInternals.rs:2344:17
     |
2344 |         let mut next: xmlNodePtr = 0 as *mut xmlNode;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur_0` is never read
    --> src/parserInternals.rs:2354:17
     |
2354 |         let mut cur_0: xmlAttrPtr = 0 as *mut xmlAttr;
     |                 ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `next_0` is never read
    --> src/parserInternals.rs:2355:17
     |
2355 |         let mut next_0: xmlAttrPtr = 0 as *mut xmlAttr;
     |                 ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
    --> src/parserInternals.rs:2408:13
     |
2408 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `pos` is never read
    --> src/parserInternals.rs:2457:13
     |
2457 |     let mut pos: libc::c_ulong = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `upper` is never read
    --> src/parserInternals.rs:2517:13
     |
2517 |     let mut upper: libc::c_ulong = 0;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `lower` is never read
    --> src/parserInternals.rs:2518:13
     |
2518 |     let mut lower: libc::c_ulong = 0;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `middle` is never read
    --> src/parserInternals.rs:2519:13
     |
2519 |     let mut middle: libc::c_ulong = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `pos` is never read
    --> src/parserInternals.rs:2598:13
     |
2598 |     let mut pos: libc::c_ulong = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_buffer` is never read
    --> src/parserInternals.rs:2613:21
     |
2613 |             let mut tmp_buffer: *mut xmlParserNodeInfo =
     |                     ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `byte_size` is never read
    --> src/parserInternals.rs:2615:21
     |
2615 |             let mut byte_size: libc::c_uint = 0;
     |                     ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/parserInternals.rs:2652:21
     |
2652 |             let mut i: libc::c_ulong = 0;
     |                     ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
 --> src/parser.rs:7:13
  |
7 |     let mut i: libc::c_int = 0;
  |             ^
  |
  = help: maybe it is overwritten before being read?

warning: value assigned to `diff` is never read
  --> src/parser.rs:25:17
   |
25 |         let mut diff: libc::c_ulong = 0;
   |                 ^^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `rep` is never read
  --> src/parser.rs:26:17
   |
26 |         let mut rep: *mut xmlChar = 0 as *mut xmlChar;
   |                 ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `rep` is never read
  --> src/parser.rs:61:13
   |
61 |             rep = 0 as *mut xmlChar
   |             ^^^
   |
   = help: maybe it is overwritten before being read?

warning: value assigned to `errmsg` is never read
   --> src/parser.rs:260:13
    |
260 |     let mut errmsg: *const libc::c_char = 0 as *const libc::c_char;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `sax` is never read
   --> src/parser.rs:961:13
    |
961 |     let mut sax: xmlSAXHandlerPtr = 0 as *mut xmlSAXHandler;
    |             ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/parser.rs:1059:13
     |
1059 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:1062:13
     |
1062 |     let mut cur: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:1085:17
     |
1085 |         let mut ret: *mut xmlChar = 0 as *mut xmlChar;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `defaults` is never read
    --> src/parser.rs:1121:13
     |
1121 |     let mut defaults: xmlDefAttrsPtr = 0 as *mut xmlDefAttrs;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
    --> src/parser.rs:1123:13
     |
1123 |     let mut name: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `prefix` is never read
    --> src/parser.rs:1124:13
     |
1124 |     let mut prefix: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
    --> src/parser.rs:1194:25
     |
1194 |                 let mut temp: xmlDefAttrsPtr = 0 as *mut xmlDefAttrs;
     |                         ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `unused`
    --> src/parser.rs:1361:54
     |
1361 | ...                   mut unused: *const xmlChar) {
     |                           ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused`

warning: value assigned to `nxt` is never read
    --> src/parser.rs:1454:13
     |
1454 |     let mut nxt: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/parser.rs:1732:17
     |
1732 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:1760:17
     |
1760 |         let mut tmp: *mut *const xmlChar = 0 as *mut *const xmlChar;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/parser.rs:1801:13
     |
1801 |     let mut i: libc::c_int = 0; /* allow for 10 attrs by default */
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `atts` is never read
    --> src/parser.rs:1826:13
     |
1826 |     let mut atts: *mut *const xmlChar = 0 as *mut *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `attallocs` is never read
    --> src/parser.rs:1827:13
     |
1827 |     let mut attallocs: *mut libc::c_int = 0 as *mut libc::c_int;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `maxatts` is never read
    --> src/parser.rs:1828:13
     |
1828 |     let mut maxatts: libc::c_int = 0;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `value` is never read
    --> src/parser.rs:1930:13
     |
1930 |             value = 0 as xmlParserInputPtr;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:1952:13
     |
1952 |     let mut ret: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:1980:17
     |
1980 |         let mut tmp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:2026:13
     |
2026 |     let mut ret: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tag` is never read
    --> src/parser.rs:2060:13
     |
2060 |     let mut tag: *mut xmlStartTag = 0 as *mut xmlStartTag;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:2062:17
     |
2062 |         let mut tmp: *mut *const xmlChar = 0 as *mut *const xmlChar;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp2` is never read
    --> src/parser.rs:2063:17
     |
2063 |         let mut tmp2: *mut xmlStartTag = 0 as *mut xmlStartTag;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:2144:13
     |
2144 |     let mut ret: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:2172:17
     |
2172 |         let mut tmp: *mut *const xmlChar = 0 as *mut *const xmlChar;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:2209:13
     |
2209 |     let mut ret: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:2227:17
     |
2227 |         let mut tmp: *mut libc::c_int = 0 as *mut libc::c_int;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:2254:13
     |
2254 |     let mut ret: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:2332:17
     |
2332 |         let mut cur: *const xmlChar = 0 as *const xmlChar;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:2465:13
     |
2465 |     let mut ret: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ptr` is never read
    --> src/parser.rs:2706:13
     |
2706 |     let mut ptr: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:2707:13
     |
2707 |     let mut cur: xmlChar = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buffer` is never read
    --> src/parser.rs:2940:13
     |
2940 |     let mut buffer: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buffer_size` is never read
    --> src/parser.rs:2941:13
     |
2941 |     let mut buffer_size: size_t = 0 as libc::c_int as size_t;
     |             ^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `current` is never read
    --> src/parser.rs:2943:13
     |
2943 |     let mut current: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `last` is never read
    --> src/parser.rs:2945:13
     |
2945 |     let mut last: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ent` is never read
    --> src/parser.rs:2946:13
     |
2946 |     let mut ent: xmlEntityPtr = 0 as *mut xmlEntity;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:2947:13
     |
2947 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:3016:29
     |
3016 |                     let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_0` is never read
    --> src/parser.rs:3093:37
     |
3093 | ...                   let mut tmp_0: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_1` is never read
    --> src/parser.rs:3167:37
     |
3167 | ...                   let mut tmp_1: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_2` is never read
    --> src/parser.rs:3212:33
     |
3212 |                         let mut tmp_2: *mut xmlChar = 0 as *mut xmlChar;
     |                                 ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_3` is never read
    --> src/parser.rs:3339:37
     |
3339 | ...                   let mut tmp_3: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_4` is never read
    --> src/parser.rs:3390:29
     |
3390 |                     let mut tmp_4: *mut xmlChar = 0 as *mut xmlChar;
     |                             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/parser.rs:3494:13
     |
3494 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:3495:13
     |
3495 |     let mut ret: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `lastChild` is never read
    --> src/parser.rs:3496:13
     |
3496 |     let mut lastChild: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:3601:13
     |
3601 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:3603:13
     |
3603 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:3662:25
     |
3662 |                 let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                         ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_0` is never read
    --> src/parser.rs:3784:29
     |
3784 |                     let mut tmp_0: *mut xmlChar = 0 as *mut xmlChar;
     |                             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:3991:13
     |
3991 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
    --> src/parser.rs:4258:13
     |
4258 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:4259:13
     |
4259 |     let mut ret: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `count` is never read
    --> src/parser.rs:4260:13
     |
4260 |     let mut count: libc::c_int = 0 as libc::c_int;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:4323:13
     |
4323 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `startPosition` is never read
    --> src/parser.rs:4325:13
     |
4325 |     let mut startPosition: size_t = 0 as libc::c_int as size_t;
     |             ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
    --> src/parser.rs:4431:13
     |
4431 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `e` is never read
    --> src/parser.rs:4432:13
     |
4432 |     let mut e: *const xmlChar = 0 as *const xmlChar;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:4433:13
     |
4433 |     let mut ret: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `count` is never read
    --> src/parser.rs:4434:13
     |
4434 |     let mut count: libc::c_int = 0 as libc::c_int;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
    --> src/parser.rs:4507:13
     |
4507 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:4508:13
     |
4508 |     let mut ret: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:4567:13
     |
4567 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buffer` is never read
    --> src/parser.rs:4608:21
     |
4608 |             let mut buffer: *mut xmlChar = 0 as *mut xmlChar;
     |                     ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:4625:29
     |
4625 |                     let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:4700:13
     |
4700 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buffer` is never read
    --> src/parser.rs:4766:21
     |
4766 |             let mut buffer: *mut xmlChar = 0 as *mut xmlChar;
     |                     ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:4800:29
     |
4800 |                     let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
    --> src/parser.rs:4878:13
     |
4878 |     let mut buf: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:4881:13
     |
4881 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `stop` is never read
    --> src/parser.rs:4883:13
     |
4883 |     let mut stop: xmlChar = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:4885:13
     |
4885 |     let mut cur: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
    --> src/parser.rs:4886:13
     |
4886 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:4949:25
     |
4949 |                 let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                         ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
    --> src/parser.rs:5021:41
     |
5021 | ...                   let mut name: *mut xmlChar =
     |                               ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `limit` is never read
    --> src/parser.rs:5118:13
     |
5118 |     let mut limit: xmlChar = 0 as libc::c_int as xmlChar;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
    --> src/parser.rs:5119:13
     |
5119 |     let mut buf: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buf_size` is never read
    --> src/parser.rs:5122:13
     |
5122 |     let mut buf_size: size_t = 0 as libc::c_int as size_t;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
    --> src/parser.rs:5123:13
     |
5123 |     let mut c: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `current` is never read
    --> src/parser.rs:5126:13
     |
5126 |     let mut current: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ent` is never read
    --> src/parser.rs:5127:13
     |
5127 |     let mut ent: xmlEntityPtr = 0 as *mut xmlEntity;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:5204:45
     |
5204 | ...                   let mut tmp: *mut xmlChar =
     |                               ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_0` is never read
    --> src/parser.rs:5246:45
     |
5246 | ...                   let mut tmp_0: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_1` is never read
    --> src/parser.rs:5301:41
     |
5301 | ...                   let mut tmp_1: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_2` is never read
    --> src/parser.rs:5358:41
     |
5358 | ...                   let mut tmp_2: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_3` is never read
    --> src/parser.rs:5476:49
     |
5476 | ...                   let mut tmp_3: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_4` is never read
    --> src/parser.rs:5515:45
     |
5515 | ...                   let mut tmp_4: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `diff` is never read
    --> src/parser.rs:5570:41
     |
5570 | ...                   let mut diff: libc::c_ulong = 0;
     |                               ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_5` is never read
    --> src/parser.rs:5640:41
     |
5640 | ...                   let mut tmp_5: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_6` is never read
    --> src/parser.rs:5712:45
     |
5712 | ...                   let mut tmp_6: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_7` is never read
    --> src/parser.rs:5765:37
     |
5765 | ...                   let mut tmp_7: *mut xmlChar =
     |                               ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
    --> src/parser.rs:5944:13
     |
5944 |     let mut buf: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:5947:13
     |
5947 |     let mut cur: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `stop` is never read
    --> src/parser.rs:5949:13
     |
5949 |     let mut stop: xmlChar = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:5997:21
     |
5997 |             let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
    --> src/parser.rs:6119:13
     |
6119 |     let mut buf: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:6122:13
     |
6122 |     let mut cur: xmlChar = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `stop` is never read
    --> src/parser.rs:6123:13
     |
6123 |     let mut stop: xmlChar = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:6162:21
     |
6162 |             let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
    --> src/parser.rs:6447:13
     |
6447 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `nbchar` is never read
    --> src/parser.rs:6448:13
     |
6448 |     let mut nbchar: libc::c_int = 0 as libc::c_int;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ccol` is never read
    --> src/parser.rs:6451:13
     |
6451 |     let mut ccol: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `nbchar` is never read
    --> src/parser.rs:6659:9
     |
6659 |         nbchar = 0 as libc::c_int
     |         ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:6678:13
     |
6678 |     let mut cur: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `q` is never read
    --> src/parser.rs:6998:13
     |
6998 |     let mut q: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `r` is never read
    --> src/parser.rs:7000:13
     |
7000 |     let mut r: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:7002:13
     |
7002 |     let mut cur: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inputid` is never read
    --> src/parser.rs:7005:13
     |
7005 |     let mut inputid: libc::c_int = 0;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `new_buf` is never read
    --> src/parser.rs:7112:33
     |
7112 |                         let mut new_buf: *mut xmlChar = 0 as *mut xmlChar;
     |                                 ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `new_size` is never read
    --> src/parser.rs:7113:33
     |
7113 |                         let mut new_size: size_t = 0;
     |                                 ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `state` is never read
    --> src/parser.rs:7271:13
     |
7271 |     let mut state: xmlParserInputState = XML_PARSER_START;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
    --> src/parser.rs:7272:13
     |
7272 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `nbchar` is never read
    --> src/parser.rs:7273:13
     |
7273 |     let mut nbchar: size_t = 0 as libc::c_int as size_t;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ccol` is never read
    --> src/parser.rs:7274:13
     |
7274 |     let mut ccol: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `inputid` is never read
    --> src/parser.rs:7275:13
     |
7275 |     let mut inputid: libc::c_int = 0;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `new_buf` is never read
    --> src/parser.rs:7383:37
     |
7383 | ...                   let mut new_buf: *mut xmlChar = 0 as *mut xmlChar;
     |                               ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
    --> src/parser.rs:7447:30
     |
7447 |                     } else { in_0 = in_0.offset(-1) }
     |                              ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
    --> src/parser.rs:7568:13
     |
7568 |     let mut name: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/parser.rs:7583:17
     |
7583 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:7644:13
     |
7644 |     let mut tmp: *const xmlChar = 0 as *const xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `base` is never read
    --> src/parser.rs:7645:13
     |
7645 |     let mut base: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `marker` is never read
    --> src/parser.rs:7646:13
     |
7646 |     let mut marker: xmlChar = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
    --> src/parser.rs:7724:13
     |
7724 |     let mut buf: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:7727:13
     |
7727 |     let mut cur: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `target` is never read
    --> src/parser.rs:7729:13
     |
7729 |     let mut target: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `state` is never read
    --> src/parser.rs:7730:13
     |
7730 |     let mut state: xmlParserInputState = XML_PARSER_START;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:7828:29
     |
7828 |                     let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
     |                             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
    --> src/parser.rs:8018:13
     |
8018 |     let mut name: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `Systemid` is never read
    --> src/parser.rs:8020:13
     |
8020 |     let mut Systemid: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
    --> src/parser.rs:8147:13
     |
8147 |     let mut name: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ndata` is never read
    --> src/parser.rs:8151:13
     |
8151 |     let mut ndata: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `uri` is never read
    --> src/parser.rs:8260:29
     |
8260 |                     let mut uri: xmlURIPtr = 0 as *mut xmlURI;
     |                             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `uri_0` is never read
    --> src/parser.rs:8356:25
     |
8356 |                 let mut uri_0: xmlURIPtr = 0 as *mut xmlURI;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
    --> src/parser.rs:8572:13
     |
8572 |     let mut val: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:8573:13
     |
8573 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
    --> src/parser.rs:8702:13
     |
8702 |     let mut name: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:8705:13
     |
8705 |     let mut cur: xmlEnumerationPtr = 0 as *mut xmlEnumeration;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:8706:13
     |
8706 |     let mut tmp: xmlEnumerationPtr = 0 as *mut xmlEnumeration;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
    --> src/parser.rs:8788:13
     |
8788 |     let mut name: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:8791:13
     |
8791 |     let mut cur: xmlEnumerationPtr = 0 as *mut xmlEnumeration;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/parser.rs:8792:13
     |
8792 |     let mut tmp: xmlEnumerationPtr = 0 as *mut xmlEnumeration;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `elemName` is never read
    --> src/parser.rs:9287:13
     |
9287 |     let mut elemName: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `attrName` is never read
    --> src/parser.rs:9288:13
     |
9288 |     let mut attrName: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tree` is never read
    --> src/parser.rs:9289:13
     |
9289 |     let mut tree: xmlEnumerationPtr = 0 as *mut xmlEnumeration;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `type_0` is never read
    --> src/parser.rs:9345:21
     |
9345 |             let mut type_0: libc::c_int = 0;
     |                     ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `def` is never read
    --> src/parser.rs:9346:21
     |
9346 |             let mut def: libc::c_int = 0;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `n` is never read
    --> src/parser.rs:9509:13
     |
9509 |     let mut n: xmlElementContentPtr = 0 as *mut xmlElementContent;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/parser.rs:9699:13
     |
9699 |     let mut ret: xmlElementContentPtr = 0 as xmlElementContentPtr;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/parser.rs:9700:13
     |
9700 |     let mut cur: xmlElementContentPtr = 0 as xmlElementContentPtr;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `op` is never read
    --> src/parser.rs:9702:13
     |
9702 |     let mut op: xmlElementContentPtr = 0 as xmlElementContentPtr;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `elem` is never read
    --> src/parser.rs:9703:13
     |
9703 |     let mut elem: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `last` is never read
    --> src/parser.rs:9826:17
     |
9826 |                 last = 0 as xmlElementContentPtr
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `last` is never read
    --> src/parser.rs:9869:17
     |
9869 |                 last = 0 as xmlElementContentPtr
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tree` is never read
     --> src/parser.rs:10114:13
      |
10114 |     let mut tree: xmlElementContentPtr = 0 as xmlElementContentPtr;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/parser.rs:10116:13
      |
10116 |     let mut res: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:10183:13
      |
10183 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:10416:33
      |
10416 |                         let mut tmp: *mut libc::c_int =
      |                                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `state` is never read
     --> src/parser.rs:10472:25
      |
10472 |                 let mut state: libc::c_int = 0;
      |                         ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `instate` is never read
     --> src/parser.rs:10473:25
      |
10473 |                 let mut instate: xmlParserInputState = XML_PARSER_START;
      |                         ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `version` is never read
     --> src/parser.rs:10716:13
      |
10716 |     let mut version: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `encoding` is never read
     --> src/parser.rs:10717:13
      |
10717 |     let mut encoding: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldstate` is never read
     --> src/parser.rs:10718:13
      |
10718 |     let mut oldstate: libc::c_int = 0;
      |             ^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `enc` is never read
     --> src/parser.rs:10848:17
      |
10848 |         let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ent` is never read
     --> src/parser.rs:10953:13
      |
10953 |     let mut ent: xmlEntityPtr = 0 as *mut xmlEntity;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
     --> src/parser.rs:10954:13
      |
10954 |     let mut val: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `was_checked` is never read
     --> src/parser.rs:10955:13
      |
10955 |     let mut was_checked: libc::c_int = 0;
      |             ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:10957:13
      |
10957 |     let mut ret: xmlParserErrors = XML_ERR_OK;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `diff` is never read
     --> src/parser.rs:11078:17
      |
11078 |         let mut diff: libc::c_ulong = 0;
      |                 ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `user_data` is never read
     --> src/parser.rs:11084:17
      |
11084 |         let mut user_data: *mut libc::c_void = 0 as *mut libc::c_void;
      |                 ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `user_data_0` is never read
     --> src/parser.rs:11246:21
      |
11246 |             let mut user_data_0: *mut libc::c_void = 0 as *mut libc::c_void;
      |                     ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:11337:25
      |
11337 |                 let mut cur: xmlNodePtr = 0 as *mut xmlNode;
      |                         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur_0` is never read
     --> src/parser.rs:11386:25
      |
11386 |                 let mut cur_0: xmlNodePtr = 0 as *mut xmlNode;
      |                         ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `next` is never read
     --> src/parser.rs:11387:25
      |
11387 |                 let mut next: xmlNodePtr = 0 as *mut xmlNode;
      |                         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `last` is never read
     --> src/parser.rs:11388:25
      |
11388 |                 let mut last: xmlNodePtr = 0 as *mut xmlNode;
      |                         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `nbktext` is never read
     --> src/parser.rs:11436:25
      |
11436 |                 let mut nbktext: *const xmlChar = 0 as *const xmlChar;
      |                         ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:11508:13
      |
11508 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:11714:13
      |
11714 |     let mut name: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ptr` is never read
     --> src/parser.rs:11715:13
      |
11715 |     let mut ptr: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:11716:13
      |
11716 |     let mut cur: xmlChar = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:11911:13
      |
11911 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:11913:13
      |
11913 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `enc` is never read
     --> src/parser.rs:12003:17
      |
12003 |         let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:12115:13
      |
12115 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:12116:13
      |
12116 |     let mut buf: xmlBufferPtr = 0 as *mut xmlBuffer;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
     --> src/parser.rs:12118:13
      |
12118 |     let mut c: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ptr` is never read
     --> src/parser.rs:12281:13
      |
12281 |     let mut ptr: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:12282:13
      |
12282 |     let mut cur: xmlChar = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:12283:13
      |
12283 |     let mut name: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:12390:13
      |
12390 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `URI` is never read
     --> src/parser.rs:12392:13
      |
12392 |     let mut URI: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:12556:13
      |
12556 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
     --> src/parser.rs:12557:13
      |
12557 |     let mut val: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:12657:13
      |
12657 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `attname` is never read
     --> src/parser.rs:12658:13
      |
12658 |     let mut attname: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/parser.rs:12663:13
      |
12663 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `n` is never read
     --> src/parser.rs:12759:37
      |
12759 | ...                   let mut n: *mut *const xmlChar =
      |                               ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:12909:13
      |
12909 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/parser.rs:13015:13
      |
13015 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `l` is never read
     --> src/parser.rs:13047:13
      |
13047 |     let mut l: *const xmlChar = 0 as *const xmlChar;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `p` is never read
     --> src/parser.rs:13048:13
      |
13048 |     let mut p: *const xmlChar = 0 as *const xmlChar;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:13074:21
      |
13074 |             let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_0` is never read
     --> src/parser.rs:13110:21
      |
13110 |             let mut tmp_0: *mut xmlChar = 0 as *mut xmlChar;
      |                     ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cmp` is never read
     --> src/parser.rs:13164:13
      |
13164 |     let mut cmp: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
     --> src/parser.rs:13165:13
      |
13165 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:13166:13
      |
13166 |     let mut ret: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `limit` is never read
     --> src/parser.rs:13253:13
      |
13253 |     let mut limit: xmlChar = 0 as libc::c_int as xmlChar;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
     --> src/parser.rs:13254:13
      |
13254 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `start` is never read
     --> src/parser.rs:13255:13
      |
13255 |     let mut start: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `end` is never read
     --> src/parser.rs:13256:13
      |
13256 |     let mut end: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `last` is never read
     --> src/parser.rs:13257:13
      |
13257 |     let mut last: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:13258:13
      |
13258 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `line` is never read
     --> src/parser.rs:13259:13
      |
13259 |     let mut line: libc::c_int = 0;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `col` is never read
     --> src/parser.rs:13260:13
      |
13260 |     let mut col: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:13560:13
      |
13560 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
     --> src/parser.rs:13561:13
      |
13561 |     let mut val: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `type_0` is never read
     --> src/parser.rs:13581:17
      |
13581 |         let mut type_0: libc::c_int = 0;
      |                 ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `val2` is never read
     --> src/parser.rs:13603:25
      |
13603 |                 let mut val2: *const xmlChar = 0 as *const xmlChar;
      |                         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `localname` is never read
     --> src/parser.rs:13702:13
      |
13702 |     let mut localname: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `attname` is never read
     --> src/parser.rs:13704:13
      |
13704 |     let mut attname: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `nsname` is never read
     --> src/parser.rs:13706:13
      |
13706 |     let mut nsname: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `nratts` is never read
     --> src/parser.rs:13710:13
      |
13710 |     let mut nratts: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `nbatts` is never read
     --> src/parser.rs:13711:13
      |
13711 |     let mut nbatts: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `nbdef` is never read
     --> src/parser.rs:13712:13
      |
13712 |     let mut nbdef: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `inputid` is never read
     --> src/parser.rs:13713:13
      |
13713 |     let mut inputid: libc::c_int = 0;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/parser.rs:13714:13
      |
13714 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
     --> src/parser.rs:13715:13
      |
13715 |     let mut j: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `nbNs` is never read
     --> src/parser.rs:13716:13
      |
13716 |     let mut nbNs: libc::c_int = 0;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `attval` is never read
     --> src/parser.rs:13717:13
      |
13717 |     let mut attval: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:13718:13
      |
13718 |     let mut cur: libc::c_ulong = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `uri` is never read
     --> src/parser.rs:13807:25
      |
13807 |                 let mut uri: xmlURIPtr = 0 as *mut xmlURI;
      |                         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `uri_0` is never read
     --> src/parser.rs:13896:25
      |
13896 |                 let mut uri_0: xmlURIPtr = 0 as *mut xmlURI;
      |                         ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `defaults` is never read
     --> src/parser.rs:14135:29
      |
14135 |                     let mut defaults: xmlDefAttrsPtr = 0 as *mut xmlDefAttrs;
      |                             ^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:14561:13
      |
14561 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:14655:13
      |
14655 |     let mut buf: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `r` is never read
     --> src/parser.rs:14658:13
      |
14658 |     let mut r: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `s` is never read
     --> src/parser.rs:14660:13
      |
14660 |     let mut s: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:14662:13
      |
14662 |     let mut cur: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:14764:21
      |
14764 |             let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:15067:13
      |
15067 |     let mut name: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `line` is never read
     --> src/parser.rs:15076:13
      |
15076 |     let mut line: libc::c_int = 0;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:15078:13
      |
15078 |     let mut ret: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:15286:13
      |
15286 |     let mut buf: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:15289:13
      |
15289 |     let mut cur: xmlChar = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:15323:21
      |
15323 |             let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:15438:13
      |
15438 |     let mut cur: xmlChar = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:15468:25
      |
15468 |                 let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
      |                         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `handler` is never read
     --> src/parser.rs:15655:21
      |
15655 |             let mut handler: xmlCharEncodingHandlerPtr =
      |                     ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `version` is never read
     --> src/parser.rs:15852:13
      |
15852 |     let mut version: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `enc` is never read
     --> src/parser.rs:16076:13
      |
16076 |     let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `enc` is never read
     --> src/parser.rs:16347:13
      |
16347 |     let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `base` is never read
     --> src/parser.rs:16496:13
      |
16496 |     let mut base: libc::c_int = 0;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `len` is never read
     --> src/parser.rs:16497:13
      |
16497 |     let mut len: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
     --> src/parser.rs:16498:13
      |
16498 |     let mut in_0: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:16499:13
      |
16499 |     let mut buf: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:16661:13
      |
16661 |     let mut tmp: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ix` is never read
     --> src/parser.rs:16735:13
      |
16735 |     let mut ix: libc::c_int = 0;
      |             ^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
     --> src/parser.rs:16736:13
      |
16736 |     let mut c: libc::c_uchar = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `codepoint` is never read
     --> src/parser.rs:16737:13
      |
16737 |     let mut codepoint: libc::c_int = 0;
      |             ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `avail` is never read
     --> src/parser.rs:16888:13
      |
16888 |     let mut avail: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:16890:13
      |
16890 |     let mut cur: xmlChar = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `next` is never read
     --> src/parser.rs:16891:13
      |
16891 |     let mut next: xmlChar = 0;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `enc` is never read
     --> src/parser.rs:17102:29
      |
17102 |                     let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
      |                             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/parser.rs:17325:25
      |
17325 |                 let mut name: *const xmlChar = 0 as *const xmlChar;
      |                         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `test` is never read
     --> src/parser.rs:17499:25
      |
17499 |                 let mut test: *const xmlChar = 0 as *const xmlChar;
      |                         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cons` is never read
     --> src/parser.rs:17500:25
      |
17500 |                 let mut cons: libc::c_uint = 0;
      |                         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `term` is never read
     --> src/parser.rs:17547:33
      |
17547 |                         let mut term: libc::c_int = 0;
      |                                 ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `base_0` is never read
     --> src/parser.rs:17751:25
      |
17751 |                 let mut base_0: libc::c_int = 0;
      |                         ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:17761:29
      |
17761 |                     let mut tmp: libc::c_int = 0;
      |                             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `skipl` is never read
     --> src/parser.rs:17789:33
      |
17789 |                         let mut skipl: libc::c_int = 0;
      |                                 ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp_0` is never read
     --> src/parser.rs:17811:29
      |
17811 |                     let mut tmp_0: libc::c_int = 0;
      |                             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `skipl_0` is never read
     --> src/parser.rs:17875:33
      |
17875 |                         let mut skipl_0: libc::c_int = 0;
      |                                 ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `base_1` is never read
     --> src/parser.rs:18390:25
      |
18390 |                 let mut base_1: libc::c_int = 0;
      |                         ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/parser.rs:18391:25
      |
18391 |                 let mut i: libc::c_int = 0;
      |                         ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:18392:25
      |
18392 |                 let mut buf: *mut xmlChar = 0 as *mut xmlChar;
      |                         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `use_0` is never read
     --> src/parser.rs:18394:25
      |
18394 |                 let mut use_0: size_t = 0;
      |                         ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/parser.rs:18976:21
      |
18976 |             let mut res: libc::c_int = 0;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `nbchars` is never read
     --> src/parser.rs:19058:29
      |
19058 |                     let mut nbchars: libc::c_int = 0;
      |                             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:19222:13
      |
19222 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `inputStream` is never read
     --> src/parser.rs:19223:13
      |
19223 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:19224:13
      |
19224 |     let mut buf: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:19416:13
      |
19416 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `inputStream` is never read
     --> src/parser.rs:19417:13
      |
19417 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:19418:13
      |
19418 |     let mut buf: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:19501:13
      |
19501 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `pinput` is never read
     --> src/parser.rs:19502:13
      |
19502 |     let mut pinput: xmlParserInputPtr = 0 as xmlParserInputPtr;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:19603:25
      |
19603 |                 let mut tmp: xmlNodePtr = 0 as *mut xmlNode;
      |                         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:19635:13
      |
19635 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `enc` is never read
     --> src/parser.rs:19637:13
      |
19637 |     let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `systemIdCanonic` is never read
     --> src/parser.rs:19638:13
      |
19638 |     let mut systemIdCanonic: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/parser.rs:19735:25
      |
19735 |                 let mut tmp: xmlNodePtr = 0 as *mut xmlNode;
      |                         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `userData` is never read
     --> src/parser.rs:19794:13
      |
19794 |     let mut userData: *mut libc::c_void = 0 as *mut libc::c_void;
      |             ^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:19836:13
      |
19836 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `newDoc` is never read
     --> src/parser.rs:19837:13
      |
19837 |     let mut newDoc: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `newRoot` is never read
     --> src/parser.rs:19838:13
      |
19838 |     let mut newRoot: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:19840:13
      |
19840 |     let mut ret: xmlParserErrors = XML_ERR_OK;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `enc` is never read
     --> src/parser.rs:19842:13
      |
19842 |     let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:20029:21
      |
20029 |             let mut cur: xmlNodePtr = 0 as *mut xmlNode;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:20188:13
      |
20188 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `newRoot` is never read
     --> src/parser.rs:20190:13
      |
20190 |     let mut newRoot: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldsax` is never read
     --> src/parser.rs:20191:13
      |
20191 |     let mut oldsax: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `size` is never read
     --> src/parser.rs:20194:13
      |
20194 |     let mut size: libc::c_int = 0;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:20195:13
      |
20195 |     let mut ret: xmlParserErrors = XML_ERR_OK;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:20321:17
      |
20321 |         let mut cur: xmlNodePtr = 0 as *mut xmlNode;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:20406:21
      |
20406 |             let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |                     ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `doc` is never read
     --> src/parser.rs:20407:21
      |
20407 |             let mut doc: xmlDocPtr = 0 as xmlDocPtr;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `fake` is never read
     --> src/parser.rs:20408:21
      |
20408 |             let mut fake: xmlNodePtr = 0 as *mut xmlNode;
      |                     ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:20409:21
      |
20409 |             let mut cur: xmlNodePtr = 0 as *mut xmlNode;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:20411:21
      |
20411 |             let mut ret: xmlParserErrors = XML_ERR_OK;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hdlr` is never read
     --> src/parser.rs:20472:25
      |
20472 |                 let mut hdlr: xmlCharEncodingHandlerPtr =
      |                         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `iprefix` is never read
     --> src/parser.rs:20507:29
      |
20507 |                     let mut iprefix: *const xmlChar = 0 as *const xmlChar;
      |                             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ihref` is never read
     --> src/parser.rs:20508:29
      |
20508 |                     let mut ihref: *const xmlChar = 0 as *const xmlChar;
      |                             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:20635:13
      |
20635 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `newDoc` is never read
     --> src/parser.rs:20636:13
      |
20636 |     let mut newDoc: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `content` is never read
     --> src/parser.rs:20638:13
      |
20638 |     let mut content: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `newRoot` is never read
     --> src/parser.rs:20639:13
      |
20639 |     let mut newRoot: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `size` is never read
     --> src/parser.rs:20640:13
      |
20640 |     let mut size: libc::c_int = 0;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:20641:13
      |
20641 |     let mut ret: libc::c_int = 0 as libc::c_int;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/parser.rs:20750:17
      |
20750 |         let mut cur: xmlNodePtr = 0 as *mut xmlNode;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:20792:13
      |
20792 |     let mut ret: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:20793:13
      |
20793 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:20855:13
      |
20855 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `inputStream` is never read
     --> src/parser.rs:20856:13
      |
20856 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `uri` is never read
     --> src/parser.rs:20858:13
      |
20858 |     let mut uri: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:20954:13
      |
20954 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `inputStream` is never read
     --> src/parser.rs:20955:13
      |
20955 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:21024:13
      |
21024 |     let mut ret: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:21025:13
      |
21025 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:21141:13
      |
21141 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:21182:13
      |
21182 |     let mut ret: libc::c_int = 0 as libc::c_int;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:21183:13
      |
21183 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:21227:13
      |
21227 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:21228:13
      |
21228 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:21229:13
      |
21229 |     let mut buf: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:21276:13
      |
21276 |     let mut ret: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:21277:13
      |
21277 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:21379:13
      |
21379 |     let mut ret: libc::c_int = 0 as libc::c_int;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:21380:13
      |
21380 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `len` is never read
     --> src/parser.rs:21417:13
      |
21417 |     let mut len: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:21440:13
      |
21440 |     let mut ret: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:21441:13
      |
21441 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:21719:13
      |
21719 |     let mut input: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `dict` is never read
     --> src/parser.rs:21720:13
      |
21720 |     let mut dict: xmlDictPtr = 0 as *mut xmlDict;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `inputStream` is never read
     --> src/parser.rs:21850:13
      |
21850 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buf` is never read
     --> src/parser.rs:21851:13
      |
21851 |     let mut buf: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hdlr` is never read
     --> src/parser.rs:21907:17
      |
21907 |         let mut hdlr: xmlCharEncodingHandlerPtr =
      |                 ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/parser.rs:22117:13
      |
22117 |     let mut ret: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hdlr` is never read
     --> src/parser.rs:22120:17
      |
22120 |         let mut hdlr: xmlCharEncodingHandlerPtr =
      |                 ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:22157:13
      |
22157 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:22178:13
      |
22178 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:22204:13
      |
22204 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:22228:13
      |
22228 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:22229:13
      |
22229 |     let mut input: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/parser.rs:22230:13
      |
22230 |     let mut stream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/parser.rs:22270:13
      |
22270 |     let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:22271:13
      |
22271 |     let mut input: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/parser.rs:22272:13
      |
22272 |     let mut stream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/parser.rs:22318:13
      |
22318 |     let mut stream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/parser.rs:22346:13
      |
22346 |     let mut stream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:22379:13
      |
22379 |     let mut input: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/parser.rs:22380:13
      |
22380 |     let mut stream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:22418:13
      |
22418 |     let mut input: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/parser.rs:22419:13
      |
22419 |     let mut stream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `input` is never read
     --> src/parser.rs:22445:13
      |
22445 |     let mut input: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/parser.rs:22446:13
      |
22446 |     let mut stream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `A` is never read
   --> src/xpath.rs:390:17
    |
390 |         let mut A: size_t = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `B` is never read
   --> src/xpath.rs:391:17
    |
391 |         let mut B: size_t = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `C` is never read
   --> src/xpath.rs:392:17
    |
392 |         let mut C: size_t = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `D` is never read
   --> src/xpath.rs:393:17
    |
393 |         let mut D: size_t = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `ABC` is never read
   --> src/xpath.rs:394:17
    |
394 |         let mut ABC: libc::c_int = 0;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `BCD` is never read
   --> src/xpath.rs:395:17
    |
395 |         let mut BCD: libc::c_int = 0;
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `CD` is never read
   --> src/xpath.rs:396:17
    |
396 |         let mut CD: libc::c_int = 0;
    |                 ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `storage` is never read
   --> src/xpath.rs:510:13
    |
510 |     let mut storage: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
    |             ^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/xpath.rs:511:13
    |
511 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/xpath.rs:512:13
    |
512 |     let mut j: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `k` is never read
   --> src/xpath.rs:513:13
    |
513 |     let mut k: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `curr` is never read
   --> src/xpath.rs:608:13
    |
608 |     let mut curr: size_t = 0;
    |             ^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `A` is never read
   --> src/xpath.rs:697:13
    |
697 |     let mut A: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `B` is never read
   --> src/xpath.rs:698:13
    |
698 |     let mut B: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `C` is never read
   --> src/xpath.rs:699:13
    |
699 |     let mut C: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `l` is never read
   --> src/xpath.rs:721:13
    |
721 |     let mut l: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
   --> src/xpath.rs:722:13
    |
722 |     let mut c: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `r` is never read
   --> src/xpath.rs:723:13
    |
723 |     let mut r: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `cx` is never read
   --> src/xpath.rs:724:13
    |
724 |     let mut cx: xmlNodePtr = 0 as *mut xmlNode;
    |             ^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
   --> src/xpath.rs:759:13
    |
759 |     let mut i: size_t = 0;
    |             ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
   --> src/xpath.rs:762:17
    |
762 |         let mut j: size_t = 0;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `x` is never read
   --> src/xpath.rs:763:17
    |
763 |         let mut x: xmlNodePtr = 0 as *mut xmlNode;
    |                 ^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `location` is never read
   --> src/xpath.rs:764:17
    |
764 |         let mut location: size_t = 0;
    |                 ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `minrun` is never read
   --> src/xpath.rs:852:13
    |
852 |     let mut minrun: size_t = 0;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `store` is never read
   --> src/xpath.rs:855:13
    |
855 |     let mut store: *mut TEMP_STORAGE_T = 0 as *mut TEMP_STORAGE_T;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `file`
    --> src/xpath.rs:1222:44
     |
1222 | ...                   mut file: *const libc::c_char,
     |                           ^^^^ help: if this is intentional, prefix it with an underscore: `_file`

warning: unused variable: `line`
    --> src/xpath.rs:1223:44
     |
1223 | ...                   mut line: libc::c_int,
     |                           ^^^^ help: if this is intentional, prefix it with an underscore: `_line`

warning: value assigned to `ret` is never read
    --> src/xpath.rs:1311:13
     |
1311 |     let mut ret: xmlPointerListPtr = 0 as *mut xmlPointerList;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:1357:13
     |
1357 |     let mut cur: xmlXPathCompExprPtr = 0 as *mut xmlXPathCompExpr;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `op` is never read
    --> src/xpath.rs:1406:13
     |
1406 |     let mut op: xmlXPathStepOpPtr = 0 as *mut xmlXPathStepOp;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1407:13
     |
1407 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `real` is never read
    --> src/xpath.rs:1503:17
     |
1503 |         let mut real: *mut xmlXPathStepOp = 0 as *mut xmlXPathStepOp;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/xpath.rs:1591:13
     |
1591 |     let mut tmp: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1604:13
     |
1604 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/xpath.rs:1640:13
     |
1640 |     let mut tmp: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1641:13
     |
1641 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1671:13
     |
1671 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1712:13
     |
1712 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1747:13
     |
1747 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1794:13
     |
1794 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:1968:13
     |
1968 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:2310:13
     |
2310 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `flag`
    --> src/xpath.rs:2309:53
     |
2309 | ...                   mut flag: libc::c_int) {
     |                           ^^^^ help: if this is intentional, prefix it with an underscore: `_flag`

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2395:13
     |
2395 |     let mut ret: xmlXPathContextCachePtr = 0 as *mut xmlXPathContextCache;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:2417:13
     |
2417 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
    --> src/xpath.rs:2418:13
     |
2418 |     let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cache` is never read
    --> src/xpath.rs:2490:17
     |
2490 |         let mut cache: xmlXPathContextCachePtr =
     |                 ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2529:21
     |
2529 |             let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2560:21
     |
2560 |             let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret_0` is never read
    --> src/xpath.rs:2572:25
     |
2572 |                 let mut ret_0: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2608:21
     |
2608 |             let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret_0` is never read
    --> src/xpath.rs:2637:25
     |
2637 |                 let mut ret_0: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2678:21
     |
2678 |             let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret_0` is never read
    --> src/xpath.rs:2690:25
     |
2690 |                 let mut ret_0: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2722:21
     |
2722 |             let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret_0` is never read
    --> src/xpath.rs:2740:25
     |
2740 |                 let mut ret_0: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2778:21
     |
2778 |             let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret_0` is never read
    --> src/xpath.rs:2790:25
     |
2790 |                 let mut ret_0: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2822:21
     |
2822 |             let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                     ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret_0` is never read
    --> src/xpath.rs:2834:25
     |
2834 |                 let mut ret_0: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2942:13
     |
2942 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2968:13
     |
2968 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:2993:13
     |
2993 |     let mut ret: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:3028:13
     |
3028 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/xpath.rs:3073:17
     |
3073 |         let mut tmp: *mut xmlXPathObjectPtr = 0 as *mut xmlXPathObjectPtr;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
    --> src/xpath.rs:3190:13
     |
3190 |     let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:3191:13
     |
3191 |     let mut ret: libc::c_int = 0;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
    --> src/xpath.rs:3222:13
     |
3222 |     let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:3223:13
     |
3223 |     let mut ret: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
    --> src/xpath.rs:3254:13
     |
3254 |     let mut obj: xmlXPathObjectPtr =
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:3256:13
     |
3256 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
    --> src/xpath.rs:3287:13
     |
3287 |     let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:3288:13
     |
3288 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
    --> src/xpath.rs:3332:13
     |
3332 |     let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:3333:13
     |
3333 |     let mut ret: *mut libc::c_void = 0 as *mut libc::c_void;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ptr` is never read
    --> src/xpath.rs:3408:25
     |
3408 |                 let mut ptr: *mut libc::c_char = 0 as *mut libc::c_char;
     |                         ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:3409:25
     |
3409 |                 let mut cur: *mut libc::c_char = 0 as *mut libc::c_char;
     |                         ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `integer_place` is never read
    --> src/xpath.rs:3456:25
     |
3456 |                 let mut integer_place: libc::c_int = 0;
     |                         ^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `fraction_place` is never read
    --> src/xpath.rs:3457:25
     |
3457 |                 let mut fraction_place: libc::c_int = 0;
     |                         ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ptr_0` is never read
    --> src/xpath.rs:3458:25
     |
3458 |                 let mut ptr_0: *mut libc::c_char = 0 as *mut libc::c_char;
     |                         ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `after_fraction` is never read
    --> src/xpath.rs:3459:25
     |
3459 |                 let mut after_fraction: *mut libc::c_char =
     |                         ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `absolute_value` is never read
    --> src/xpath.rs:3461:25
     |
3461 |                 let mut absolute_value: libc::c_double = 0.;
     |                         ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `size` is never read
    --> src/xpath.rs:3462:25
     |
3462 |                 let mut size: libc::c_int = 0;
     |                         ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:3588:13
     |
3588 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `depth1` is never read
    --> src/xpath.rs:3633:13
     |
3633 |     let mut depth1: libc::c_int = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `depth2` is never read
    --> src/xpath.rs:3634:13
     |
3634 |     let mut depth2: libc::c_int = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:3639:13
     |
3639 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `root` is never read
    --> src/xpath.rs:3640:13
     |
3640 |     let mut root: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l1` is never read
    --> src/xpath.rs:3695:17
     |
3695 |         let mut l1: ptrdiff_t = 0;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l2` is never read
    --> src/xpath.rs:3696:17
     |
3696 |         let mut l2: ptrdiff_t = 0;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l1_0` is never read
    --> src/xpath.rs:3750:17
     |
3750 |         let mut l1_0: ptrdiff_t = 0;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l2_0` is never read
    --> src/xpath.rs:3751:17
     |
3751 |         let mut l2_0: ptrdiff_t = 0;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:3791:13
     |
3791 |     let mut cur: xmlNsPtr = 0 as *mut xmlNs;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:3868:13
     |
3868 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:3935:13
     |
3935 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns1` is never read
    --> src/xpath.rs:3943:25
     |
3943 |                 let mut ns1: xmlNsPtr = 0 as *mut xmlNs;
     |                         ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns2` is never read
    --> src/xpath.rs:3944:25
     |
3944 |                 let mut ns2: xmlNsPtr = 0 as *mut xmlNs;
     |                         ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:3981:13
     |
3981 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
    --> src/xpath.rs:4030:17
     |
4030 |         let mut temp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4077:13
     |
4077 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
    --> src/xpath.rs:4113:17
     |
4113 |         let mut temp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
    --> src/xpath.rs:4195:17
     |
4195 |         let mut temp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4252:13
     |
4252 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/xpath.rs:4253:13
     |
4253 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `initNr` is never read
    --> src/xpath.rs:4254:13
     |
4254 |     let mut initNr: libc::c_int = 0;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `skip` is never read
    --> src/xpath.rs:4255:13
     |
4255 |     let mut skip: libc::c_int = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `n1` is never read
    --> src/xpath.rs:4256:13
     |
4256 |     let mut n1: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `n2` is never read
    --> src/xpath.rs:4257:13
     |
4257 |     let mut n2: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
    --> src/xpath.rs:4319:25
     |
4319 |                 let mut temp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
     |                         ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4383:13
     |
4383 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/xpath.rs:4384:13
     |
4384 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `initNbSet1` is never read
    --> src/xpath.rs:4385:13
     |
4385 |     let mut initNbSet1: libc::c_int = 0;
     |             ^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `n1` is never read
    --> src/xpath.rs:4386:13
     |
4386 |     let mut n1: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `n2` is never read
    --> src/xpath.rs:4387:13
     |
4387 |     let mut n2: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
    --> src/xpath.rs:4451:29
     |
4451 |                     let mut temp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
     |                             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4511:13
     |
4511 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `n2` is never read
    --> src/xpath.rs:4512:13
     |
4512 |     let mut n2: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
    --> src/xpath.rs:4537:21
     |
4537 |             let mut temp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
     |                     ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4585:13
     |
4585 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4651:17
     |
4651 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4686:21
     |
4686 |             let mut i: libc::c_int = 0;
     |                     ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `node` is never read
    --> src/xpath.rs:4687:21
     |
4687 |             let mut node: xmlNodePtr = 0 as *mut xmlNode;
     |                     ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4723:13
     |
4723 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `node` is never read
    --> src/xpath.rs:4724:13
     |
4724 |     let mut node: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4754:13
     |
4754 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:4788:13
     |
4788 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:4820:13
     |
4820 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:4851:13
     |
4851 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4852:13
     |
4852 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:4888:13
     |
4888 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:4932:13
     |
4932 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4933:13
     |
4933 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l1` is never read
    --> src/xpath.rs:4934:13
     |
4934 |     let mut l1: libc::c_int = 0;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:4935:13
     |
4935 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:4980:13
     |
4980 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l1` is never read
    --> src/xpath.rs:4981:13
     |
4981 |     let mut l1: libc::c_int = 0;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:4982:13
     |
4982 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5023:13
     |
5023 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hash` is never read
    --> src/xpath.rs:5024:13
     |
5024 |     let mut hash: xmlHashTablePtr = 0 as *mut xmlHashTable;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:5025:13
     |
5025 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l` is never read
    --> src/xpath.rs:5026:13
     |
5026 |     let mut l: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `strval` is never read
    --> src/xpath.rs:5027:13
     |
5027 |     let mut strval: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:5028:13
     |
5028 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:5100:13
     |
5100 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l` is never read
    --> src/xpath.rs:5101:13
     |
5101 |     let mut l: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:5102:13
     |
5102 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:5140:13
     |
5140 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l` is never read
    --> src/xpath.rs:5141:13
     |
5141 |     let mut l: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:5142:13
     |
5142 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5143:13
     |
5143 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:5276:13
     |
5276 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `l` is never read
    --> src/xpath.rs:5277:13
     |
5277 |     let mut l: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:5278:13
     |
5278 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5279:13
     |
5279 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5489:17
     |
5489 |         let mut ret: xmlXPathFunction = None;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `f` is never read
    --> src/xpath.rs:5490:17
     |
5490 |         let mut f: xmlXPathFuncLookupFunc = None;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5516:13
     |
5516 |     let mut ret: xmlXPathFunction = None;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `f` is never read
    --> src/xpath.rs:5520:17
     |
5520 |         let mut f: xmlXPathFuncLookupFunc = None;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5729:17
     |
5729 |         let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5758:17
     |
5758 |         let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |                 ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:5860:17
     |
5860 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5907:13
     |
5907 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5935:13
     |
5935 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5963:13
     |
5963 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:5997:13
     |
5997 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6025:13
     |
6025 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6066:13
     |
6066 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6094:13
     |
6094 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `name`
    --> src/xpath.rs:6175:50
     |
6175 | ...                   mut name: *const xmlChar) {
     |                           ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: value assigned to `i` is never read
    --> src/xpath.rs:6374:33
     |
6374 |                         let mut i: libc::c_int = 0;
     |                                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `node` is never read
    --> src/xpath.rs:6375:33
     |
6375 |                         let mut node: xmlNodePtr = 0 as *mut xmlNode;
     |                                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6435:13
     |
6435 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6458:13
     |
6458 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6504:13
     |
6504 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `strval` is never read
    --> src/xpath.rs:6681:13
     |
6681 |     let mut strval: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6682:13
     |
6682 |     let mut ret: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `str` is never read
    --> src/xpath.rs:6701:13
     |
6701 |     let mut str: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6702:13
     |
6702 |     let mut ret: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `flag`
    --> src/xpath.rs:6718:74
     |
6718 | pub unsafe fn xmlXPathCastToNumber_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                                                          ^^^^ help: if this is intentional, prefix it with an underscore: `_flag`

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6768:13
     |
6768 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6888:13
     |
6888 |     let mut ret: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6917:13
     |
6917 |     let mut ret: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:6995:13
     |
6995 |     let mut ret: xmlXPathParserContextPtr = 0 as *mut xmlXPathParserContext;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:7036:13
     |
7036 |     let mut ret: xmlXPathParserContextPtr = 0 as *mut xmlXPathParserContext;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:7080:13
     |
7080 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `string` is never read
    --> src/xpath.rs:7123:13
     |
7123 |     let mut string: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
    --> src/xpath.rs:7124:13
     |
7124 |     let mut tmp: xmlNodePtr = 0 as xmlNodePtr;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:7280:13
     |
7280 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns` is never read
    --> src/xpath.rs:7282:13
     |
7282 |     let mut ns: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `str2` is never read
    --> src/xpath.rs:7283:13
     |
7283 |     let mut str2: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:7344:13
     |
7344 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns` is never read
    --> src/xpath.rs:7346:13
     |
7346 |     let mut ns: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `str2` is never read
    --> src/xpath.rs:7347:13
     |
7347 |     let mut str2: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:7412:13
     |
7412 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/xpath.rs:7413:13
     |
7413 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val1` is never read
    --> src/xpath.rs:7415:13
     |
7415 |     let mut val1: libc::c_double = 0.;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `values2` is never read
    --> src/xpath.rs:7416:13
     |
7416 |     let mut values2: *mut libc::c_double = 0 as *mut libc::c_double;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns1` is never read
    --> src/xpath.rs:7418:13
     |
7418 |     let mut ns1: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns2` is never read
    --> src/xpath.rs:7419:13
     |
7419 |     let mut ns2: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:7591:13
     |
7591 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns` is never read
    --> src/xpath.rs:7592:13
     |
7592 |     let mut ns: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `str2` is never read
    --> src/xpath.rs:7593:13
     |
7593 |     let mut str2: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hash` is never read
    --> src/xpath.rs:7594:13
     |
7594 |     let mut hash: libc::c_uint = 0;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:7666:13
     |
7666 |     let mut i: libc::c_int = 0; /* NaN is unequal to any value */
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns` is never read
    --> src/xpath.rs:7668:13
     |
7668 |     let mut ns: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `str2` is never read
    --> src/xpath.rs:7669:13
     |
7669 |     let mut str2: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
    --> src/xpath.rs:7670:13
     |
7670 |     let mut val: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `v` is never read
    --> src/xpath.rs:7671:13
     |
7671 |     let mut v: libc::c_double = 0.;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:7730:13
     |
7730 |     let mut i: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
    --> src/xpath.rs:7731:13
     |
7731 |     let mut j: libc::c_int = 0;
     |             ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hashs1` is never read
    --> src/xpath.rs:7732:13
     |
7732 |     let mut hashs1: *mut libc::c_uint = 0 as *mut libc::c_uint;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `hashs2` is never read
    --> src/xpath.rs:7733:13
     |
7733 |     let mut hashs2: *mut libc::c_uint = 0 as *mut libc::c_uint;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `values1` is never read
    --> src/xpath.rs:7734:13
     |
7734 |     let mut values1: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `values2` is never read
    --> src/xpath.rs:7735:13
     |
7735 |     let mut values2: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
     |             ^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns1` is never read
    --> src/xpath.rs:7737:13
     |
7737 |     let mut ns1: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns2` is never read
    --> src/xpath.rs:7738:13
     |
7738 |     let mut ns2: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg1` is never read
    --> src/xpath.rs:8143:13
     |
8143 |     let mut arg1: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg2` is never read
    --> src/xpath.rs:8144:13
     |
8144 |     let mut arg2: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `argtmp` is never read
    --> src/xpath.rs:8145:13
     |
8145 |     let mut argtmp: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg1` is never read
    --> src/xpath.rs:8256:13
     |
8256 |     let mut arg1: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg2` is never read
    --> src/xpath.rs:8257:13
     |
8257 |     let mut arg2: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `argtmp` is never read
    --> src/xpath.rs:8258:13
     |
8258 |     let mut argtmp: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg1i` is never read
    --> src/xpath.rs:8390:13
     |
8390 |     let mut arg1i: libc::c_int = 0 as libc::c_int;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg2i` is never read
    --> src/xpath.rs:8391:13
     |
8391 |     let mut arg2i: libc::c_int = 0 as libc::c_int;
     |             ^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg1` is never read
    --> src/xpath.rs:8392:13
     |
8392 |     let mut arg1: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg2` is never read
    --> src/xpath.rs:8393:13
     |
8393 |     let mut arg2: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg` is never read
    --> src/xpath.rs:8544:13
     |
8544 |     let mut arg: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
    --> src/xpath.rs:8545:13
     |
8545 |     let mut val: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg` is never read
    --> src/xpath.rs:8577:13
     |
8577 |     let mut arg: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
    --> src/xpath.rs:8578:13
     |
8578 |     let mut val: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg` is never read
    --> src/xpath.rs:8610:13
     |
8610 |     let mut arg: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
    --> src/xpath.rs:8611:13
     |
8611 |     let mut val: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg` is never read
    --> src/xpath.rs:8643:13
     |
8643 |     let mut arg: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
    --> src/xpath.rs:8644:13
     |
8644 |     let mut val: libc::c_double = 0.;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg` is never read
    --> src/xpath.rs:8676:13
     |
8676 |     let mut arg: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg1` is never read
    --> src/xpath.rs:8677:13
     |
8677 |     let mut arg1: libc::c_double = 0.;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `arg2` is never read
    --> src/xpath.rs:8678:13
     |
8678 |     let mut arg2: libc::c_double = 0.;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:9777:13
     |
9777 |     let mut cur: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:9820:13
     |
9820 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ID` is never read
    --> src/xpath.rs:9822:13
     |
9822 |     let mut ID: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `attr` is never read
    --> src/xpath.rs:9823:13
     |
9823 |     let mut attr: xmlAttrPtr = 0 as *mut xmlAttr;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `elem` is never read
    --> src/xpath.rs:9824:13
     |
9824 |     let mut elem: xmlNodePtr = 0 as xmlNodePtr;
     |             ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `tokens` is never read
    --> src/xpath.rs:9902:13
     |
9902 |     let mut tokens: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
    --> src/xpath.rs:9903:13
     |
9903 |     let mut ret: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
    --> src/xpath.rs:9904:13
     |
9904 |     let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `ns` is never read
    --> src/xpath.rs:9923:17
     |
9923 |         let mut ns: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
     |                 ^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
    --> src/xpath.rs:9924:17
     |
9924 |         let mut i: libc::c_int = 0;
     |                 ^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
    --> src/xpath.rs:9972:13
     |
9972 |     let mut cur: xmlXPathObjectPtr =
     |             ^^^
     |
     = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:10068:13
      |
10068 |     let mut cur: xmlXPathObjectPtr =
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:10156:13
      |
10156 |     let mut cur: xmlXPathObjectPtr =
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `fullname` is never read
     --> src/xpath.rs:10217:29
      |
10217 |                     let mut fullname: *mut xmlChar = 0 as *mut xmlChar;
      |                             ^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:10296:13
      |
10296 |     let mut cur: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:10337:13
      |
10337 |     let mut cur: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `content` is never read
     --> src/xpath.rs:10346:21
      |
10346 |             let mut content: *mut xmlChar = 0 as *mut xmlChar;
      |                     ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:10397:13
      |
10397 |     let mut cur: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `newobj` is never read
     --> src/xpath.rs:10398:13
      |
10398 |     let mut newobj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:10399:13
      |
10399 |     let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hay` is never read
     --> src/xpath.rs:10462:13
      |
10462 |     let mut hay: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `needle` is never read
     --> src/xpath.rs:10463:13
      |
10463 |     let mut needle: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hay` is never read
     --> src/xpath.rs:10523:13
      |
10523 |     let mut hay: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `needle` is never read
     --> src/xpath.rs:10524:13
      |
10524 |     let mut needle: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `n` is never read
     --> src/xpath.rs:10525:13
      |
10525 |     let mut n: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `str` is never read
     --> src/xpath.rs:10604:13
      |
10604 |     let mut str: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `start` is never read
     --> src/xpath.rs:10605:13
      |
10605 |     let mut start: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `len` is never read
     --> src/xpath.rs:10606:13
      |
10606 |     let mut len: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
     --> src/xpath.rs:10608:13
      |
10608 |     let mut in_0: libc::c_double = 0.;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `rin` is never read
     --> src/xpath.rs:10686:17
      |
10686 |         let mut rin: libc::c_double = 0.;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `rle` is never read
     --> src/xpath.rs:10687:17
      |
10687 |         let mut rle: libc::c_double = 0.;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `end` is never read
     --> src/xpath.rs:10688:17
      |
10688 |         let mut end: libc::c_double = 0.;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `str` is never read
     --> src/xpath.rs:10732:13
      |
10732 |     let mut str: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `find` is never read
     --> src/xpath.rs:10733:13
      |
10733 |     let mut find: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `target` is never read
     --> src/xpath.rs:10734:13
      |
10734 |     let mut target: xmlBufPtr = 0 as *mut xmlBuf;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `point` is never read
     --> src/xpath.rs:10735:13
      |
10735 |     let mut point: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `offset` is never read
     --> src/xpath.rs:10736:13
      |
10736 |     let mut offset: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `str` is never read
     --> src/xpath.rs:10795:13
      |
10795 |     let mut str: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `find` is never read
     --> src/xpath.rs:10796:13
      |
10796 |     let mut find: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `target` is never read
     --> src/xpath.rs:10797:13
      |
10797 |     let mut target: xmlBufPtr = 0 as *mut xmlBuf;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `point` is never read
     --> src/xpath.rs:10798:13
      |
10798 |     let mut point: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `offset` is never read
     --> src/xpath.rs:10799:13
      |
10799 |     let mut offset: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
     --> src/xpath.rs:10858:13
      |
10858 |     let mut obj: xmlXPathObjectPtr = 0 as xmlXPathObjectPtr;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `source` is never read
     --> src/xpath.rs:10859:13
      |
10859 |     let mut source: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `target` is never read
     --> src/xpath.rs:10860:13
      |
10860 |     let mut target: xmlBufPtr = 0 as *mut xmlBuf;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `blank` is never read
     --> src/xpath.rs:10861:13
      |
10861 |     let mut blank: xmlChar = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `str` is never read
     --> src/xpath.rs:10951:13
      |
10951 |     let mut str: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `from` is never read
     --> src/xpath.rs:10952:13
      |
10952 |     let mut from: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `to` is never read
     --> src/xpath.rs:10953:13
      |
10953 |     let mut to: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `target` is never read
     --> src/xpath.rs:10954:13
      |
10954 |     let mut target: xmlBufPtr = 0 as *mut xmlBuf;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `offset` is never read
     --> src/xpath.rs:10955:13
      |
10955 |     let mut offset: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `max` is never read
     --> src/xpath.rs:10956:13
      |
10956 |     let mut max: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ch` is never read
     --> src/xpath.rs:10957:13
      |
10957 |     let mut ch: xmlChar = 0;
      |             ^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `point` is never read
     --> src/xpath.rs:10958:13
      |
10958 |     let mut point: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cptr` is never read
     --> src/xpath.rs:10959:13
      |
10959 |     let mut cptr: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:11072:13
      |
11072 |     let mut cur: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
     --> src/xpath.rs:11200:13
      |
11200 |     let mut val: xmlXPathObjectPtr = 0 as xmlXPathObjectPtr;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `theLang` is never read
     --> src/xpath.rs:11201:13
      |
11201 |     let mut theLang: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `lang` is never read
     --> src/xpath.rs:11202:13
      |
11202 |     let mut lang: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/xpath.rs:11204:13
      |
11204 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:11335:13
      |
11335 |     let mut cur: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:11336:13
      |
11336 |     let mut res: libc::c_double = 0.;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:11377:13
      |
11377 |     let mut cur: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/xpath.rs:11378:13
      |
11378 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `f` is never read
     --> src/xpath.rs:11506:13
      |
11506 |     let mut f: libc::c_double = 0.;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
     --> src/xpath.rs:11552:13
      |
11552 |     let mut c: libc::c_uchar = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:11554:13
      |
11554 |     let mut cur: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
     --> src/xpath.rs:11698:13
      |
11698 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:11699:13
      |
11699 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `count` is never read
     --> src/xpath.rs:11700:13
      |
11700 |     let mut count: libc::c_int = 0 as libc::c_int;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:11761:13
      |
11761 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `in_0` is never read
     --> src/xpath.rs:11789:13
      |
11789 |     let mut in_0: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:11790:13
      |
11790 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `count` is never read
     --> src/xpath.rs:11791:13
      |
11791 |     let mut count: size_t = 0 as libc::c_int as size_t;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `c` is never read
     --> src/xpath.rs:11840:13
      |
11840 |     let mut c: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `buffer` is never read
     --> src/xpath.rs:11923:21
      |
11923 |             let mut buffer: *mut xmlChar = 0 as *mut xmlChar;
      |                     ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:11984:29
      |
11984 |                     let mut tmp: *mut xmlChar = 0 as *mut xmlChar;
      |                             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:12055:13
      |
12055 |     let mut tmp: libc::c_ulong = 0 as libc::c_int as libc::c_ulong;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
     --> src/xpath.rs:12056:13
      |
12056 |     let mut temp: libc::c_double = 0.;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:12058:9
      |
12058 |         tmp = 0 as libc::c_int as libc::c_ulong;
      |         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
     --> src/xpath.rs:12059:9
      |
12059 |         temp = 0.;
      |         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `v` is never read
     --> src/xpath.rs:12117:17
      |
12117 |         let mut v: libc::c_int = 0;
      |                 ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `max` is never read
     --> src/xpath.rs:12119:17
      |
12119 |         let mut max: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:12188:13
      |
12188 |     let mut ret: libc::c_double = 0.0f64;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `num` is never read
     --> src/xpath.rs:12192:13
      |
12192 |     let mut num: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:12193:13
      |
12193 |     let mut tmp: libc::c_ulong = 0 as libc::c_int as libc::c_ulong;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `temp` is never read
     --> src/xpath.rs:12194:13
      |
12194 |     let mut temp: libc::c_double = 0.;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `v` is never read
     --> src/xpath.rs:12219:17
      |
12219 |         let mut v: libc::c_int = 0;
      |                 ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `max` is never read
     --> src/xpath.rs:12221:17
      |
12221 |         let mut max: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `q` is never read
     --> src/xpath.rs:12313:13
      |
12313 |     let mut q: *const xmlChar = 0 as *const xmlChar;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:12314:13
      |
12314 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `q` is never read
     --> src/xpath.rs:12391:13
      |
12391 |     let mut q: *const xmlChar = 0 as *const xmlChar;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:12392:13
      |
12392 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `lit` is never read
     --> src/xpath.rs:12393:13
      |
12393 |     let mut lit: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/xpath.rs:12490:13
      |
12490 |     let mut name: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/xpath.rs:12592:13
      |
12592 |     let mut name: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: variable `len` is assigned to, but never used
     --> src/xpath.rs:12834:13
      |
12834 |     let mut len: libc::c_int = 0 as libc::c_int;
      |             ^^^
      |
      = note: consider using `_len` instead

warning: value assigned to `c` is never read
     --> src/xpath.rs:12836:13
      |
12836 |     let mut c: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:12837:13
      |
12837 |     let mut cur: *const xmlChar = 0 as *const xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:12838:13
      |
12838 |     let mut ret: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `name` is never read
     --> src/xpath.rs:12933:13
      |
12933 |     let mut name: *mut xmlChar =
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `plus` is never read
     --> src/xpath.rs:13315:17
      |
13315 |         let mut plus: libc::c_int = 0;
      |                 ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `inf` is never read
     --> src/xpath.rs:13377:17
      |
13377 |         let mut inf: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `strict` is never read
     --> src/xpath.rs:13378:17
      |
13378 |         let mut strict: libc::c_int = 0;
      |                 ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `eq` is never read
     --> src/xpath.rs:13450:17
      |
13450 |         let mut eq: libc::c_int = 0;
      |                 ^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `blanks` is never read
     --> src/xpath.rs:13730:13
      |
13730 |     let mut blanks: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `op1` is never read
     --> src/xpath.rs:14084:17
      |
14084 |         let mut op1: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `xpctxt` is never read
     --> src/xpath.rs:14461:13
      |
14461 |     let mut xpctxt: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldnode` is never read
     --> src/xpath.rs:14462:13
      |
14462 |     let mut oldnode: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `olddoc` is never read
     --> src/xpath.rs:14463:13
      |
14463 |     let mut olddoc: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `filterOp` is never read
     --> src/xpath.rs:14464:13
      |
14464 |     let mut filterOp: xmlXPathStepOpPtr = 0 as *mut xmlXPathStepOp;
      |             ^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldcs` is never read
     --> src/xpath.rs:14465:13
      |
14465 |     let mut oldcs: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldpp` is never read
     --> src/xpath.rs:14466:13
      |
14466 |     let mut oldpp: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/xpath.rs:14467:13
      |
14467 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
     --> src/xpath.rs:14468:13
      |
14468 |     let mut j: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `pos` is never read
     --> src/xpath.rs:14469:13
      |
14469 |     let mut pos: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:14493:17
      |
14493 |         let mut res: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:14556:17
      |
14556 |         let mut tmp: *mut xmlNodePtr = 0 as *mut xmlNodePtr;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `xpctxt` is never read
     --> src/xpath.rs:14596:13
      |
14596 |     let mut xpctxt: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldnode` is never read
     --> src/xpath.rs:14597:13
      |
14597 |     let mut oldnode: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `olddoc` is never read
     --> src/xpath.rs:14598:13
      |
14598 |     let mut olddoc: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `filterOp` is never read
     --> src/xpath.rs:14599:13
      |
14599 |     let mut filterOp: xmlXPathStepOpPtr = 0 as *mut xmlXPathStepOp;
      |             ^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldcs` is never read
     --> src/xpath.rs:14600:13
      |
14600 |     let mut oldcs: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldpp` is never read
     --> src/xpath.rs:14601:13
      |
14601 |     let mut oldpp: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/xpath.rs:14602:13
      |
14602 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
     --> src/xpath.rs:14603:13
      |
14603 |     let mut j: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `pos` is never read
     --> src/xpath.rs:14604:13
      |
14604 |     let mut pos: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:14624:17
      |
14624 |         let mut res: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:14679:17
      |
14679 |         let mut tmp: *mut xmlXPathObjectPtr = 0 as *mut xmlXPathObjectPtr;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `exprOp` is never read
     --> src/xpath.rs:14763:13
      |
14763 |     let mut exprOp: xmlXPathStepOpPtr = 0 as *mut xmlXPathStepOp;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hasNsNodes` is never read
     --> src/xpath.rs:14832:13
      |
14832 |     let mut hasNsNodes: libc::c_int = 0 as libc::c_int;
      |             ^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `obj` is never read
     --> src/xpath.rs:14834:13
      |
14834 |     let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `contextSeq` is never read
     --> src/xpath.rs:14836:13
      |
14836 |     let mut contextSeq: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
      |             ^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `contextIdx` is never read
     --> src/xpath.rs:14837:13
      |
14837 |     let mut contextIdx: libc::c_int = 0;
      |             ^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `contextNode` is never read
     --> src/xpath.rs:14838:13
      |
14838 |     let mut contextNode: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `outSeq` is never read
     --> src/xpath.rs:14840:13
      |
14840 |     let mut outSeq: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `seq` is never read
     --> src/xpath.rs:14845:13
      |
14845 |     let mut seq: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:14846:13
      |
14846 |     let mut cur: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `predOp` is never read
     --> src/xpath.rs:14848:13
      |
14848 |     let mut predOp: xmlXPathStepOpPtr =
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `maxPos` is never read
     --> src/xpath.rs:14851:13
      |
14851 |     let mut maxPos: libc::c_int = 0;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hasPredicateRange` is never read
     --> src/xpath.rs:14852:13
      |
14852 |     let mut hasPredicateRange: libc::c_int = 0;
      |             ^^^^^^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `hasAxisRange` is never read
     --> src/xpath.rs:14853:13
      |
14853 |     let mut hasAxisRange: libc::c_int = 0;
      |             ^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `pos` is never read
     --> src/xpath.rs:14854:13
      |
14854 |     let mut pos: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `breakOnFirstHit` is never read
     --> src/xpath.rs:14855:13
      |
14855 |     let mut breakOnFirstHit: libc::c_int = 0;
      |             ^^^^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `addNode` is never read
     --> src/xpath.rs:14857:13
      |
14857 |     let mut addNode:
      |             ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `mergeAndClear` is never read
     --> src/xpath.rs:14860:13
      |
14860 |     let mut mergeAndClear: xmlXPathNodeSetMergeFunction = None;
      |             ^^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldContextNode` is never read
     --> src/xpath.rs:14861:13
      |
14861 |     let mut oldContextNode: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:16900:13
      |
16900 |     let mut cur: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `comp` is never read
     --> src/xpath.rs:16901:13
      |
16901 |     let mut comp: xmlXPathCompExprPtr = 0 as *mut xmlXPathCompExpr;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `arg1` is never read
     --> src/xpath.rs:16902:13
      |
16902 |     let mut arg1: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `arg2` is never read
     --> src/xpath.rs:16903:13
      |
16903 |     let mut arg2: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cur` is never read
     --> src/xpath.rs:17098:13
      |
17098 |     let mut cur: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `comp` is never read
     --> src/xpath.rs:17099:13
      |
17099 |     let mut comp: xmlXPathCompExprPtr = 0 as *mut xmlXPathCompExpr;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `arg1` is never read
     --> src/xpath.rs:17100:13
      |
17100 |     let mut arg1: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `arg2` is never read
     --> src/xpath.rs:17101:13
      |
17101 |     let mut arg2: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `equal` is never read
     --> src/xpath.rs:17390:13
      |
17390 |     let mut equal: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:17391:13
      |
17391 |     let mut ret: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `comp` is never read
     --> src/xpath.rs:17392:13
      |
17392 |     let mut comp: xmlXPathCompExprPtr = 0 as *mut xmlXPathCompExpr;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `arg1` is never read
     --> src/xpath.rs:17393:13
      |
17393 |     let mut arg1: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `arg2` is never read
     --> src/xpath.rs:17394:13
      |
17394 |     let mut arg2: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `val` is never read
     --> src/xpath.rs:17664:21
      |
17664 |             let mut val: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `URI` is never read
     --> src/xpath.rs:17682:25
      |
17682 |                 let mut URI: *const xmlChar = 0 as *const xmlChar;
      |                         ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldFunc` is never read
     --> src/xpath.rs:17717:21
      |
17717 |             let mut oldFunc: *const xmlChar = 0 as *const xmlChar;
      |                     ^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldFuncURI` is never read
     --> src/xpath.rs:17718:21
      |
17718 |             let mut oldFuncURI: *const xmlChar = 0 as *const xmlChar;
      |                     ^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/xpath.rs:17719:21
      |
17719 |             let mut i: libc::c_int = 0;
      |                     ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `frame` is never read
     --> src/xpath.rs:17720:21
      |
17720 |             let mut frame: libc::c_int = 0;
      |                     ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `set` is never read
     --> src/xpath.rs:17885:21
      |
17885 |             let mut set: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `val_0` is never read
     --> src/xpath.rs:17901:25
      |
17901 |                 let mut val_0: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |                         ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `range` is never read
     --> src/xpath.rs:18094:21
      |
18094 |             let mut range: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |                     ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:18095:21
      |
18095 |             let mut res: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:18097:21
      |
18097 |             let mut tmp: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldlocset` is never read
     --> src/xpath.rs:18099:21
      |
18099 |             let mut oldlocset: xmlLocationSetPtr = 0 as *mut xmlLocationSet;
      |                     ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `oldset` is never read
     --> src/xpath.rs:18100:21
      |
18100 |             let mut oldset: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
      |                     ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i_0` is never read
     --> src/xpath.rs:18104:21
      |
18104 |             let mut i_0: libc::c_int = 0;
      |                     ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
     --> src/xpath.rs:18105:21
      |
18105 |             let mut j: libc::c_int = 0;
      |                     ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `resObj` is never read
     --> src/xpath.rs:18358:13
      |
18358 |     let mut resObj: xmlXPathObjectPtr = 0 as xmlXPathObjectPtr;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:18421:17
      |
18421 |         let mut res: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `max_depth` is never read
     --> src/xpath.rs:18454:13
      |
18454 |     let mut max_depth: libc::c_int = 0;
      |             ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `min_depth` is never read
     --> src/xpath.rs:18455:13
      |
18455 |     let mut min_depth: libc::c_int = 0;
      |             ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `from_root` is never read
     --> src/xpath.rs:18456:13
      |
18456 |     let mut from_root: libc::c_int = 0;
      |             ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:18457:13
      |
18457 |     let mut ret: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `depth` is never read
     --> src/xpath.rs:18458:13
      |
18458 |     let mut depth: libc::c_int = 0;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `eval_all_nodes` is never read
     --> src/xpath.rs:18459:13
      |
18459 |     let mut eval_all_nodes: libc::c_int = 0;
      |             ^^^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `patstream` is never read
     --> src/xpath.rs:18462:13
      |
18462 |     let mut patstream: xmlStreamCtxtPtr = 0 as xmlStreamCtxtPtr;
      |             ^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: variable `nb_nodes` is assigned to, but never used
     --> src/xpath.rs:18463:13
      |
18463 |     let mut nb_nodes: libc::c_int = 0 as libc::c_int;
      |             ^^^^^^^^
      |
      = note: consider using `_nb_nodes` instead

warning: value assigned to `ret` is never read
     --> src/xpath.rs:18601:45
      |
18601 | ...                   ret = xmlStreamPop(patstream)
      |                       ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:18631:45
      |
18631 | ...                   ret = xmlStreamPop(patstream)
      |                       ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ret` is never read
     --> src/xpath.rs:18716:29
      |
18716 | ...                   ret = xmlStreamPop(patstream);
      |                       ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `comp` is never read
     --> src/xpath.rs:18754:13
      |
18754 |     let mut comp: xmlXPathCompExprPtr = 0 as *mut xmlXPathCompExpr;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:18779:17
      |
18779 |         let mut res: libc::c_int = 0;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `stream` is never read
     --> src/xpath.rs:18983:13
      |
18983 |     let mut stream: xmlPatternPtr = 0 as *mut xmlPattern;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `comp` is never read
     --> src/xpath.rs:18984:13
      |
18984 |     let mut comp: xmlXPathCompExprPtr = 0 as *mut xmlXPathCompExpr;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ns` is never read
     --> src/xpath.rs:18987:13
      |
18987 |     let mut ns: xmlNsPtr = 0 as *mut xmlNs;
      |             ^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `i` is never read
     --> src/xpath.rs:18988:13
      |
18988 |     let mut i: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `j` is never read
     --> src/xpath.rs:18989:13
      |
18989 |     let mut j: libc::c_int = 0;
      |             ^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `tmp` is never read
     --> src/xpath.rs:18993:17
      |
18993 |         let mut tmp: *const xmlChar = 0 as *const xmlChar;
      |                 ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/xpath.rs:19089:13
      |
19089 |     let mut ctxt: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `pctxt` is never read
     --> src/xpath.rs:19176:13
      |
19176 |     let mut pctxt: xmlXPathParserContextPtr = 0 as *mut xmlXPathParserContext;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `comp` is never read
     --> src/xpath.rs:19177:13
      |
19177 |     let mut comp: xmlXPathCompExprPtr = 0 as *mut xmlXPathCompExpr;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `pctxt` is never read
     --> src/xpath.rs:19267:13
      |
19267 |     let mut pctxt: xmlXPathParserContextPtr = 0 as *mut xmlXPathParserContext;
      |             ^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `resObj` is never read
     --> src/xpath.rs:19268:13
      |
19268 |     let mut resObj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:19269:13
      |
19269 |     let mut res: libc::c_int = 0;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `comp` is never read
     --> src/xpath.rs:19370:9
      |
19370 |         comp = 0 as *mut xmlXPathCompExpr;
      |         ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `ctxt` is never read
     --> src/xpath.rs:19443:13
      |
19443 |     let mut ctxt: xmlXPathParserContextPtr = 0 as *mut xmlXPathParserContext;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `res` is never read
     --> src/xpath.rs:19444:13
      |
19444 |     let mut res: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `str` is never read
     --> src/xpath.rs:19602:13
      |
19602 |     let mut str: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `escape_reserved` is never read
     --> src/xpath.rs:19603:13
      |
19603 |     let mut escape_reserved: libc::c_int = 0;
      |             ^^^^^^^^^^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `target` is never read
     --> src/xpath.rs:19604:13
      |
19604 |     let mut target: xmlBufPtr = 0 as *mut xmlBuf;
      |             ^^^^^^
      |
      = help: maybe it is overwritten before being read?

warning: value assigned to `cptr` is never read
     --> src/xpath.rs:19605:13
      |
19605 |     let mut cptr: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^
      |
      = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
 --> src/parserInternals.rs:1:31
  |
1 | pub unsafe fn xmlCheckVersion(mut version: libc::c_int) {
  |                               ----^^^^^^^
  |                               |
  |                               help: remove this `mut`
  |
  = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
 --> src/parserInternals.rs:2:9
  |
2 |     let mut myversion: libc::c_int = 20912 as libc::c_int;
  |         ----^^^^^^^^^
  |         |
  |         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals.rs:58:39
   |
58 | ...                   mut extra: *const libc::c_char) {
   |                       ----^^^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:104:43
    |
104 | ...                   mut xmlerr: xmlParserErrors,
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:105:43
    |
105 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:106:43
    |
106 | ...                   mut str1: *const xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:107:43
    |
107 | ...                   mut str2: *const xmlChar) {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:136:37
    |
136 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:137:37
    |
137 | ...                   mut str: *const xmlChar) {
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:170:40
    |
170 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:171:40
    |
171 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:172:40
    |
172 | ...                   mut val: libc::c_int) {
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:205:27
    |
205 | pub unsafe fn xmlIsLetter(mut c: libc::c_int) -> libc::c_int {
    |                           ----^
    |                           |
    |                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:225:28
    |
225 | pub unsafe fn check_buffer(mut in_0: xmlParserInputPtr) {
    |                            ----^^^^
    |                            |
    |                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:285:34
    |
285 | pub unsafe fn xmlParserInputRead(mut in_0: xmlParserInputPtr,
    |                                  ----^^^^
    |                                  |
    |                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:286:45
    |
286 | ...                   mut len: libc::c_int)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:303:45
    |
303 | ...                   mut len: libc::c_int)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:710:41
    |
710 | ...                   mut len: *mut libc::c_int)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:712:9
    |
712 |     let mut current_block: u64;
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:974:36
    |
974 | pub unsafe fn xmlStringCurrentChar(mut ctxt: xmlParserCtxtPtr,
    |                                    ----^^^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:975:47
    |
975 | ...                   mut cur: *const xmlChar,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:976:47
    |
976 | ...                   mut len: *mut libc::c_int)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals.rs:978:9
    |
978 |     let mut current_block: u64;
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1162:47
     |
1162 | ...                   mut val: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1175:13
     |
1175 |         let mut savedout: *mut xmlChar = out;
     |             ----^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1226:43
     |
1226 | pub unsafe fn xmlCopyChar_parserInternals(mut len: libc::c_int,
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1227:38
     |
1227 | ...                   mut out: *mut xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1228:38
     |
1228 | ...                   mut val: libc::c_int) -> libc::c_int {
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1247:44
     |
1247 | ...                   mut enc: xmlCharEncoding)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1447:37
     |
1447 | unsafe fn xmlSwitchInputEncodingInt(mut ctxt: xmlParserCtxtPtr,
     |                                     ----^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1449:48
     |
1449 | ...                   mut handler:
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1451:48
     |
1451 | ...                   mut len: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1612:38
     |
1612 | pub unsafe fn xmlSwitchInputEncoding(mut ctxt: xmlParserCtxtPtr,
     |                                      ----^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1613:49
     |
1613 | ...                   mut input: xmlParserInputPtr,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1614:49
     |
1614 | ...                   mut handler:
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1639:45
     |
1639 | ...                   mut handler:
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1641:45
     |
1641 | ...                   mut len: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1672:51
     |
1672 | pub unsafe fn xmlSwitchToEncoding_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |                                                   ----^^^^
     |                                                   |
     |                                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1673:46
     |
1673 | ...                   mut handler:
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1690:50
     |
1690 | pub unsafe fn xmlFreeInputStream_parserInternals(mut input: xmlParserInputPtr) {
     |                                                  ----^^^^^
     |                                                  |
     |                                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1770:51
     |
1770 | pub unsafe fn xmlNewIOInputStream_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |                                                   ----^^^^
     |                                                   |
     |                                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1771:46
     |
1771 | ...                   mut input:
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1773:46
     |
1773 | ...                   mut enc: xmlCharEncoding)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1805:39
     |
1805 | pub unsafe fn xmlNewEntityInputStream(mut ctxt: xmlParserCtxtPtr,
     |                                       ----^^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1889:55
     |
1889 | pub unsafe fn xmlNewStringInputStream_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |                                                       ----^^^^
     |                                                       |
     |                                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1890:50
     |
1890 | ...                   mut buffer: *const xmlChar)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:1934:46
     |
1934 | ...                   mut filename:
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2239:49
     |
2239 | pub unsafe fn xmlFreeParserCtxt_parserInternals(mut ctxt: xmlParserCtxtPtr) {
     |                                                 ----^^^^
     |                                                 |
     |                                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2439:34
     |
2439 | pub unsafe fn xmlClearParserCtxt(mut ctxt: xmlParserCtxtPtr) {
     |                                  ----^^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2492:35
     |
2492 | pub unsafe fn xmlClearNodeInfoSeq(mut seq:
     |                                   ----^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2683:40
     |
2683 | pub unsafe fn xmlPedanticParserDefault(mut val: libc::c_int)
     |                                        ----^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2685:9
     |
2685 |     let mut old: libc::c_int = *__xmlPedanticParserDefaultValue();
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2699:37
     |
2699 | pub unsafe fn xmlLineNumbersDefault(mut val: libc::c_int)
     |                                     ----^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2701:9
     |
2701 |     let mut old: libc::c_int = *__xmlLineNumbersDefaultValue();
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2719:44
     |
2719 | pub unsafe fn xmlSubstituteEntitiesDefault(mut val: libc::c_int)
     |                                            ----^^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2721:9
     |
2721 |     let mut old: libc::c_int = *__xmlSubstituteEntitiesDefaultValue();
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2756:36
     |
2756 | pub unsafe fn xmlKeepBlanksDefault(mut val: libc::c_int)
     |                                    ----^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parserInternals.rs:2758:9
     |
2758 |     let mut old: libc::c_int = *__xmlKeepBlanksDefaultValue();
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
 --> src/parserInternals_rust.rs:3:40
  |
3 | pub extern "C" fn xmlCheckVersion_rust(mut version: libc::c_int) {
  |                                        ----^^^^^^^
  |                                        |
  |                                        help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:10:37
   |
10 | pub extern "C" fn xmlErrMemory_rust(mut ctxt: xmlParserCtxtPtr,mut extra: *const libc::c_char){
   |                                     ----^^^^
   |                                     |
   |                                     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:10:64
   |
10 | pub extern "C" fn xmlErrMemory_rust(mut ctxt: xmlParserCtxtPtr,mut extra: *const libc::c_char){
   |                                                                ----^^^^^
   |                                                                |
   |                                                                help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:17:41
   |
17 | pub extern "C" fn __xmlErrEncoding_rust(mut ctxt: xmlParserCtxtPtr,
   |                                         ----^^^^
   |                                         |
   |                                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:18:43
   |
18 | ...                   mut xmlerr: xmlParserErrors,
   |                       ----^^^^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:19:43
   |
19 | ...                   mut msg: *const libc::c_char,
   |                       ----^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:20:43
   |
20 | ...                   mut str1: *const xmlChar,
   |                       ----^^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:21:43
   |
21 | ...                   mut str2: *const xmlChar){
   |                       ----^^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:28:42
   |
28 | pub extern "C" fn xmlErrEncodingInt_rust(mut ctxt: xmlParserCtxtPtr,
   |                                          ----^^^^
   |                                          |
   |                                          help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:29:40
   |
29 | ...                   mut error: xmlParserErrors,
   |                       ----^^^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:30:40
   |
30 | ...                   mut msg: *const libc::c_char,
   |                       ----^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:31:40
   |
31 | ...                   mut val: libc::c_int) {
   |                       ----^^^
   |                       |
   |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:38:36
   |
38 | pub extern "C" fn xmlIsLetter_rust(mut c: libc::c_int) -> libc::c_int{
   |                                    ----^
   |                                    |
   |                                    help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:46:44
   |
46 | pub extern "C" fn xmlParserInputGrow_rust (mut in_0: xmlParserInputPtr, mut l: libc::c_int) -> libc::c_int {
   |                                            ----^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:46:73
   |
46 | pub extern "C" fn xmlParserInputGrow_rust (mut in_0: xmlParserInputPtr, mut l: libc::c_int) -> libc::c_int {
   |                                                                         ----^
   |                                                                         |
   |                                                                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:54:45
   |
54 | pub extern "C" fn xmlParserInputShrink_rust(mut in_0: xmlParserInputPtr) {
   |                                             ----^^^^
   |                                             |
   |                                             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:61:36
   |
61 | pub extern "C" fn xmlNextChar_rust(mut ctxt: xmlParserCtxtPtr) {
   |                                    ----^^^^
   |                                    |
   |                                    help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:68:39
   |
68 | pub extern "C" fn xmlCurrentChar_rust(mut ctxt: xmlParserCtxtPtr,
   |                                       ----^^^^
   |                                       |
   |                                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:69:5
   |
69 |     mut len: *mut libc::c_int)-> libc::c_int {
   |     ----^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:77:45
   |
77 | pub extern "C" fn xmlStringCurrentChar_rust(mut ctxt: xmlParserCtxtPtr,
   |                                             ----^^^^
   |                                             |
   |                                             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:78:5
   |
78 |     mut cur: *const xmlChar,
   |     ----^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:79:5
   |
79 |     mut len: *mut libc::c_int)-> libc::c_int{
   |     ----^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:87:45
   |
87 | pub extern "C" fn xmlCopyCharMultiByte_rust(mut out: *mut xmlChar,
   |                                             ----^^^
   |                                             |
   |                                             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:88:5
   |
88 |     mut val: libc::c_int)
   |     ----^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:97:36
   |
97 | pub extern "C" fn xmlCopyChar_rust(mut len: libc::c_int,
   |                                    ----^^^
   |                                    |
   |                                    help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:98:5
   |
98 |     mut out: *mut xmlChar,
   |     ----^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parserInternals_rust.rs:99:5
   |
99 |     mut val: libc::c_int) -> libc::c_int{
   |     ----^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:107:42
    |
107 | pub extern "C" fn xmlSwitchEncoding_rust(mut ctxt: xmlParserCtxtPtr,
    |                                          ----^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:108:5
    |
108 |     mut enc: xmlCharEncoding)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:117:50
    |
117 | pub extern "C" fn xmlSwitchInputEncodingInt_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:118:5
    |
118 |     mut input: xmlParserInputPtr,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:119:5
    |
119 |     mut handler:
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:121:5
    |
121 |     mut len: libc::c_int)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:130:47
    |
130 | pub extern "C" fn xmlSwitchInputEncoding_rust(mut ctxt: xmlParserCtxtPtr,
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:131:5
    |
131 |     mut input: xmlParserInputPtr,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:132:5
    |
132 |     mut handler:
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:142:47
    |
142 | pub extern "C" fn xmlSwitchToEncodingInt_rust(mut ctxt: xmlParserCtxtPtr,
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:143:5
    |
143 |     mut handler:
    |     ----^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:145:5
    |
145 |     mut len: libc::c_int)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:154:44
    |
154 | pub extern "C" fn xmlSwitchToEncoding_rust(mut ctxt: xmlParserCtxtPtr,
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:155:47
    |
155 | ...                   mut handler:
    |                       ----^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:165:43
    |
165 | pub extern "C" fn xmlFreeInputStream_rust(mut input: xmlParserInputPtr){
    |                                           ----^^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:172:42
    |
172 | pub extern "C" fn xmlNewInputStream_rust(mut ctxt: xmlParserCtxtPtr)
    |                                          ----^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:181:45
    |
181 |  pub extern "C" fn xmlNewIOInputStream_rust(mut ctxt: xmlParserCtxtPtr,
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:182:5
    |
182 |     mut input:xmlParserInputBufferPtr,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:183:5
    |
183 |     mut enc: xmlCharEncoding)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:192:48
    |
192 | pub extern "C" fn xmlNewEntityInputStream_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:193:5
    |
193 |     mut entity: xmlEntityPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:202:48
    |
202 | pub extern "C" fn xmlNewStringInputStream_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:203:5
    |
203 |     mut buffer: *const xmlChar)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:212:44
    |
212 | pub extern "C" fn xmlNewInputFromFile_rust(mut ctxt: xmlParserCtxtPtr,
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:213:5
    |
213 |     mut filename:
    |     ----^^^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:223:42
    |
223 | pub extern "C" fn xmlInitParserCtxt_rust(mut ctxt: xmlParserCtxtPtr)
    |                                          ----^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:232:43
    |
232 |  pub extern "C" fn xmlFreeParserCtxt_rust(mut ctxt: xmlParserCtxtPtr){
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:247:44
    |
247 |  pub extern "C" fn xmlClearParserCtxt_rust(mut ctxt: xmlParserCtxtPtr){
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:264:43
    |
264 | pub extern "C" fn xmlInitNodeInfoSeq_rust(mut seq:
    |                                           ----^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:272:40
    |
272 | pub unsafe fn xmlClearNodeInfoSeq_rust(mut seq:xmlParserNodeInfoSeqPtr){
    |                                        ----^^^
    |                                        |
    |                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:290:41
    |
290 | pub unsafe fn xmlParserAddNodeInfo_rust(mut ctxt: xmlParserCtxtPtr,
    |                                         ----^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:297:45
    |
297 | pub unsafe fn xmlPedanticParserDefault_rust(mut val: libc::c_int)
    |                                             ----^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:306:42
    |
306 | pub unsafe fn xmlLineNumbersDefault_rust(mut val: libc::c_int)
    |                                          ----^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:315:50
    |
315 |  pub unsafe fn xmlSubstituteEntitiesDefault_rust(mut val: libc::c_int)
    |                                                  ----^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parserInternals_rust.rs:324:42
    |
324 |  pub unsafe fn xmlKeepBlanksDefault_rust(mut val: libc::c_int)
    |                                          ----^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
 --> src/parser.rs:4:43
  |
4 | ...                   mut replacement: size_t)
  |                       ----^^^^^^^^^^^
  |                       |
  |                       help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser.rs:24:13
   |
24 |         let mut oldnbent: libc::c_ulong = (*ctxt).nbentities;
   |             ----^^^^^^^^
   |             |
   |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:209:41
    |
209 | ...                   mut prefix: *const xmlChar,
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:210:41
    |
210 | ...                   mut localname: *const xmlChar) {
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:258:34
    |
258 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:259:34
    |
259 | ...                   mut info: *const libc::c_char) {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:587:37
    |
587 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:588:37
    |
588 | ...                   mut msg: *const libc::c_char) {
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:619:25
    |
619 | unsafe fn xmlWarningMsg(mut ctxt: xmlParserCtxtPtr,
    |                         ----^^^^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:620:36
    |
620 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:621:36
    |
621 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:622:36
    |
622 | ...                   mut str1: *const xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:623:36
    |
623 | ...                   mut str2: *const xmlChar) {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:668:39
    |
668 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:669:39
    |
669 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:670:39
    |
670 | ...                   mut str1: *const xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:671:39
    |
671 | ...                   mut str2: *const xmlChar) {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:717:40
    |
717 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:718:40
    |
718 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:719:40
    |
719 | ...                   mut val: libc::c_int) {
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:751:46
    |
751 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:752:46
    |
752 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:753:46
    |
753 | ...                   mut str1: *const xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:754:46
    |
754 | ...                   mut val: libc::c_int,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:755:46
    |
755 | ...                   mut str2: *const xmlChar) {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:785:40
    |
785 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:786:40
    |
786 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:787:40
    |
787 | ...                   mut val: *const xmlChar) {
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:817:35
    |
817 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:818:35
    |
818 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:819:35
    |
819 | ...                   mut val: *const xmlChar) {
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:844:31
    |
844 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:845:31
    |
845 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:846:31
    |
846 | ...                   mut info1: *const xmlChar,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:847:31
    |
847 | ...                   mut info2: *const xmlChar,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:848:31
    |
848 | ...                   mut info3: *const xmlChar) {
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:874:21
    |
874 | unsafe fn xmlNsWarn(mut ctxt: xmlParserCtxtPtr,
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:875:32
    |
875 | ...                   mut error: xmlParserErrors,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:876:32
    |
876 | ...                   mut msg: *const libc::c_char,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:877:32
    |
877 | ...                   mut info1: *const xmlChar,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:878:32
    |
878 | ...                   mut info2: *const xmlChar,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:879:32
    |
879 | ...                   mut info3: *const xmlChar) {
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser.rs:909:29
    |
909 | pub unsafe fn xmlHasFeature(mut feature: xmlFeature)
    |                             ----^^^^^^^
    |                             |
    |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1055:34
     |
1055 | unsafe fn xmlAttrNormalizeSpace2(mut ctxt: xmlParserCtxtPtr,
     |                                  ----^^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1056:45
     |
1056 | ...                   mut src: *mut xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1057:45
     |
1057 | ...                   mut len: *mut libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1117:37
     |
1117 | ...                   mut fullname: *const xmlChar,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1118:37
     |
1118 | ...                   mut fullattr: *const xmlChar,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1334:40
     |
1334 | ...                   mut fullname: *const xmlChar,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1335:40
     |
1335 | ...                   mut fullattr: *const xmlChar,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1336:40
     |
1336 | ...                   mut type_0: libc::c_int) {
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1356:50
     |
1356 | unsafe extern "C" fn xmlCleanSpecialAttrCallback(mut payload:
     |                                                  ----^^^^^^^
     |                                                  |
     |                                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1358:50
     |
1358 | ...                   mut data: *mut libc::c_void,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1359:50
     |
1359 | ...                   mut fullname: *const xmlChar,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1360:50
     |
1360 | ...                   mut fullattr: *const xmlChar,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1361:50
     |
1361 | ...                   mut unused: *const xmlChar) {
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1362:9
     |
1362 |     let mut ctxt: xmlParserCtxtPtr = data as xmlParserCtxtPtr;
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1450:34
     |
1450 | pub unsafe fn xmlCheckLanguageID(mut lang: *const xmlChar)
     |                                  ----^^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1729:29
     |
1729 | ...                   mut prefix: *const xmlChar,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1730:29
     |
1730 | ...                   mut URL: *const xmlChar) -> libc::c_int {
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1824:39
     |
1824 | ...                   mut nr: libc::c_int) -> libc::c_int {
     |                       ----^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1825:9
     |
1825 |     let mut current_block: u64;
     |         ----^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:1977:35
     |
1977 | ...                   mut value: xmlNodePtr) -> libc::c_int {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2054:33
     |
2054 | ...                   mut value: *const xmlChar,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2055:33
     |
2055 | ...                   mut prefix: *const xmlChar,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2056:33
     |
2056 | ...                   mut URI: *const xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2057:33
     |
2057 | ...                   mut line: libc::c_int, mut nsNr: libc::c_int)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2057:56
     |
2057 | ...                   mut line: libc::c_int, mut nsNr: libc::c_int)
     |                                              ----^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2059:9
     |
2059 |     let mut current_block: u64;
     |         ----^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2169:35
     |
2169 | ...                   mut value: *const xmlChar) -> libc::c_int {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2225:32
     |
2225 | ...                   mut val: libc::c_int) -> libc::c_int {
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2270:21
     |
2270 | unsafe fn xmlSHRINK(mut ctxt: xmlParserCtxtPtr) {
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2276:19
     |
2276 | unsafe fn xmlGROW(mut ctxt: xmlParserCtxtPtr) {
     |                   ----^^^^
     |                   |
     |                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2277:9
     |
2277 |     let mut curEnd: ptrdiff_t =
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2280:9
     |
2280 |     let mut curBase: ptrdiff_t =
     |         ----^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2355:13
     |
2355 |         let mut expandPE: libc::c_int =
     |             ----^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2426:34
     |
2426 | pub unsafe fn xmlPopInput_parser(mut ctxt: xmlParserCtxtPtr) -> xmlChar {
     |                                  ----^^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2462:28
     |
2462 | pub unsafe fn xmlPushInput(mut ctxt: xmlParserCtxtPtr,
     |                            ----^^^^
     |                            |
     |                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2463:39
     |
2463 | ...                   mut input: xmlParserInputPtr)
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2703:33
     |
2703 | unsafe fn xmlParseStringCharRef(mut ctxt: xmlParserCtxtPtr,
     |                                 ----^^^^
     |                                 |
     |                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2704:44
     |
2704 | ...                   mut str: *mut *const xmlChar)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2839:42
     |
2839 | pub unsafe fn xmlParserHandlePEReference(mut ctxt:
     |                                          ----^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2933:53
     |
2933 | ...                   mut len: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2934:53
     |
2934 | ...                   mut what: libc::c_int,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2935:53
     |
2935 | ...                   mut end: xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2936:53
     |
2936 | ...                   mut end2: xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2937:53
     |
2937 | ...                   mut end3: xmlChar)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2939:9
     |
2939 |     let mut current_block: u64;
     |         ----^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:2993:21
     |
2993 |                 let mut val: libc::c_int =
     |                     ----^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3017:25
     |
3017 |                     let mut new_size: size_t =
     |                         ----^^^^^^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3095:33
     |
3095 | ...                   let mut new_size_0: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3169:33
     |
3169 | ...                   let mut new_size_1: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3213:29
     |
3213 |                         let mut new_size_2: size_t =
     |                             ----^^^^^^^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3341:33
     |
3341 | ...                   let mut new_size_3: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3391:25
     |
3391 |                     let mut new_size_4: size_t =
     |                         ----^^^^^^^^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3464:39
     |
3464 | pub unsafe fn xmlStringDecodeEntities(mut ctxt: xmlParserCtxtPtr,
     |                                       ----^^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3465:50
     |
3465 | ...                   mut str: *const xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3466:50
     |
3466 | ...                   mut what: libc::c_int,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3467:50
     |
3467 | ...                   mut end: xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3468:50
     |
3468 | ...                   mut end2: xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3469:50
     |
3469 | ...                   mut end3: xmlChar)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3491:21
     |
3491 | unsafe fn areBlanks(mut ctxt: xmlParserCtxtPtr,
     |                     ----^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3492:32
     |
3492 | ...                   mut str: *const xmlChar, mut len: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3492:57
     |
3492 | ...                   mut str: *const xmlChar, mut len: libc::c_int,
     |                                                ----^^^
     |                                                |
     |                                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3493:32
     |
3493 | ...                   mut blank_chars: libc::c_int) -> libc::c_int {
     |                       ----^^^^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3593:29
     |
3593 | pub unsafe fn xmlSplitQName(mut ctxt: xmlParserCtxtPtr,
     |                             ----^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3594:40
     |
3594 | ...                   mut name: *const xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3595:40
     |
3595 | ...                   mut prefix: *mut *mut xmlChar)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3720:17
     |
3720 |             let mut first: libc::c_int =
     |                 ----^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3853:30
     |
3853 | unsafe fn xmlIsNameStartChar(mut ctxt: xmlParserCtxtPtr,
     |                              ----^^^^
     |                              |
     |                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3854:41
     |
3854 | ...                   mut c: libc::c_int) -> libc::c_int {
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3909:25
     |
3909 | unsafe fn xmlIsNameChar(mut ctxt: xmlParserCtxtPtr,
     |                         ----^^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:3910:36
     |
3910 | ...                   mut c: libc::c_int) -> libc::c_int {
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:4504:45
     |
4504 | ...                   mut other: *const xmlChar)
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:4560:30
     |
4560 | unsafe fn xmlParseStringName(mut ctxt: xmlParserCtxtPtr,
     |                              ----^^^^
     |                              |
     |                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:4561:41
     |
4561 | ...                   mut str: *mut *const xmlChar)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:4875:46
     |
4875 | ...                   mut orig: *mut *mut xmlChar)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5023:37
     |
5023 | ...                   let mut tmp_0: xmlChar = *cur;
     |                           ----^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5114:46
     |
5114 | ...                   mut attlen: *mut libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5115:46
     |
5115 | ...                   mut normalize: libc::c_int)
     |                       ----^^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5198:29
     |
5198 |                         let mut val: libc::c_int = xmlParseCharRef(ctxt);
     |                             ----^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5206:41
     |
5206 | ...                   let mut new_size: size_t =
     |                           ----^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5248:41
     |
5248 | ...                   let mut new_size_0: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5303:37
     |
5303 | ...                   let mut new_size_1: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5360:37
     |
5360 | ...                   let mut new_size_2: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5478:45
     |
5478 | ...                   let mut new_size_3: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5517:41
     |
5517 | ...                   let mut new_size_4: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5568:37
     |
5568 | ...                   let mut oldnbent: libc::c_ulong =
     |                           ----^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5642:37
     |
5642 | ...                   let mut new_size_5: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5714:41
     |
5714 | ...                   let mut new_size_6: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5767:33
     |
5767 | ...                   let mut new_size_7: size_t =
     |                           ----^^^^^^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5925:32
     |
5925 | pub unsafe fn xmlParseAttValue(mut ctxt: xmlParserCtxtPtr)
     |                                ----^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:5950:9
     |
5950 |     let mut state: libc::c_int = (*ctxt).instate as libc::c_int;
     |         ----^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:6125:9
     |
6125 |     let mut oldstate: xmlParserInputState = (*ctxt).instate;
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:6445:43
     |
6445 | ...                   mut cdata: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:6492:29
     |
6492 |                         let mut tmp: *const xmlChar = (*(*ctxt).input).cur;
     |                             ----^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:6571:29
     |
6571 |                         let mut tmp_0: *const xmlChar = (*(*ctxt).input).cur;
     |                             ----^^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:6675:46
     |
6675 | ...                   mut cdata: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:6868:45
     |
6868 | ...                   mut publicID: *mut *mut xmlChar,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:6869:45
     |
6869 | ...                   mut strict: libc::c_int)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:7566:32
     |
7566 | pub unsafe fn xmlParsePITarget(mut ctxt: xmlParserCtxtPtr)
     |                                ----^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:7642:40
     |
7642 | ...                   mut catalog: *const xmlChar) {
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:7735:13
     |
7735 |         let mut inputid: libc::c_int = (*(*ctxt).input).id;
     |             ----^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:7829:25
     |
7829 |                     let mut new_size: size_t =
     |                         ----^^^^^^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:7966:33
     |
7966 | ...                   let mut allow: xmlCatalogAllow = xmlCatalogGetDefaults();
     |                           ----^^^^^
     |                           |
     |                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:8051:13
     |
8051 |         let mut inputid: libc::c_int = (*(*ctxt).input).id;
     |             ----^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:8179:13
     |
8179 |         let mut inputid: libc::c_int = (*(*ctxt).input).id;
     |             ----^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:8570:46
     |
8570 | ...                   mut value: *mut *mut xmlChar)
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:8700:36
     |
8700 | pub unsafe fn xmlParseNotationType(mut ctxt: xmlParserCtxtPtr)
     |                                    ----^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:8786:39
     |
8786 | pub unsafe fn xmlParseEnumerationType(mut ctxt: xmlParserCtxtPtr)
     |                                       ----^^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:8872:49
     |
8872 | ...                   mut tree:
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:8966:48
     |
8966 | ...                   mut tree:
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:9317:13
     |
9317 |         let mut inputid: libc::c_int = (*(*ctxt).input).id;
     |             ----^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:9504:58
     |
9504 | ...                   mut inputchk:
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:9692:50
     |
9692 | unsafe fn xmlParseElementChildrenContentDeclPriv(mut ctxt:
     |                                                  ----^^^^
     |                                                  |
     |                                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:9694:61
     |
9694 | ...                   mut inputchk:
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:9696:61
     |
9696 | ...                   mut depth:
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:9720:13
     |
9720 |         let mut inputid: libc::c_int = (*(*ctxt).input).id;
     |             ----^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser.rs:9894:17
     |
9894 |             let mut inputid_0: libc::c_int = (*(*ctxt).input).id;
     |                 ----^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10085:50
      |
10085 | pub unsafe fn xmlParseElementChildrenContentDecl(mut ctxt:
      |                                                  ----^^^^
      |                                                  |
      |                                                  help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10087:61
      |
10087 | ...                   mut inputchk:
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10108:42
      |
10108 | pub unsafe fn xmlParseElementContentDecl(mut ctxt:
      |                                          ----^^^^
      |                                          |
      |                                          help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10110:53
      |
10110 | ...                   mut name: *const xmlChar,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10111:53
      |
10111 | ...                   mut result:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10115:9
      |
10115 |     let mut inputid: libc::c_int = (*(*ctxt).input).id;
      |         ----^^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10214:13
      |
10214 |         let mut inputid: libc::c_int = (*(*ctxt).input).id;
      |             ----^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10358:17
      |
10358 |             let mut id: libc::c_int = (*(*ctxt).input).id;
      |                 ----^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10619:17
      |
10619 |             let mut check: *const xmlChar = (*(*ctxt).input).cur;
      |                 ----^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10620:17
      |
10620 |             let mut cons: libc::c_uint =
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10834:49
      |
10834 | ...                   mut ExternalID:
      |                       ----^^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10836:49
      |
10836 | ...                   mut SystemID:
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10911:13
      |
10911 |         let mut check: *const xmlChar = (*(*ctxt).input).cur;
      |             ----^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10912:13
      |
10912 |         let mut cons: libc::c_uint =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10966:13
      |
10966 |         let mut hex: libc::c_int =
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:10969:13
      |
10969 |         let mut value: libc::c_int = xmlParseCharRef(ctxt);
      |             ----^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:11077:13
      |
11077 |         let mut oldnbent: libc::c_ulong = (*ctxt).nbentities;
      |             ----^^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:11712:46
      |
11712 | ...                   mut str: *mut *const xmlChar)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12279:48
      |
12279 | ...                   mut str: *mut *const xmlChar)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12464:13
      |
12464 |         let mut baseInputNr: libc::c_int = (*ctxt).inputNr;
      |             ----^^^^^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12476:17
      |
12476 |             let mut check: *const xmlChar = (*(*ctxt).input).cur;
      |                 ----^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12477:17
      |
12477 |             let mut cons: libc::c_uint =
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12554:44
      |
12554 | ...                   mut value: *mut *mut xmlChar)
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12703:13
      |
12703 |         let mut q: *const xmlChar = (*(*ctxt).input).cur;
      |             ----^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12704:13
      |
12704 |         let mut cons: libc::c_uint =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12908:38
      |
12908 | ...                   mut line: libc::c_int) {
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:12993:30
      |
12993 | pub unsafe fn xmlParseEndTag(mut ctxt: xmlParserCtxtPtr) {
      |                              ----^^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13012:27
      |
13012 | unsafe fn xmlGetNamespace(mut ctxt: xmlParserCtxtPtr,
      |                           ----^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13013:38
      |
13013 | ...                   mut prefix: *const xmlChar)
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13044:25
      |
13044 | unsafe fn xmlParseQName(mut ctxt: xmlParserCtxtPtr,
      |                         ----^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13045:36
      |
13045 | ...                   mut prefix: *mut *const xmlChar)
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13161:46
      |
13161 | ...                   mut name: *const xmlChar,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13162:46
      |
13162 | ...                   mut prefix: *const xmlChar)
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13248:47
      |
13248 | ...                   mut len: *mut libc::c_int,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13249:47
      |
13249 | ...                   mut alloc: *mut libc::c_int,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13250:47
      |
13250 | ...                   mut normalize: libc::c_int)
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13252:9
      |
13252 |     let mut current_block: u64;
      |         ----^^^^^^^^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13288:13
      |
13288 |         let mut oldbase: *const xmlChar = (*(*ctxt).input).base;
      |             ----^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13298:17
      |
13298 |             let mut delta: ptrdiff_t =
      |                 ----^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13322:21
      |
13322 |                 let mut oldbase_0: *const xmlChar = (*(*ctxt).input).base;
      |                     ----^^^^^^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13334:25
      |
13334 |                     let mut delta_0: ptrdiff_t =
      |                         ----^^^^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13365:21
      |
13365 |                 let mut oldbase_1: *const xmlChar = (*(*ctxt).input).base;
      |                     ----^^^^^^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13377:25
      |
13377 |                     let mut delta_1: ptrdiff_t =
      |                         ----^^^^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13414:21
      |
13414 |                 let mut oldbase_2: *const xmlChar = (*(*ctxt).input).base;
      |                     ----^^^^^^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13426:25
      |
13426 |                     let mut delta_2: ptrdiff_t =
      |                         ----^^^^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13466:21
      |
13466 |                 let mut oldbase_3: *const xmlChar = (*(*ctxt).input).base;
      |                     ----^^^^^^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13478:25
      |
13478 |                     let mut delta_3: ptrdiff_t =
      |                         ----^^^^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13553:41
      |
13553 | ...                   mut pref: *const xmlChar,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13554:41
      |
13554 | ...                   mut elem: *const xmlChar,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13555:41
      |
13555 | ...                   mut prefix: *mut *const xmlChar,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13556:41
      |
13556 | ...                   mut value: *mut *mut xmlChar,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13557:41
      |
13557 | ...                   mut len: *mut libc::c_int,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13558:41
      |
13558 | ...                   mut alloc: *mut libc::c_int)
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13697:40
      |
13697 | ...                   mut pref: *mut *const xmlChar,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13698:40
      |
13698 | ...                   mut URI: *mut *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13699:40
      |
13699 | ...                   mut tlen: *mut libc::c_int)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13719:9
      |
13719 |     let mut nsNr: libc::c_int = (*ctxt).nsNr;
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13794:13
      |
13794 |         let mut q: *const xmlChar = (*(*ctxt).input).cur;
      |             ----^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13795:13
      |
13795 |         let mut cons: libc::c_uint =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13805:21
      |
13805 |                 let mut URL: *const xmlChar =
      |                     ----^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:13894:21
      |
13894 |                 let mut URL_0: *const xmlChar =
      |                     ----^^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:14107:29
      |
14107 |                         let mut offset: ptrdiff_t =
      |                             ----^^^^^^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:14560:38
      |
14560 | ...                   mut tag: *const xmlStartTag) {
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:14879:9
      |
14879 |     let mut nameNr: libc::c_int = (*ctxt).nameNr;
      |         ----^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:14888:13
      |
14888 |         let mut test: *const xmlChar = (*(*ctxt).input).cur;
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:14889:13
      |
14889 |         let mut cons: libc::c_uint =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:14891:13
      |
14891 |         let mut cur: *const xmlChar = (*(*ctxt).input).cur;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15006:31
      |
15006 | pub unsafe fn xmlParseContent(mut ctxt: xmlParserCtxtPtr) {
      |                               ----^^^^
      |                               |
      |                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15007:9
      |
15007 |     let mut nameNr: libc::c_int = (*ctxt).nameNr;
      |         ----^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15011:13
      |
15011 |         let mut name: *const xmlChar =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15014:13
      |
15014 |         let mut line: libc::c_int =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15037:31
      |
15037 | pub unsafe fn xmlParseElement(mut ctxt: xmlParserCtxtPtr) {
      |                               ----^^^^
      |                               |
      |                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15044:13
      |
15044 |         let mut name: *const xmlChar =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15047:13
      |
15047 |         let mut line: libc::c_int =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15079:9
      |
15079 |     let mut nsNr: libc::c_int = (*ctxt).nsNr;
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15230:30
      |
15230 | unsafe fn xmlParseElementEnd(mut ctxt: xmlParserCtxtPtr) {
      |                              ----^^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15237:9
      |
15237 |     let mut ret: xmlNodePtr = (*ctxt).node;
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15284:34
      |
15284 | pub unsafe fn xmlParseVersionNum(mut ctxt: xmlParserCtxtPtr)
      |                                  ----^^^^
      |                                  |
      |                                  help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:15433:31
      |
15433 | pub unsafe fn xmlParseEncName(mut ctxt: xmlParserCtxtPtr)
      |                               ----^^^^
      |                               |
      |                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16014:28
      |
16014 | pub unsafe fn xmlParseMisc(mut ctxt: xmlParserCtxtPtr) {
      |                            ----^^^^
      |                            |
      |                            help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16492:45
      |
16492 | ...                   mut first: xmlChar,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16493:45
      |
16493 | ...                   mut next: xmlChar,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16494:45
      |
16494 | ...                   mut third: xmlChar)
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16658:28
      |
16658 | unsafe fn xmlParseGetLasts(mut ctxt: xmlParserCtxtPtr,
      |                            ----^^^^
      |                            |
      |                            help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16659:39
      |
16659 | ...                   mut lastlt: *mut *const xmlChar,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16660:39
      |
16660 | ...                   mut lastgt: *mut *const xmlChar) {
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16731:29
      |
16731 | unsafe fn xmlCheckCdataPush(mut utf: *const xmlChar,
      |                             ----^^^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16732:40
      |
16732 | ...                   mut len: libc::c_int,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16733:40
      |
16733 | ...                   mut complete: libc::c_int)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:16884:42
      |
16884 | ...                   mut terminate: libc::c_int)
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:17072:21
      |
17072 |                 let mut base: size_t =
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:17075:21
      |
17075 |                 let mut current: size_t =
      |                     ----^^^^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:17328:21
      |
17328 |                 let mut line: libc::c_int = (*(*ctxt).input).line;
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:17329:21
      |
17329 |                 let mut nsNr: libc::c_int = (*ctxt).nsNr;
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:18874:35
      |
18874 | unsafe fn xmlParseCheckTransition(mut ctxt: xmlParserCtxtPtr,
      |                                   ----^^^^
      |                                   |
      |                                   help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:18875:46
      |
18875 | ...                   mut chunk: *const libc::c_char,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:18876:46
      |
18876 | ...                   mut size: libc::c_int)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:18942:40
      |
18942 | ...                   mut terminate: libc::c_int)
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:18970:17
      |
18970 |             let mut base: size_t =
      |                 ----^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:18973:17
      |
18973 |             let mut cur: size_t =
      |                 ----^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19055:21
      |
19055 |                 let mut in_0: xmlParserInputBufferPtr = (*(*ctxt).input).buf;
      |                     ----^^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19059:25
      |
19059 |                     let mut base_0: size_t =
      |                         ----^^^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19061:25
      |
19061 |                     let mut current: size_t =
      |                         ----^^^^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19136:13
      |
19136 |         let mut base_1: size_t =
      |             ----^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19138:13
      |
19138 |         let mut current_0: size_t =
      |             ----^^^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19213:39
      |
19213 | pub unsafe fn xmlCreatePushParserCtxt(mut sax: xmlSAXHandlerPtr,
      |                                       ----^^^
      |                                       |
      |                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19214:50
      |
19214 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19216:50
      |
19216 | ...                   mut chunk:
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19218:50
      |
19218 | ...                   mut size: libc::c_int,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19219:50
      |
19219 | ...                   mut filename:
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19314:13
      |
19314 |         let mut base: size_t =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19316:13
      |
19316 |         let mut cur: size_t =
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19406:37
      |
19406 | pub unsafe fn xmlCreateIOParserCtxt(mut sax: xmlSAXHandlerPtr,
      |                                     ----^^^
      |                                     |
      |                                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19407:48
      |
19407 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19409:48
      |
19409 | ...                   mut ioread:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19411:48
      |
19411 | ...                   mut ioclose:
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19413:48
      |
19413 | ...                   mut ioctx: *mut libc::c_void,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19414:48
      |
19414 | ...                   mut enc: xmlCharEncoding)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19496:29
      |
19496 | pub unsafe fn xmlIOParseDTD(mut sax: xmlSAXHandlerPtr,
      |                             ----^^^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19497:40
      |
19497 | ...                   mut input: xmlParserInputBufferPtr,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19630:30
      |
19630 | pub unsafe fn xmlSAXParseDTD(mut sax: xmlSAXHandlerPtr,
      |                              ----^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19631:41
      |
19631 | ...                   mut ExternalID: *const xmlChar,
      |                       ----^^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19632:41
      |
19632 | ...                   mut SystemID: *const xmlChar)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19761:27
      |
19761 | pub unsafe fn xmlParseDTD(mut ExternalID: *const xmlChar,
      |                           ----^^^^^^^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19762:38
      |
19762 | ...                   mut SystemID: *const xmlChar)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19789:42
      |
19789 | pub unsafe fn xmlParseCtxtExternalEntity(mut ctx: xmlParserCtxtPtr,
      |                                          ----^^^
      |                                          |
      |                                          help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19790:53
      |
19790 | ...                   mut URL: *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19791:53
      |
19791 | ...                   mut ID: *const xmlChar,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19792:53
      |
19792 | ...                   mut lst: *mut xmlNodePtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19825:41
      |
19825 | unsafe fn xmlParseExternalEntityPrivate(mut doc: xmlDocPtr,
      |                                         ----^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19828:52
      |
19828 | ...                   mut sax: xmlSAXHandlerPtr,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19829:52
      |
19829 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19831:52
      |
19831 | ...                   mut depth: libc::c_int,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19832:52
      |
19832 | ...                   mut URL: *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19833:52
      |
19833 | ...                   mut ID: *const xmlChar,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:19834:52
      |
19834 | ...                   mut list: *mut xmlNodePtr)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20110:38
      |
20110 | pub unsafe fn xmlParseExternalEntity(mut doc: xmlDocPtr,
      |                                      ----^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20111:49
      |
20111 | ...                   mut sax: xmlSAXHandlerPtr,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20112:49
      |
20112 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20114:49
      |
20114 | ...                   mut depth: libc::c_int,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20115:49
      |
20115 | ...                   mut URL: *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20116:49
      |
20116 | ...                   mut ID: *const xmlChar,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20117:49
      |
20117 | ...                   mut lst: *mut xmlNodePtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20143:43
      |
20143 | pub unsafe fn xmlParseBalancedChunkMemory(mut doc: xmlDocPtr,
      |                                           ----^^^
      |                                           |
      |                                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20144:54
      |
20144 | ...                   mut sax:
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20146:54
      |
20146 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20148:54
      |
20148 | ...                   mut depth: libc::c_int,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20149:54
      |
20149 | ...                   mut string:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20151:54
      |
20151 | ...                   mut lst: *mut xmlNodePtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20181:58
      |
20181 | ...                   mut string:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20183:58
      |
20183 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20185:58
      |
20185 | ...                   mut lst:
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20398:48
      |
20398 | ...                   mut data: *const libc::c_char,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20399:48
      |
20399 | ...                   mut datalen: libc::c_int,
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20401:48
      |
20401 | ...                   mut lst: *mut xmlNodePtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20622:61
      |
20622 | ...                   mut sax:
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20624:61
      |
20624 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20626:61
      |
20626 | ...                   mut depth:
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20628:61
      |
20628 | ...                   mut string:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20630:61
      |
20630 | ...                   mut lst:
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20632:61
      |
20632 | ...                   mut recover:
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20789:33
      |
20789 | pub unsafe fn xmlSAXParseEntity(mut sax: xmlSAXHandlerPtr,
      |                                 ----^^^
      |                                 |
      |                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20790:44
      |
20790 | ...                   mut filename: *const libc::c_char)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20829:30
      |
20829 | pub unsafe fn xmlParseEntity(mut filename: *const libc::c_char)
      |                              ----^^^^^^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20849:56
      |
20849 | ...                   mut ID: *const xmlChar,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20850:56
      |
20850 | ...                   mut base:
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20852:56
      |
20852 | ...                   mut pctx:
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20926:41
      |
20926 | pub unsafe fn xmlCreateEntityParserCtxt(mut URL: *const xmlChar,
      |                                         ----^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20927:52
      |
20927 | ...                   mut ID: *const xmlChar,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20928:52
      |
20928 | ...                   mut base: *const xmlChar)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20950:38
      |
20950 | pub unsafe fn xmlCreateURLParserCtxt(mut filename:
      |                                      ----^^^^^^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20952:49
      |
20952 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:20994:39
      |
20994 | pub unsafe fn xmlCreateFileParserCtxt(mut filename:
      |                                       ----^^^^^^^^
      |                                       |
      |                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21018:39
      |
21018 | pub unsafe fn xmlSAXParseFileWithData(mut sax: xmlSAXHandlerPtr,
      |                                       ----^^^
      |                                       |
      |                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21019:50
      |
21019 | ...                   mut filename:
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21021:50
      |
21021 | ...                   mut recovery: libc::c_int,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21022:50
      |
21022 | ...                   mut data: *mut libc::c_void)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21074:31
      |
21074 | pub unsafe fn xmlSAXParseFile(mut sax: xmlSAXHandlerPtr,
      |                               ----^^^
      |                               |
      |                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21075:42
      |
21075 | ...                   mut filename: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21076:42
      |
21076 | ...                   mut recovery: libc::c_int)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21092:29
      |
21092 | pub unsafe fn xmlRecoverDoc(mut cur: *const xmlChar) -> xmlDocPtr {
      |                             ----^^^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21106:28
      |
21106 | pub unsafe fn xmlParseFile(mut filename: *const libc::c_char)
      |                            ----^^^^^^^^
      |                            |
      |                            help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21122:30
      |
21122 | pub unsafe fn xmlRecoverFile(mut filename: *const libc::c_char)
      |                              ----^^^^^^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21137:39
      |
21137 | pub unsafe fn xmlSetupParserForBuffer(mut ctxt: xmlParserCtxtPtr,
      |                                       ----^^^^
      |                                       |
      |                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21138:50
      |
21138 | ...                   mut buffer: *const xmlChar,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21139:50
      |
21139 | ...                   mut filename:
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21177:35
      |
21177 | pub unsafe fn xmlSAXUserParseFile(mut sax: xmlSAXHandlerPtr,
      |                                   ----^^^
      |                                   |
      |                                   help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21178:46
      |
21178 | ...                   mut user_data: *mut libc::c_void,
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21179:46
      |
21179 | ...                   mut filename:
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21223:48
      |
21223 | pub unsafe fn xmlCreateMemoryParserCtxt_parser(mut buffer:
      |                                                ----^^^^^^
      |                                                |
      |                                                help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21225:52
      |
21225 | ...                   mut size: libc::c_int)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21268:41
      |
21268 | pub unsafe fn xmlSAXParseMemoryWithData(mut sax: xmlSAXHandlerPtr,
      |                                         ----^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21269:52
      |
21269 | ...                   mut buffer:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21271:52
      |
21271 | ...                   mut size: libc::c_int,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21272:52
      |
21272 | ...                   mut recovery: libc::c_int,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21273:52
      |
21273 | ...                   mut data:
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21318:33
      |
21318 | pub unsafe fn xmlSAXParseMemory(mut sax: xmlSAXHandlerPtr,
      |                                 ----^^^
      |                                 |
      |                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21319:44
      |
21319 | ...                   mut buffer: *const libc::c_char,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21320:44
      |
21320 | ...                   mut size: libc::c_int,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21321:44
      |
21321 | ...                   mut recovery: libc::c_int)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21336:30
      |
21336 | pub unsafe fn xmlParseMemory(mut buffer: *const libc::c_char,
      |                              ----^^^^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21337:41
      |
21337 | ...                   mut size: libc::c_int) -> xmlDocPtr {
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21353:32
      |
21353 | pub unsafe fn xmlRecoverMemory(mut buffer: *const libc::c_char,
      |                                ----^^^^^^
      |                                |
      |                                help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21354:43
      |
21354 | ...                   mut size: libc::c_int)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21372:37
      |
21372 | pub unsafe fn xmlSAXUserParseMemory(mut sax: xmlSAXHandlerPtr,
      |                                     ----^^^
      |                                     |
      |                                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21373:48
      |
21373 | ...                   mut user_data:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21375:48
      |
21375 | ...                   mut buffer:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21377:48
      |
21377 | ...                   mut size: libc::c_int)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21415:38
      |
21415 | pub unsafe fn xmlCreateDocParserCtxt(mut cur: *const xmlChar)
      |                                      ----^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21436:30
      |
21436 | pub unsafe fn xmlSAXParseDoc(mut sax: xmlSAXHandlerPtr,
      |                              ----^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21437:41
      |
21437 | ...                   mut cur: *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21438:41
      |
21438 | ...                   mut recovery: libc::c_int)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21473:27
      |
21473 | pub unsafe fn xmlParseDoc(mut cur: *const xmlChar) -> xmlDocPtr {
      |                           ----^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21495:33
      |
21495 | unsafe fn xmlAddEntityReference(mut ent: xmlEntityPtr,
      |                                 ----^^^
      |                                 |
      |                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21496:44
      |
21496 | ...                   mut firstNode: xmlNodePtr,
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21497:44
      |
21497 | ...                   mut lastNode: xmlNodePtr) {
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21511:41
      |
21511 | pub unsafe fn xmlSetEntityReferenceFunc(mut func:
      |                                         ----^^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21845:43
      |
21845 | ...                   mut chunk: *const libc::c_char,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21846:43
      |
21846 | ...                   mut size: libc::c_int,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21847:43
      |
21847 | ...                   mut filename: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21848:43
      |
21848 | ...                   mut encoding: *const libc::c_char)
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21883:13
      |
21883 |         let mut base: size_t =
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21885:13
      |
21885 |         let mut cur: size_t =
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:21942:48
      |
21942 | ...                   mut encoding:
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22095:33
      |
22095 | pub unsafe fn xmlCtxtUseOptions(mut ctxt: xmlParserCtxtPtr,
      |                                 ----^^^^
      |                                 |
      |                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22096:44
      |
22096 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22113:32
      |
22113 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22114:32
      |
22114 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22115:32
      |
22115 | ...                   mut options: libc::c_int,
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22116:32
      |
22116 | ...                   mut reuse: libc::c_int) -> xmlDocPtr {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22153:26
      |
22153 | pub unsafe fn xmlReadDoc(mut cur: *const xmlChar,
      |                          ----^^^
      |                          |
      |                          help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22154:37
      |
22154 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22155:37
      |
22155 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22156:37
      |
22156 | ...                   mut options: libc::c_int) -> xmlDocPtr {
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22175:27
      |
22175 | pub unsafe fn xmlReadFile(mut filename: *const libc::c_char,
      |                           ----^^^^^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22176:38
      |
22176 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22177:38
      |
22177 | ...                   mut options: libc::c_int) -> xmlDocPtr {
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22198:29
      |
22198 | pub unsafe fn xmlReadMemory(mut buffer: *const libc::c_char,
      |                             ----^^^^^^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22199:40
      |
22199 | ...                   mut size: libc::c_int,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22200:40
      |
22200 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22201:40
      |
22201 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22202:40
      |
22202 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22224:25
      |
22224 | pub unsafe fn xmlReadFd(mut fd: libc::c_int,
      |                         ----^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22225:36
      |
22225 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22226:36
      |
22226 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22227:36
      |
22227 | ...                   mut options: libc::c_int) -> xmlDocPtr {
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22264:25
      |
22264 | pub unsafe fn xmlReadIO(mut ioread: xmlInputReadCallback,
      |                         ----^^^^^^
      |                         |
      |                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22265:36
      |
22265 | ...                   mut ioclose: xmlInputCloseCallback,
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22266:36
      |
22266 | ...                   mut ioctx: *mut libc::c_void,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22267:36
      |
22267 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22268:36
      |
22268 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22269:36
      |
22269 | ...                   mut options: libc::c_int) -> xmlDocPtr {
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22312:30
      |
22312 | pub unsafe fn xmlCtxtReadDoc(mut ctxt: xmlParserCtxtPtr,
      |                              ----^^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22313:41
      |
22313 | ...                   mut cur: *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22314:41
      |
22314 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22315:41
      |
22315 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22316:41
      |
22316 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22341:31
      |
22341 | pub unsafe fn xmlCtxtReadFile(mut ctxt: xmlParserCtxtPtr,
      |                               ----^^^^
      |                               |
      |                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22342:42
      |
22342 | ...                   mut filename: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22343:42
      |
22343 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22344:42
      |
22344 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22372:33
      |
22372 | pub unsafe fn xmlCtxtReadMemory(mut ctxt: xmlParserCtxtPtr,
      |                                 ----^^^^
      |                                 |
      |                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22373:44
      |
22373 | ...                   mut buffer: *const libc::c_char,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22374:44
      |
22374 | ...                   mut size: libc::c_int,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22375:44
      |
22375 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22376:44
      |
22376 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22377:44
      |
22377 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22412:29
      |
22412 | pub unsafe fn xmlCtxtReadFd(mut ctxt: xmlParserCtxtPtr,
      |                             ----^^^^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22413:40
      |
22413 | ...                   mut fd: libc::c_int,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22414:40
      |
22414 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22415:40
      |
22415 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22416:40
      |
22416 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22437:29
      |
22437 | pub unsafe fn xmlCtxtReadIO(mut ctxt: xmlParserCtxtPtr,
      |                             ----^^^^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22438:40
      |
22438 | ...                   mut ioread: xmlInputReadCallback,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22439:40
      |
22439 | ...                   mut ioclose: xmlInputCloseCallback,
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22440:40
      |
22440 | ...                   mut ioctx: *mut libc::c_void,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22441:40
      |
22441 | ...                   mut URL: *const libc::c_char,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22442:40
      |
22442 | ...                   mut encoding: *const libc::c_char,
      |                       ----^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/parser.rs:22443:40
      |
22443 | ...                   mut options: libc::c_int)
      |                       ----^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
 --> src/parser_rust.rs:3:46
  |
3 |  pub unsafe extern "C" fn xmlHasFeature_rust(mut feature: xmlFeature) -> libc::c_int{
  |                                              ----^^^^^^^
  |                                              |
  |                                              help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:11:44
   |
11 |  pub extern "C" fn xmlCheckLanguageID_rust(mut lang: *const xmlChar) -> libc::c_int{
   |                                            ----^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:19:35
   |
19 |  pub extern "C" fn inputPush_rust(mut ctxt: xmlParserCtxtPtr, mut value: xmlParserInputPtr)  -> libc::c_int{
   |                                   ----^^^^
   |                                   |
   |                                   help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:19:63
   |
19 |  pub extern "C" fn inputPush_rust(mut ctxt: xmlParserCtxtPtr, mut value: xmlParserInputPtr)  -> libc::c_int{
   |                                                               ----^^^^^
   |                                                               |
   |                                                               help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:27:34
   |
27 |  pub extern "C" fn inputPop_rust(mut ctxt: xmlParserCtxtPtr) -> xmlParserInputPtr{
   |                                  ----^^^^
   |                                  |
   |                                  help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:35:34
   |
35 |  pub extern "C" fn nodePush_rust(mut ctxt: xmlParserCtxtPtr, mut value: xmlNodePtr) -> libc::c_int {
   |                                  ----^^^^
   |                                  |
   |                                  help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:35:62
   |
35 |  pub extern "C" fn nodePush_rust(mut ctxt: xmlParserCtxtPtr, mut value: xmlNodePtr) -> libc::c_int {
   |                                                              ----^^^^^
   |                                                              |
   |                                                              help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:43:33
   |
43 |  pub extern "C" fn nodePop_rust(mut ctxt: xmlParserCtxtPtr) -> xmlNodePtr{
   |                                 ----^^^^
   |                                 |
   |                                 help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:51:34
   |
51 |  pub extern "C" fn namePush_rust(mut ctxt: xmlParserCtxtPtr, mut value: * const xmlChar) -> libc::c_int {
   |                                  ----^^^^
   |                                  |
   |                                  help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:51:62
   |
51 |  pub extern "C" fn namePush_rust(mut ctxt: xmlParserCtxtPtr, mut value: * const xmlChar) -> libc::c_int {
   |                                                              ----^^^^^
   |                                                              |
   |                                                              help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:59:33
   |
59 |  pub extern "C" fn namePop_rust(mut ctxt: xmlParserCtxtPtr) -> * const xmlChar {
   |                                 ----^^^^
   |                                 |
   |                                 help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:67:50
   |
67 |  pub unsafe extern "C" fn xmlSkipBlankChars_rust(mut ctxt: xmlParserCtxtPtr) -> libc::c_int {
   |                                                  ----^^^^
   |                                                  |
   |                                                  help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:76:44
   |
76 |  pub unsafe extern "C" fn xmlPopInput_rust(mut ctxt: xmlParserCtxtPtr) -> xmlChar {
   |                                            ----^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:85:45
   |
85 |  pub unsafe extern "C" fn xmlPushInput_rust(mut ctxt: xmlParserCtxtPtr, mut input: xmlParserInputPtr) -> libc::c_int {
   |                                             ----^^^^
   |                                             |
   |                                             help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:85:73
   |
85 |  pub unsafe extern "C" fn xmlPushInput_rust(mut ctxt: xmlParserCtxtPtr, mut input: xmlParserInputPtr) -> libc::c_int {
   |                                                                         ----^^^^^
   |                                                                         |
   |                                                                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/parser_rust.rs:94:48
   |
94 |  pub unsafe extern "C" fn xmlParseCharRef_rust(mut ctxt: xmlParserCtxtPtr) -> libc::c_int {
   |                                                ----^^^^
   |                                                |
   |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:103:59
    |
103 |  pub unsafe extern "C" fn xmlParserHandlePEReference_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                           ----^^^^
    |                                                           |
    |                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:110:59
    |
110 |  pub unsafe extern "C" fn xmlStringLenDecodeEntities_rust(mut ctxt:
    |                                                           ----^^^^
    |                                                           |
    |                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:112:54
    |
112 | ...                   mut str: *const xmlChar,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:113:54
    |
113 | ...                   mut len: libc::c_int,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:114:54
    |
114 | ...                   mut what: libc::c_int,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:115:54
    |
115 | ...                   mut end: xmlChar,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:116:54
    |
116 | ...                   mut end2: xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:117:54
    |
117 | ...                   mut end3: xmlChar)
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:133:56
    |
133 |  pub unsafe extern "C" fn xmlStringDecodeEntities_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                        ----^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:134:51
    |
134 | ...                   mut str: *const xmlChar,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:135:51
    |
135 | ...                   mut what: libc::c_int,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:136:51
    |
136 | ...                   mut end: xmlChar,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:137:51
    |
137 | ...                   mut end2: xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:138:51
    |
138 | ...                   mut end3: xmlChar)
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:153:46
    |
153 |  pub unsafe extern "C" fn xmlSplitQName_rust(mut ctxt: xmlParserCtxtPtr,
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:154:41
    |
154 | ...                   mut name: *const xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:155:41
    |
155 | ...                   mut prefix: *mut *mut xmlChar)
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:167:45
    |
167 |  pub unsafe extern "C" fn xmlParseName_rust(mut ctxt: xmlParserCtxtPtr)
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:177:48
    |
177 |  pub unsafe extern "C" fn xmlParseNmtoken_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:187:52
    |
187 |  pub unsafe extern "C" fn xmlParseEntityValue_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                    ----^^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:188:47
    |
188 | ...                   mut orig: *mut *mut xmlChar)
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:198:49
    |
198 |  pub unsafe extern "C" fn xmlParseAttValue_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:208:54
    |
208 |  pub unsafe extern "C" fn xmlParseSystemLiteral_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                      ----^^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:218:53
    |
218 |  pub unsafe extern "C" fn xmlParsePubidLiteral_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:228:49
    |
228 |  pub unsafe extern "C" fn xmlParseCharData_rust(mut ctxt: xmlParserCtxtPtr, mut cdata: libc::c_int) {
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:228:77
    |
228 |  pub unsafe extern "C" fn xmlParseCharData_rust(mut ctxt: xmlParserCtxtPtr, mut cdata: libc::c_int) {
    |                                                                             ----^^^^^
    |                                                                             |
    |                                                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:235:51
    |
235 |  pub unsafe extern "C" fn xmlParseExternalID_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:236:46
    |
236 | ...                   mut publicID: *mut *mut xmlChar,
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:237:46
    |
237 | ...                   mut strict: libc::c_int)
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:247:48
    |
247 |  pub unsafe extern "C" fn xmlParseComment_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:254:49
    |
254 |  pub unsafe extern "C" fn xmlParsePITarget_rust(mut ctxt: xmlParserCtxtPtr) -> *const xmlChar {
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:262:43
    |
262 |  pub unsafe extern "C" fn xmlParsePI_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:269:53
    |
269 |  pub unsafe extern "C" fn xmlParseNotationDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:276:51
    |
276 |  pub unsafe extern "C" fn xmlParseEntityDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:283:52
    |
283 |  pub unsafe extern "C" fn xmlParseDefaultDecl_rust(mut ctxt: xmlParserCtxtPtr, mut value: *mut *mut xmlChar)
    |                                                    ----^^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:283:80
    |
283 |  pub unsafe extern "C" fn xmlParseDefaultDecl_rust(mut ctxt: xmlParserCtxtPtr, mut value: *mut *mut xmlChar)
    |                                                                                ----^^^^^
    |                                                                                |
    |                                                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:293:53
    |
293 |  pub unsafe extern "C" fn xmlParseNotationType_rust(mut ctxt: xmlParserCtxtPtr) -> xmlEnumerationPtr {
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:302:56
    |
302 |  pub unsafe extern "C" fn xmlParseEnumerationType_rust(mut ctxt: xmlParserCtxtPtr) -> xmlEnumerationPtr {
    |                                                        ----^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:311:55
    |
311 |  pub unsafe extern "C" fn xmlParseEnumeratedType_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                       ----^^^^
    |                                                       |
    |                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:312:50
    |
312 | ...                   mut tree:
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:323:54
    |
323 |  pub unsafe extern "C" fn xmlParseAttributeType_rust(mut ctxt: xmlParserCtxtPtr, mut tree: *mut xmlEnumerationPtr) -> libc::c_int {
    |                                                      ----^^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:323:82
    |
323 |  pub unsafe extern "C" fn xmlParseAttributeType_rust(mut ctxt: xmlParserCtxtPtr, mut tree: *mut xmlEnumerationPtr) -> libc::c_int {
    |                                                                                  ----^^^^
    |                                                                                  |
    |                                                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:332:58
    |
332 |  pub unsafe extern "C" fn xmlParseAttributeListDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                          ----^^^^
    |                                                          |
    |                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:339:64
    |
339 |  pub unsafe extern "C" fn xmlParseElementMixedContentDecl_rust(mut ctxt:
    |                                                                ----^^^^
    |                                                                |
    |                                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:341:59
    |
341 | ...                   mut inputchk:
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:352:67
    |
352 |  pub unsafe extern "C" fn xmlParseElementChildrenContentDecl_rust(mut ctxt:
    |                                                                   ----^^^^
    |                                                                   |
    |                                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:354:62
    |
354 | ...                   mut inputchk:
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:365:59
    |
365 |  pub unsafe extern "C" fn xmlParseElementContentDecl_rust(mut ctxt:
    |                                                           ----^^^^
    |                                                           |
    |                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:367:54
    |
367 | ...                   mut name: *const xmlChar,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:368:54
    |
368 | ...                   mut result:
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:379:52
    |
379 |  pub unsafe extern "C" fn xmlParseElementDecl_rust(mut ctxt: xmlParserCtxtPtr) -> libc::c_int {
    |                                                    ----^^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:388:51
    |
388 |  pub unsafe extern "C" fn xmlParseMarkupDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:395:49
    |
395 |  pub unsafe extern "C" fn xmlParseTextDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:402:55
    |
402 |  pub unsafe extern "C" fn xmlParseExternalSubset_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                       ----^^^^
    |                                                       |
    |                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:403:50
    |
403 | ...                   mut ExternalID:
    |                       ----^^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:405:50
    |
405 | ...                   mut SystemID:
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:413:50
    |
413 |  pub unsafe extern "C" fn xmlParseReference_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:420:50
    |
420 |  pub unsafe extern "C" fn xmlParseEntityRef_rust(mut ctxt: xmlParserCtxtPtr) -> xmlEntityPtr {
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:429:52
    |
429 |  pub unsafe extern "C" fn xmlParsePEReference_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                    ----^^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:436:52
    |
436 |  pub unsafe extern "C" fn xmlParseDocTypeDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                    ----^^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:443:50
    |
443 |  pub unsafe extern "C" fn xmlParseAttribute_rust(mut ctxt: xmlParserCtxtPtr, mut value: *mut *mut xmlChar) -> *const xmlChar {
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:443:78
    |
443 |  pub unsafe extern "C" fn xmlParseAttribute_rust(mut ctxt: xmlParserCtxtPtr, mut value: *mut *mut xmlChar) -> *const xmlChar {
    |                                                                              ----^^^^^
    |                                                                              |
    |                                                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:452:49
    |
452 |  pub unsafe extern "C" fn xmlParseStartTag_rust(mut ctxt: xmlParserCtxtPtr) -> *const xmlChar {
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:460:47
    |
460 |  pub unsafe extern "C" fn xmlParseEndTag_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:467:47
    |
467 |  pub unsafe extern "C" fn xmlParseCDSect_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:474:48
    |
474 |  pub unsafe extern "C" fn xmlParseContent_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:481:48
    |
481 |  pub unsafe extern "C" fn xmlParseElement_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:488:51
    |
488 |  pub unsafe extern "C" fn xmlParseVersionNum_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:498:52
    |
498 |  pub unsafe extern "C" fn xmlParseVersionInfo_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                    ----^^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:508:48
    |
508 |  pub unsafe extern "C" fn xmlParseEncName_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:518:53
    |
518 |  pub unsafe extern "C" fn xmlParseEncodingDecl_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:528:47
    |
528 |  pub unsafe extern "C" fn xmlParseSDDecl_rust(mut ctxt: xmlParserCtxtPtr)
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:538:48
    |
538 |  pub unsafe extern "C" fn xmlParseXMLDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:545:45
    |
545 |  pub unsafe extern "C" fn xmlParseMisc_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:552:49
    |
552 |  pub unsafe extern "C" fn xmlParseDocument_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:562:53
    |
562 |  pub unsafe extern "C" fn xmlParseExtParsedEnt_rust(mut ctxt: xmlParserCtxtPtr)
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:572:46
    |
572 |  pub unsafe extern "C" fn xmlParseChunk_rust(mut ctxt: xmlParserCtxtPtr,
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:573:41
    |
573 | ...                   mut chunk: *const libc::c_char,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:574:41
    |
574 | ...                   mut size: libc::c_int,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:575:41
    |
575 | ...                   mut terminate: libc::c_int)
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:588:56
    |
588 |  pub unsafe extern "C" fn xmlCreatePushParserCtxt_rust(mut sax: xmlSAXHandlerPtr,
    |                                                        ----^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:589:51
    |
589 | ...                   mut user_data:
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:591:51
    |
591 | ...                   mut chunk:
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:593:51
    |
593 | ...                   mut size: libc::c_int,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:594:51
    |
594 | ...                   mut filename:
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:612:46
    |
612 |  pub unsafe extern "C" fn xmlStopParser_rust(mut ctxt: xmlParserCtxtPtr) {
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:619:54
    |
619 |  pub unsafe extern "C" fn xmlCreateIOParserCtxt_rust(mut sax: xmlSAXHandlerPtr,
    |                                                      ----^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:620:49
    |
620 | ...                   mut user_data:
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:622:49
    |
622 | ...                   mut ioread:
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:624:49
    |
624 | ...                   mut ioclose:
    |                       ----^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:626:49
    |
626 | ...                   mut ioctx: *mut libc::c_void,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:627:49
    |
627 | ...                   mut enc: xmlCharEncoding)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:637:46
    |
637 |  pub unsafe extern "C" fn xmlIOParseDTD_rust(mut sax: xmlSAXHandlerPtr,
    |                                              ----^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:638:41
    |
638 | ...                   mut input: xmlParserInputBufferPtr,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:639:41
    |
639 | ...                   mut enc: xmlCharEncoding)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:651:47
    |
651 |  pub unsafe extern "C" fn xmlSAXParseDTD_rust(mut sax: xmlSAXHandlerPtr,
    |                                               ----^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:652:42
    |
652 | ...                   mut ExternalID: *const xmlChar,
    |                       ----^^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:653:42
    |
653 | ...                   mut SystemID: *const xmlChar)
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:665:44
    |
665 |  pub unsafe extern "C" fn xmlParseDTD_rust(mut ExternalID: *const xmlChar,
    |                                            ----^^^^^^^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:666:39
    |
666 | ...                   mut SystemID: *const xmlChar)
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:677:59
    |
677 |  pub unsafe extern "C" fn xmlParseCtxtExternalEntity_rust(mut ctx: xmlParserCtxtPtr,
    |                                                           ----^^^
    |                                                           |
    |                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:678:54
    |
678 | ...                   mut URL: *const xmlChar,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:679:54
    |
679 | ...                   mut ID: *const xmlChar,
    |                       ----^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:680:54
    |
680 | ...                   mut lst: *mut xmlNodePtr)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:693:55
    |
693 |  pub unsafe extern "C" fn xmlParseExternalEntity_rust(mut doc: xmlDocPtr,
    |                                                       ----^^^
    |                                                       |
    |                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:694:50
    |
694 | ...                   mut sax: xmlSAXHandlerPtr,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:695:50
    |
695 | ...                   mut user_data:
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:697:50
    |
697 | ...                   mut depth: libc::c_int,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:698:50
    |
698 | ...                   mut URL: *const xmlChar,
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:699:50
    |
699 | ...                   mut ID: *const xmlChar,
    |                       ----^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:700:50
    |
700 | ...                   mut lst: *mut xmlNodePtr)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:716:60
    |
716 |  pub unsafe extern "C" fn xmlParseBalancedChunkMemory_rust(mut doc: xmlDocPtr,
    |                                                            ----^^^
    |                                                            |
    |                                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:717:55
    |
717 | ...                   mut sax:
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:719:55
    |
719 | ...                   mut user_data:
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:721:55
    |
721 | ...                   mut depth: libc::c_int,
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:722:55
    |
722 | ...                   mut string:
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:724:55
    |
724 | ...                   mut lst: *mut xmlNodePtr)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:740:54
    |
740 |  pub unsafe extern "C" fn xmlParseInNodeContext_rust(mut node: xmlNodePtr,
    |                                                      ----^^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:741:49
    |
741 | ...                   mut data: *const libc::c_char,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:742:49
    |
742 | ...                   mut datalen: libc::c_int,
    |                       ----^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:743:49
    |
743 | ...                   mut options: libc::c_int,
    |                       ----^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:744:49
    |
744 | ...                   mut lst: *mut xmlNodePtr)
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:758:67
    |
758 |  pub unsafe extern "C" fn xmlParseBalancedChunkMemoryRecover_rust(mut doc:
    |                                                                   ----^^^
    |                                                                   |
    |                                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:760:62
    |
760 | ...                   mut sax:
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:762:62
    |
762 | ...                   mut user_data:
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:764:62
    |
764 | ...                   mut depth:
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:766:62
    |
766 | ...                   mut string:
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:768:62
    |
768 | ...                   mut lst:
    |                       ----^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:770:62
    |
770 | ...                   mut recover:
    |                       ----^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:787:50
    |
787 |  pub unsafe extern "C" fn xmlSAXParseEntity_rust(mut sax: xmlSAXHandlerPtr,
    |                                                  ----^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:788:45
    |
788 | ...                   mut filename: *const libc::c_char)
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:798:47
    |
798 |  pub unsafe extern "C" fn xmlParseEntity_rust(mut filename: *const libc::c_char)
    |                                               ----^^^^^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:808:58
    |
808 |  pub unsafe extern "C" fn xmlCreateEntityParserCtxt_rust(mut URL: *const xmlChar,
    |                                                          ----^^^
    |                                                          |
    |                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:809:53
    |
809 | ...                   mut ID: *const xmlChar,
    |                       ----^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:810:53
    |
810 | ...                   mut base: *const xmlChar)
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:822:55
    |
822 |  pub unsafe extern "C" fn xmlCreateURLParserCtxt_rust(mut filename:
    |                                                       ----^^^^^^^^
    |                                                       |
    |                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:824:50
    |
824 | ...                   mut options: libc::c_int)
    |                       ----^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:834:56
    |
834 |  pub unsafe extern "C" fn xmlCreateFileParserCtxt_rust(mut filename: *const libc::c_char) -> xmlParserCtxtPtr {
    |                                                        ----^^^^^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:843:56
    |
843 |  pub unsafe extern "C" fn xmlSAXParseFileWithData_rust(mut sax: xmlSAXHandlerPtr,
    |                                                        ----^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:844:51
    |
844 | ...                   mut filename:
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:846:51
    |
846 | ...                   mut recovery: libc::c_int,
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:847:51
    |
847 | ...                   mut data: *mut libc::c_void)
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:860:48
    |
860 |  pub unsafe extern "C" fn xmlSAXParseFile_rust(mut sax: xmlSAXHandlerPtr,
    |                                                ----^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:861:43
    |
861 | ...                   mut filename: *const libc::c_char,
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:862:43
    |
862 | ...                   mut recovery: libc::c_int)
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:874:46
    |
874 |  pub unsafe extern "C" fn xmlRecoverDoc_rust(mut cur: *const xmlChar) -> xmlDocPtr {
    |                                              ----^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:883:45
    |
883 |  pub unsafe extern "C" fn xmlParseFile_rust(mut filename: *const libc::c_char)
    |                                             ----^^^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:893:47
    |
893 |  pub unsafe extern "C" fn xmlRecoverFile_rust(mut filename: *const libc::c_char)
    |                                               ----^^^^^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:903:56
    |
903 |  pub unsafe extern "C" fn xmlSetupParserForBuffer_rust(mut ctxt: xmlParserCtxtPtr,
    |                                                        ----^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:904:51
    |
904 | ...                   mut buffer: *const xmlChar,
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:905:51
    |
905 | ...                   mut filename:
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:913:52
    |
913 |  pub unsafe extern "C" fn xmlSAXUserParseFile_rust(mut sax: xmlSAXHandlerPtr,
    |                                                    ----^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:914:47
    |
914 | ...                   mut user_data: *mut libc::c_void,
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:915:47
    |
915 | ...                   mut filename:
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:926:58
    |
926 |  pub unsafe extern "C" fn xmlCreateMemoryParserCtxt_rust(mut buffer:
    |                                                          ----^^^^^^
    |                                                          |
    |                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:928:53
    |
928 | ...                   mut size: libc::c_int)
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:938:58
    |
938 |  pub unsafe extern "C" fn xmlSAXParseMemoryWithData_rust(mut sax: xmlSAXHandlerPtr,
    |                                                          ----^^^
    |                                                          |
    |                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:939:53
    |
939 | ...                   mut buffer:
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:941:53
    |
941 | ...                   mut size: libc::c_int,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:942:53
    |
942 | ...                   mut recovery: libc::c_int,
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:943:53
    |
943 | ...                   mut data:
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:958:50
    |
958 |  pub unsafe extern "C" fn xmlSAXParseMemory_rust(mut sax: xmlSAXHandlerPtr,
    |                                                  ----^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:959:45
    |
959 | ...                   mut buffer: *const libc::c_char,
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:960:45
    |
960 | ...                   mut size: libc::c_int,
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:961:45
    |
961 | ...                   mut recovery: libc::c_int)
    |                       ----^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:974:47
    |
974 |  pub unsafe extern "C" fn xmlParseMemory_rust(mut buffer: *const libc::c_char,
    |                                               ----^^^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:975:42
    |
975 | ...                   mut size: libc::c_int) -> xmlDocPtr {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:984:49
    |
984 |  pub unsafe extern "C" fn xmlRecoverMemory_rust(mut buffer: *const libc::c_char,
    |                                                 ----^^^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:985:44
    |
985 | ...                   mut size: libc::c_int)
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:995:54
    |
995 |  pub unsafe extern "C" fn xmlSAXUserParseMemory_rust(mut sax: xmlSAXHandlerPtr,
    |                                                      ----^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:996:49
    |
996 | ...                   mut user_data:
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/parser_rust.rs:998:49
    |
998 | ...                   mut buffer:
    |                       ----^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1000:49
     |
1000 | ...                   mut size: libc::c_int)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1013:55
     |
1013 |  pub unsafe extern "C" fn xmlCreateDocParserCtxt_rust(mut cur: *const xmlChar) -> xmlParserCtxtPtr {
     |                                                       ----^^^
     |                                                       |
     |                                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1022:47
     |
1022 |  pub unsafe extern "C" fn xmlSAXParseDoc_rust(mut sax: xmlSAXHandlerPtr,
     |                                               ----^^^
     |                                               |
     |                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1023:42
     |
1023 | ...                   mut cur: *const xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1024:42
     |
1024 | ...                   mut recovery: libc::c_int)
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1036:44
     |
1036 |  pub unsafe extern "C" fn xmlParseDoc_rust(mut cur: *const xmlChar) -> xmlDocPtr {
     |                                            ----^^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1045:58
     |
1045 |  pub unsafe extern "C" fn xmlSetEntityReferenceFunc_rust(mut func: xmlEntityReferenceFunc) {
     |                                                          ----^^^^
     |                                                          |
     |                                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1066:45
     |
1066 |  pub unsafe extern "C" fn xmlCtxtReset_rust(mut ctxt: xmlParserCtxtPtr) {
     |                                             ----^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1073:49
     |
1073 |  pub unsafe extern "C" fn xmlCtxtResetPush_rust(mut ctxt: xmlParserCtxtPtr,
     |                                                 ----^^^^
     |                                                 |
     |                                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1074:44
     |
1074 | ...                   mut chunk: *const libc::c_char,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1075:44
     |
1075 | ...                   mut size: libc::c_int,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1076:44
     |
1076 | ...                   mut filename: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1077:44
     |
1077 | ...                   mut encoding: *const libc::c_char)
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1087:50
     |
1087 |  pub unsafe extern "C" fn xmlCtxtUseOptions_rust(mut ctxt: xmlParserCtxtPtr,
     |                                                  ----^^^^
     |                                                  |
     |                                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1088:45
     |
1088 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1099:43
     |
1099 |  pub unsafe extern "C" fn xmlReadDoc_rust(mut cur: *const xmlChar,
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1100:38
     |
1100 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1101:38
     |
1101 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1102:38
     |
1102 | ...                   mut options: libc::c_int) -> xmlDocPtr {
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1114:44
     |
1114 |  pub unsafe extern "C" fn xmlReadFile_rust(mut filename: *const libc::c_char,
     |                                            ----^^^^^^^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1115:39
     |
1115 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1116:39
     |
1116 | ...                   mut options: libc::c_int) -> xmlDocPtr {
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1127:46
     |
1127 |  pub unsafe extern "C" fn xmlReadMemory_rust(mut buffer: *const libc::c_char,
     |                                              ----^^^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1128:41
     |
1128 | ...                   mut size: libc::c_int,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1129:41
     |
1129 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1130:41
     |
1130 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1131:41
     |
1131 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1145:42
     |
1145 |  pub unsafe extern "C" fn xmlReadFd_rust(mut fd: libc::c_int,
     |                                          ----^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1146:37
     |
1146 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1147:37
     |
1147 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1148:37
     |
1148 | ...                   mut options: libc::c_int) -> xmlDocPtr {
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1160:42
     |
1160 |  pub unsafe extern "C" fn xmlReadIO_rust(mut ioread: xmlInputReadCallback,
     |                                          ----^^^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1161:37
     |
1161 | ...                   mut ioclose: xmlInputCloseCallback,
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1162:37
     |
1162 | ...                   mut ioctx: *mut libc::c_void,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1163:37
     |
1163 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1164:37
     |
1164 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1165:37
     |
1165 | ...                   mut options: libc::c_int) -> xmlDocPtr {
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1179:47
     |
1179 |  pub unsafe extern "C" fn xmlCtxtReadDoc_rust(mut ctxt: xmlParserCtxtPtr,
     |                                               ----^^^^
     |                                               |
     |                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1180:42
     |
1180 | ...                   mut cur: *const xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1181:42
     |
1181 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1182:42
     |
1182 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1183:42
     |
1183 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1197:48
     |
1197 |  pub unsafe extern "C" fn xmlCtxtReadFile_rust(mut ctxt: xmlParserCtxtPtr,
     |                                                ----^^^^
     |                                                |
     |                                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1198:43
     |
1198 | ...                   mut filename: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1199:43
     |
1199 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1200:43
     |
1200 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1213:50
     |
1213 |  pub unsafe extern "C" fn xmlCtxtReadMemory_rust(mut ctxt: xmlParserCtxtPtr,
     |                                                  ----^^^^
     |                                                  |
     |                                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1214:45
     |
1214 | ...                   mut buffer: *const libc::c_char,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1215:45
     |
1215 | ...                   mut size: libc::c_int,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1216:45
     |
1216 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1217:45
     |
1217 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1218:45
     |
1218 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1233:46
     |
1233 |  pub unsafe extern "C" fn xmlCtxtReadFd_rust(mut ctxt: xmlParserCtxtPtr,
     |                                              ----^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1234:41
     |
1234 | ...                   mut fd: libc::c_int,
     |                       ----^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1235:41
     |
1235 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1236:41
     |
1236 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1237:41
     |
1237 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1251:46
     |
1251 |  pub unsafe extern "C" fn xmlCtxtReadIO_rust(mut ctxt: xmlParserCtxtPtr,
     |                                              ----^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1252:41
     |
1252 | ...                   mut ioread: xmlInputReadCallback,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1253:41
     |
1253 | ...                   mut ioclose: xmlInputCloseCallback,
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1254:41
     |
1254 | ...                   mut ioctx: *mut libc::c_void,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1255:41
     |
1255 | ...                   mut URL: *const libc::c_char,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1256:41
     |
1256 | ...                   mut encoding: *const libc::c_char,
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/parser_rust.rs:1257:41
     |
1257 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:325:20
    |
325 | unsafe fn wrap_cmp(mut x: xmlNodePtr, mut y: xmlNodePtr)
    |                    ----^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:325:39
    |
325 | unsafe fn wrap_cmp(mut x: xmlNodePtr, mut y: xmlNodePtr)
    |                                       ----^
    |                                       |
    |                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:328:9
    |
328 |     let mut res: libc::c_int = xmlXPathCmpNodes(x, y);
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:379:44
    |
379 | unsafe fn libxml_domnode_tim_sort_collapse(mut dst:
    |                                            ----^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:381:55
    |
381 | ...                   mut stack:
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:385:55
    |
385 | ...                   mut store:
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:498:41
    |
498 | unsafe fn libxml_domnode_tim_sort_merge(mut dst: *mut xmlNodePtr,
    |                                         ----^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:499:52
    |
499 | ...                   mut stack:
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:502:52
    |
502 | ...                   mut store:
    |                       ----^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:588:13
    |
588 |         let mut tempstore: *mut xmlNodePtr =
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:605:36
    |
605 | unsafe fn libxml_domnode_count_run(mut dst: *mut xmlNodePtr,
    |                                    ----^^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:669:52
    |
669 | pub unsafe fn libxml_domnode_binary_insertion_sort(mut dst:
    |                                                    ----^^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:693:42
    |
693 | unsafe fn libxml_domnode_check_invariant(mut stack:
    |                                          ----^^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:716:48
    |
716 | unsafe fn libxml_domnode_binary_insertion_find(mut dst:
    |                                                ----^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:754:54
    |
754 | unsafe fn libxml_domnode_binary_insertion_sort_start(mut dst:
    |                                                      ----^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:786:43
    |
786 | unsafe fn libxml_domnode_reverse_elements(mut dst: *mut xmlNodePtr,
    |                                           ----^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:801:21
    |
801 | unsafe fn PUSH_NEXT(mut dst: *mut xmlNodePtr, size: size_t,
    |                     ----^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:803:32
    |
803 | ...                   mut run_stack: *mut TIM_SORT_RUN_T,
    |                       ----^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:804:32
    |
804 | ...                   mut stack_curr: *mut size_t,
    |                       ----^^^^^^^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:805:32
    |
805 | ...                   mut curr: *mut size_t) -> libc::c_int {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:850:39
    |
850 | pub unsafe fn libxml_domnode_tim_sort(mut dst: *mut xmlNodePtr,
    |                                       ----^^^
    |                                       |
    |                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:922:9
    |
922 |     let mut zero: libc::c_double = 0.0f64;
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:934:35
    |
934 | pub unsafe fn xmlXPathIsNaN_rust2(mut val: libc::c_double, mut flag: libc::c_int)
    |                                   ----^^^
    |                                   |
    |                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:934:60
    |
934 | pub unsafe fn xmlXPathIsNaN_rust2(mut val: libc::c_double, mut flag: libc::c_int)
    |                                                            ----^^^^
    |                                                            |
    |                                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:961:35
    |
961 | pub unsafe fn xmlXPathIsInf_rust2(mut val: libc::c_double, mut flag: libc::c_int)
    |                                   ----^^^
    |                                   |
    |                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:961:60
    |
961 | pub unsafe fn xmlXPathIsInf_rust2(mut val: libc::c_double, mut flag: libc::c_int)
    |                                                            ----^^^^
    |                                                            |
    |                                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath.rs:994:13
    |
994 |         let mut init =
    |             ----^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1062:40
     |
1062 | ...                   mut extra: *const libc::c_char) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1115:41
     |
1115 | ...                   mut extra: *const libc::c_char) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1221:29
     |
1221 | pub unsafe fn xmlXPatherror(mut ctxt: xmlXPathParserContextPtr,
     |                             ----^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1222:40
     |
1222 | ...                   mut file: *const libc::c_char,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1223:40
     |
1223 | ...                   mut line: libc::c_int,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1224:40
     |
1224 | ...                   mut no: libc::c_int) {
     |                       ----^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1235:32
     |
1235 | unsafe fn xmlXPathCheckOpLimit(mut ctxt: xmlXPathParserContextPtr,
     |                                ----^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1236:43
     |
1236 | ...                   mut opCount: libc::c_ulong)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1253:44
     |
1253 | ...                   mut item: *mut libc::c_void,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1309:32
     |
1309 | unsafe fn xmlPointerListCreate(mut initialSize: libc::c_int)
     |                                ----^^^^^^^^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1336:30
     |
1336 | unsafe fn xmlPointerListFree(mut list: xmlPointerListPtr) {
     |                              ----^^^^
     |                              |
     |                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1405:36
     |
1405 | pub unsafe fn xmlXPathFreeCompExpr(mut comp: xmlXPathCompExprPtr) {
     |                                    ----^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1491:31
     |
1491 | unsafe fn xmlXPathCompExprAdd(mut ctxt: xmlXPathParserContextPtr,
     |                               ----^^^^
     |                               |
     |                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1492:42
     |
1492 | ...                   mut ch1: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1493:42
     |
1493 | ...                   mut ch2: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1494:42
     |
1494 | ...                   mut op: xmlXPathOp,
     |                       ----^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1495:42
     |
1495 | ...                   mut value: libc::c_int,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1496:42
     |
1496 | ...                   mut value2: libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1497:42
     |
1497 | ...                   mut value3: libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1498:42
     |
1498 | ...                   mut value4: *mut libc::c_void,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1499:42
     |
1499 | ...                   mut value5: *mut libc::c_void)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1601:33
     |
1601 | unsafe fn xmlXPathDebugDumpNode(mut output: *mut FILE,
     |                                 ----^^^^^^
     |                                 |
     |                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1602:44
     |
1602 | ...                   mut cur: xmlNodePtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1603:44
     |
1603 | ...                   mut depth: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1637:37
     |
1637 | unsafe fn xmlXPathDebugDumpNodeList(mut output: *mut FILE,
     |                                     ----^^^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1639:48
     |
1639 | ...                   mut depth: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1668:36
     |
1668 | unsafe fn xmlXPathDebugDumpNodeSet(mut output: *mut FILE,
     |                                    ----^^^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1669:47
     |
1669 | ...                   mut cur: xmlNodeSetPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1670:47
     |
1670 | ...                   mut depth: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1709:38
     |
1709 | unsafe fn xmlXPathDebugDumpValueTree(mut output: *mut FILE,
     |                                      ----^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1710:49
     |
1710 | ...                   mut cur: xmlNodeSetPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1711:49
     |
1711 | ...                   mut depth: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1744:40
     |
1744 | unsafe fn xmlXPathDebugDumpLocationSet(mut output: *mut FILE,
     |                                        ----^^^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1745:51
     |
1745 | ...                   mut cur: xmlLocationSetPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1746:51
     |
1746 | ...                   mut depth: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1790:45
     |
1790 | pub unsafe fn xmlXPathDebugDumpObject_rust2(mut output: *mut FILE,
     |                                             ----^^^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1791:50
     |
1791 | ...                   mut cur: xmlXPathObjectPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1792:50
     |
1792 | ...                   mut depth: libc::c_int,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1793:50
     |
1793 | ...                   mut flag: libc::c_int) {
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1963:35
     |
1963 | unsafe fn xmlXPathDebugDumpStepOp(mut output: *mut FILE,
     |                                   ----^^^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1964:46
     |
1964 | ...                   mut comp: xmlXPathCompExprPtr,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1965:46
     |
1965 | ...                   mut op: xmlXPathStepOpPtr,
     |                       ----^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1966:46
     |
1966 | ...                   mut depth: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:1967:9
     |
1967 |     let mut current_block: u64;
     |         ----^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2073:17
     |
2073 |             let mut axis: xmlXPathAxisVal = (*op).value as xmlXPathAxisVal;
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2074:17
     |
2074 |             let mut test: xmlXPathTestVal = (*op).value2 as xmlXPathTestVal;
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2075:17
     |
2075 |             let mut type_0: xmlXPathTypeVal = (*op).value3 as xmlXPathTypeVal;
     |                 ----^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2076:17
     |
2076 |             let mut prefix: *const xmlChar = (*op).value4 as *const xmlChar;
     |                 ----^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2077:17
     |
2077 |             let mut name: *const xmlChar = (*op).value5 as *const xmlChar;
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2216:17
     |
2216 |             let mut object: xmlXPathObjectPtr =
     |                 ----^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2223:17
     |
2223 |             let mut prefix_0: *const xmlChar = (*op).value5 as *const xmlChar;
     |                 ----^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2224:17
     |
2224 |             let mut name_0: *const xmlChar = (*op).value4 as *const xmlChar;
     |                 ----^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2237:17
     |
2237 |             let mut nbargs: libc::c_int = (*op).value;
     |                 ----^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2238:17
     |
2238 |             let mut prefix_1: *const xmlChar = (*op).value5 as *const xmlChar;
     |                 ----^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2239:17
     |
2239 |             let mut name_1: *const xmlChar = (*op).value4 as *const xmlChar;
     |                 ----^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2305:41
     |
2305 | pub unsafe fn xmlXPathDebugDumpCompExpr(mut output: *mut FILE,
     |                                         ----^^^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2306:52
     |
2306 | ...                   mut comp:
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2308:52
     |
2308 | ...                   mut depth: libc::c_int,
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2309:49
     |
2309 | ...                   mut flag: libc::c_int) {
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2415:39
     |
2415 | unsafe fn xmlXPathCacheFreeObjectList(mut list:
     |                                       ----^^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2441:29
     |
2441 | unsafe fn xmlXPathFreeCache(mut cache: xmlXPathContextCachePtr) {
     |                             ----^^^^^
     |                             |
     |                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2484:50
     |
2484 | ...                   mut active: libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2486:50
     |
2486 | ...                   mut options: libc::c_int)
     |                       ----^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2521:36
     |
2521 | unsafe fn xmlXPathCacheWrapNodeSet(mut ctxt: xmlXPathContextPtr,
     |                                    ----^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2522:47
     |
2522 | ...                   mut val: xmlNodeSetPtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2552:35
     |
2552 | unsafe fn xmlXPathCacheWrapString(mut ctxt: xmlXPathContextPtr,
     |                                   ----^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2553:46
     |
2553 | ...                   mut val: *mut xmlChar)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2601:46
     |
2601 | ...                   mut val: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2670:35
     |
2670 | unsafe fn xmlXPathCacheNewCString(mut ctxt: xmlXPathContextPtr,
     |                                   ----^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2671:46
     |
2671 | ...                   mut val: *const libc::c_char)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2714:34
     |
2714 | unsafe fn xmlXPathCacheNewString(mut ctxt: xmlXPathContextPtr,
     |                                  ----^^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2715:45
     |
2715 | ...                   mut val: *const xmlChar)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2770:35
     |
2770 | unsafe fn xmlXPathCacheNewBoolean(mut ctxt: xmlXPathContextPtr,
     |                                   ----^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2771:46
     |
2771 | ...                   mut val: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2814:33
     |
2814 | unsafe fn xmlXPathCacheNewFloat(mut ctxt: xmlXPathContextPtr,
     |                                 ----^^^^
     |                                 |
     |                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2815:44
     |
2815 | ...                   mut val: libc::c_double)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2859:38
     |
2859 | unsafe fn xmlXPathCacheConvertString(mut ctxt: xmlXPathContextPtr,
     |                                      ----^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2860:49
     |
2860 | ...                   mut val: xmlXPathObjectPtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2908:35
     |
2908 | unsafe fn xmlXPathCacheObjectCopy(mut ctxt: xmlXPathContextPtr,
     |                                   ----^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2909:46
     |
2909 | ...                   mut val: xmlXPathObjectPtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2939:39
     |
2939 | unsafe fn xmlXPathCacheConvertBoolean(mut ctxt: xmlXPathContextPtr,
     |                                       ----^^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2940:50
     |
2940 | ...                   mut val: xmlXPathObjectPtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2965:38
     |
2965 | unsafe fn xmlXPathCacheConvertNumber(mut ctxt: xmlXPathContextPtr,
     |                                      ----^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:2966:49
     |
2966 | ...                   mut val: xmlXPathObjectPtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3007:39
     |
3007 | ...                   mut frame: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3061:36
     |
3061 | ...                   mut value: xmlXPathObjectPtr)
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3368:32
     |
3368 | unsafe fn xmlXPathFormatNumber(mut number: libc::c_double,
     |                                ----^^^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3369:43
     |
3369 | ...                   mut buffer: *mut libc::c_char,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3370:43
     |
3370 | ...                   mut buffersize: libc::c_int) {
     |                       ----^^^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3410:21
     |
3410 |                 let mut value: libc::c_int = number as libc::c_int;
     |                     ----^^^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3585:37
     |
3585 | pub unsafe fn xmlXPathOrderDocElems(mut doc: xmlDocPtr)
     |                                     ----^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3772:35
     |
3772 | pub unsafe fn xmlXPathNodeSetSort(mut set: xmlNodeSetPtr) {
     |                                   ----^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3789:32
     |
3789 | unsafe fn xmlXPathNodeSetDupNs(mut node: xmlNodePtr,
     |                                ----^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3790:43
     |
3790 | ...                   mut ns: xmlNsPtr) -> xmlNodePtr {
     |                       ----^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3835:37
     |
3835 | pub unsafe fn xmlXPathNodeSetFreeNs(mut ns: xmlNsPtr) {
     |                                     ----^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3866:37
     |
3866 | pub unsafe fn xmlXPathNodeSetCreate(mut val: xmlNodePtr)
     |                                     ----^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3904:17
     |
3904 |             let mut ns: xmlNsPtr = val as xmlNsPtr;
     |                 ----^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3932:39
     |
3932 | pub unsafe fn xmlXPathNodeSetContains(mut cur: xmlNodeSetPtr,
     |                                       ----^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3933:50
     |
3933 | ...                   mut val: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3978:47
     |
3978 | ...                   mut node: xmlNodePtr,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:3979:47
     |
3979 | ...                   mut ns: xmlNsPtr)
     |                       ----^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4075:45
     |
4075 | ...                   mut val: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4142:13
     |
4142 |         let mut ns: xmlNsPtr = val as xmlNsPtr;
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4168:51
     |
4168 | ...                   mut val: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4224:13
     |
4224 |         let mut ns: xmlNsPtr = val as xmlNsPtr;
     |             ----^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4250:47
     |
4250 | ...                   mut val2: xmlNodeSetPtr)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4350:21
     |
4350 |                 let mut ns: xmlNsPtr = n2 as xmlNsPtr;
     |                     ----^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4584:45
     |
4584 | ...                   mut val: xmlNodePtr) {
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4648:35
     |
4648 | pub unsafe fn xmlXPathFreeNodeSet(mut obj: xmlNodeSetPtr) {
     |                                   ----^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4679:50
     |
4679 | ...                   mut pos: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4680:50
     |
4680 | ...                   mut hasNsNodes:
     |                       ----^^^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4710:32
     |
4710 | unsafe fn xmlXPathNodeSetClear(mut set: xmlNodeSetPtr,
     |                                ----^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4711:43
     |
4711 | ...                   mut hasNsNodes: libc::c_int) {
     |                       ----^^^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4753:33
     |
4753 | unsafe fn xmlXPathFreeValueTree(mut obj: xmlNodeSetPtr) {
     |                                 ----^^^
     |                                 |
     |                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4786:34
     |
4786 | pub unsafe fn xmlXPathNewNodeSet(mut val: xmlNodePtr)
     |                                  ----^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4818:36
     |
4818 | pub unsafe fn xmlXPathNewValueTree(mut val: xmlNodePtr)
     |                                    ----^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4849:38
     |
4849 | pub unsafe fn xmlXPathNewNodeSetList(mut val: xmlNodeSetPtr)
     |                                      ----^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4886:35
     |
4886 | pub unsafe fn xmlXPathWrapNodeSet(mut val: xmlNodeSetPtr)
     |                                   ----^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4913:39
     |
4913 | pub unsafe fn xmlXPathFreeNodeSetList(mut obj: xmlXPathObjectPtr) {
     |                                       ----^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4929:34
     |
4929 | pub unsafe fn xmlXPathDifference(mut nodes1: xmlNodeSetPtr,
     |                                  ----^^^^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4930:45
     |
4930 | ...                   mut nodes2: xmlNodeSetPtr)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4976:36
     |
4976 | pub unsafe fn xmlXPathIntersection(mut nodes1: xmlNodeSetPtr,
     |                                    ----^^^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4977:47
     |
4977 | ...                   mut nodes2: xmlNodeSetPtr)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:4979:9
     |
4979 |     let mut ret: xmlNodeSetPtr = xmlXPathNodeSetCreate(0 as xmlNodePtr);
     |         ----^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5021:38
     |
5021 | pub unsafe fn xmlXPathDistinctSorted(mut nodes: xmlNodeSetPtr)
     |                                      ----^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5076:32
     |
5076 | pub unsafe fn xmlXPathDistinct(mut nodes: xmlNodeSetPtr)
     |                                ----^^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5097:36
     |
5097 | pub unsafe fn xmlXPathHasSameNodes(mut nodes1: xmlNodeSetPtr,
     |                                    ----^^^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5098:47
     |
5098 | ...                   mut nodes2: xmlNodeSetPtr)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5137:41
     |
5137 | pub unsafe fn xmlXPathNodeLeadingSorted(mut nodes: xmlNodeSetPtr,
     |                                         ----^^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5138:52
     |
5138 | ...                   mut node: xmlNodePtr)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5182:35
     |
5182 | pub unsafe fn xmlXPathNodeLeading(mut nodes: xmlNodeSetPtr,
     |                                   ----^^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5183:46
     |
5183 | ...                   mut node: xmlNodePtr)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5201:37
     |
5201 | pub unsafe fn xmlXPathLeadingSorted(mut nodes1: xmlNodeSetPtr,
     |                                     ----^^^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5202:48
     |
5202 | ...                   mut nodes2: xmlNodeSetPtr)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5235:31
     |
5235 | pub unsafe fn xmlXPathLeading(mut nodes1: xmlNodeSetPtr,
     |                               ----^^^^^^
     |                               |
     |                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5236:42
     |
5236 | ...                   mut nodes2: xmlNodeSetPtr)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5273:42
     |
5273 | pub unsafe fn xmlXPathNodeTrailingSorted(mut nodes: xmlNodeSetPtr,
     |                                          ----^^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5274:53
     |
5274 | ...                   mut node: xmlNodePtr)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5321:36
     |
5321 | pub unsafe fn xmlXPathNodeTrailing(mut nodes: xmlNodeSetPtr,
     |                                    ----^^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5322:47
     |
5322 | ...                   mut node: xmlNodePtr)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5340:38
     |
5340 | pub unsafe fn xmlXPathTrailingSorted(mut nodes1: xmlNodeSetPtr,
     |                                      ----^^^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5341:49
     |
5341 | ...                   mut nodes2: xmlNodeSetPtr)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5374:32
     |
5374 | pub unsafe fn xmlXPathTrailing(mut nodes1: xmlNodeSetPtr,
     |                                ----^^^^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5375:43
     |
5375 | ...                   mut nodes2: xmlNodeSetPtr)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5415:36
     |
5415 | pub unsafe fn xmlXPathRegisterFunc(mut ctxt: xmlXPathContextPtr,
     |                                    ----^^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5416:47
     |
5416 | ...                   mut name: *const xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5417:47
     |
5417 | ...                   mut f: xmlXPathFunction)
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5434:49
     |
5434 | ...                   mut name: *const xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5435:49
     |
5435 | ...                   mut ns_uri: *const xmlChar,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5436:49
     |
5436 | ...                   mut f: xmlXPathFunction)
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5465:53
     |
5465 | ...                   mut f:
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5467:53
     |
5467 | ...                   mut funcCtxt:
     |                       ----^^^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5484:38
     |
5484 | pub unsafe fn xmlXPathFunctionLookup(mut ctxt: xmlXPathContextPtr,
     |                                      ----^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5485:49
     |
5485 | ...                   mut name: *const xmlChar)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5511:40
     |
5511 | pub unsafe fn xmlXPathFunctionLookupNS(mut ctxt:
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5513:51
     |
5513 | ...                   mut name: *const xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5514:51
     |
5514 | ...                   mut ns_uri: *const xmlChar)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5565:40
     |
5565 | pub unsafe fn xmlXPathRegisterVariable(mut ctxt:
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5567:51
     |
5567 | ...                   mut name: *const xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5568:51
     |
5568 | ...                   mut value:
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5588:53
     |
5588 | ...                   mut name: *const xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5589:53
     |
5589 | ...                   mut ns_uri:
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5591:53
     |
5591 | ...                   mut value:
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5705:57
     |
5705 | ...                   mut f:
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5707:57
     |
5707 | ...                   mut data:
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5724:38
     |
5724 | pub unsafe fn xmlXPathVariableLookup(mut ctxt: xmlXPathContextPtr,
     |                                      ----^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5725:49
     |
5725 | ...                   mut name: *const xmlChar)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5751:40
     |
5751 | pub unsafe fn xmlXPathVariableLookupNS(mut ctxt:
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5753:51
     |
5753 | ...                   mut name: *const xmlChar,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5754:51
     |
5754 | ...                   mut ns_uri: *const xmlChar)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5804:45
     |
5804 | ...                   mut prefix: *const xmlChar,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5805:45
     |
5805 | ...                   mut ns_uri: *const xmlChar)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5845:38
     |
5845 | pub unsafe fn xmlXPathNsLookup_rust2(mut ctxt: xmlXPathContextPtr,
     |                                      ----^^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5846:43
     |
5846 | ...                   mut prefix: *const xmlChar, mut flag: libc::c_int)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5846:71
     |
5846 | ...                   mut prefix: *const xmlChar, mut flag: libc::c_int)
     |                                                   ----^^^^
     |                                                   |
     |                                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5905:32
     |
5905 | pub unsafe fn xmlXPathNewFloat(mut val: libc::c_double)
     |                                ----^^^
     |                                |
     |                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5933:34
     |
5933 | pub unsafe fn xmlXPathNewBoolean(mut val: libc::c_int)
     |                                  ----^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5961:33
     |
5961 | pub unsafe fn xmlXPathNewString(mut val: *const xmlChar)
     |                                 ----^^^
     |                                 |
     |                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:5995:34
     |
5995 | pub unsafe fn xmlXPathWrapString(mut val: *mut xmlChar)
     |                                  ----^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6023:34
     |
6023 | pub unsafe fn xmlXPathNewCString(mut val: *const libc::c_char)
     |                                  ----^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6051:35
     |
6051 | pub unsafe fn xmlXPathWrapCString(mut val: *mut libc::c_char)
     |                                   ----^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6064:36
     |
6064 | pub unsafe fn xmlXPathWrapExternal(mut val: *mut libc::c_void)
     |                                    ----^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6092:34
     |
6092 | pub unsafe fn xmlXPathObjectCopy(mut val: xmlXPathObjectPtr)
     |                                  ----^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6118:17
     |
6118 |             let mut loc: xmlLocationSetPtr = (*val).user as xmlLocationSetPtr;
     |                 ----^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6174:46
     |
6174 | unsafe extern "C" fn xmlXPathFreeObjectEntry(mut obj: *mut libc::c_void,
     |                                              ----^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6175:46
     |
6175 | ...                   mut name: *const xmlChar) {
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6185:33
     |
6185 | unsafe fn xmlXPathReleaseObject(mut ctxt: xmlXPathContextPtr,
     |                                 ----^^^^
     |                                 |
     |                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6433:43
     |
6433 | pub unsafe fn xmlXPathCastBooleanToString(mut val: libc::c_int)
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6456:42
     |
6456 | pub unsafe fn xmlXPathCastNumberToString(mut val: libc::c_double)
     |                                          ----^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6502:40
     |
6502 | pub unsafe fn xmlXPathCastNodeToString(mut node: xmlNodePtr)
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6522:43
     |
6522 | pub unsafe fn xmlXPathCastNodeSetToString(mut ns: xmlNodeSetPtr)
     |                                           ----^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6543:42
     |
6543 | pub unsafe fn xmlXPathCastToString_rust2(mut val: xmlXPathObjectPtr,mut flag: libc::c_int)
     |                                          ----^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6543:69
     |
6543 | pub unsafe fn xmlXPathCastToString_rust2(mut val: xmlXPathObjectPtr,mut flag: libc::c_int)
     |                                                                     ----^^^^
     |                                                                     |
     |                                                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6600:43
     |
6600 | pub unsafe fn xmlXPathConvertString_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6600:71
     |
6600 | pub unsafe fn xmlXPathConvertString_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                                                       ----^^^^
     |                                                                       |
     |                                                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6652:43
     |
6652 | pub unsafe fn xmlXPathCastBooleanToNumber(mut val: libc::c_int)
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6666:42
     |
6666 | pub unsafe fn xmlXPathCastStringToNumber(mut val: *const xmlChar)
     |                                          ----^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6679:40
     |
6679 | pub unsafe fn xmlXPathCastNodeToNumber(mut node: xmlNodePtr)
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6699:43
     |
6699 | pub unsafe fn xmlXPathCastNodeSetToNumber(mut ns: xmlNodeSetPtr)
     |                                           ----^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6718:42
     |
6718 | pub unsafe fn xmlXPathCastToNumber_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                          ----^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6718:70
     |
6718 | pub unsafe fn xmlXPathCastToNumber_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                                                      ----^^^^
     |                                                                      |
     |                                                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6766:37
     |
6766 | pub unsafe fn xmlXPathConvertNumber(mut val: xmlXPathObjectPtr)
     |                                     ----^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6790:43
     |
6790 | pub unsafe fn xmlXPathCastNumberToBoolean(mut val: libc::c_double)
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6804:43
     |
6804 | pub unsafe fn xmlXPathCastStringToBoolean(mut val: *const xmlChar)
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6820:44
     |
6820 | pub unsafe fn xmlXPathCastNodeSetToBoolean(mut ns: xmlNodeSetPtr)
     |                                            ----^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6836:43
     |
6836 | pub unsafe fn xmlXPathCastToBoolean_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6836:71
     |
6836 | pub unsafe fn xmlXPathCastToBoolean_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                                                       ----^^^^
     |                                                                       |
     |                                                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6886:38
     |
6886 | pub unsafe fn xmlXPathConvertBoolean(mut val: xmlXPathObjectPtr)
     |                                      ----^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6915:34
     |
6915 | pub unsafe fn xmlXPathNewContext(mut doc: xmlDocPtr, mut flag: libc::c_int)
     |                                  ----^^^
     |                                  |
     |                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6915:54
     |
6915 | pub unsafe fn xmlXPathNewContext(mut doc: xmlDocPtr, mut flag: libc::c_int)
     |                                                      ----^^^^
     |                                                      |
     |                                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6962:35
     |
6962 | pub unsafe fn xmlXPathFreeContext(mut ctxt: xmlXPathContextPtr) {
     |                                   ----^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6991:40
     |
6991 | pub unsafe fn xmlXPathNewParserContext(mut str: *const xmlChar,
     |                                        ----^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:6992:51
     |
6992 | ...                   mut ctxt:
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7033:37
     |
7033 | unsafe fn xmlXPathCompParserContext(mut comp: xmlXPathCompExprPtr,
     |                                     ----^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7034:48
     |
7034 | ...                   mut ctxt: xmlXPathContextPtr)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7079:81
     |
7079 | ...                   xmlXPathParserContextPtr,mut flag: libc::c_int) {
     |                                                ----^^^^
     |                                                |
     |                                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7238:30
     |
7238 | unsafe fn xmlXPathStringHash(mut string: *const xmlChar)
     |                              ----^^^^^^
     |                              |
     |                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7273:39
     |
7273 | unsafe fn xmlXPathCompareNodeSetFloat(mut ctxt:
     |                                       ----^^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7275:50
     |
7275 | ...                   mut inf: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7276:50
     |
7276 | ...                   mut strict: libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7277:50
     |
7277 | ...                   mut arg: xmlXPathObjectPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7278:50
     |
7278 | ...                   mut f: xmlXPathObjectPtr)
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7337:40
     |
7337 | unsafe fn xmlXPathCompareNodeSetString(mut ctxt:
     |                                        ----^^^^
     |                                        |
     |                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7339:51
     |
7339 | ...                   mut inf: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7340:51
     |
7340 | ...                   mut strict: libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7341:51
     |
7341 | ...                   mut arg: xmlXPathObjectPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7342:51
     |
7342 | ...                   mut s: xmlXPathObjectPtr)
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7407:35
     |
7407 | unsafe fn xmlXPathCompareNodeSets(mut inf: libc::c_int,
     |                                   ----^^^
     |                                   |
     |                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7408:46
     |
7408 | ...                   mut strict: libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7409:46
     |
7409 | ...                   mut arg1: xmlXPathObjectPtr,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7410:46
     |
7410 | ...                   mut arg2: xmlXPathObjectPtr)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7528:39
     |
7528 | unsafe fn xmlXPathCompareNodeSetValue(mut ctxt:
     |                                       ----^^^^
     |                                       |
     |                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7530:50
     |
7530 | ...                   mut inf: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7531:50
     |
7531 | ...                   mut strict: libc::c_int,
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7532:50
     |
7532 | ...                   mut arg: xmlXPathObjectPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7533:50
     |
7533 | ...                   mut val: xmlXPathObjectPtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7587:38
     |
7587 | unsafe fn xmlXPathEqualNodeSetString(mut arg: xmlXPathObjectPtr,
     |                                      ----^^^
     |                                      |
     |                                      help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7588:49
     |
7588 | ...                   mut str: *const xmlChar,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7589:49
     |
7589 | ...                   mut neq: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7660:37
     |
7660 | unsafe fn xmlXPathEqualNodeSetFloat(mut ctxt:
     |                                     ----^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7662:48
     |
7662 | ...                   mut arg: xmlXPathObjectPtr,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7663:48
     |
7663 | ...                   mut f: libc::c_double,
     |                       ----^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7664:48
     |
7664 | ...                   mut neq: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7726:33
     |
7726 | unsafe fn xmlXPathEqualNodeSets(mut arg1: xmlXPathObjectPtr,
     |                                 ----^^^^
     |                                 |
     |                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7727:44
     |
7727 | ...                   mut arg2: xmlXPathObjectPtr,
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7728:44
     |
7728 | ...                   mut neq: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7911:37
     |
7911 | unsafe fn xmlXPathEqualValuesCommon(mut ctxt:
     |                                     ----^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:7962:17
     |
7962 |             let mut current_block_37: u64;
     |                 ----^^^^^^^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8139:41
     |
8139 | pub unsafe fn xmlXPathEqualValues_rust2(mut ctxt:
     |                                         ----^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8141:49
     |
8141 | ...                   mut flag: libc::c_int)
     |                       ----^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8253:44
     |
8253 | pub unsafe fn xmlXPathNotEqualValues_rust2(mut ctxt:
     |                                            ----^^^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8254:79
     |
8254 | ...                   xmlXPathParserContextPtr, mut flag: libc::c_int)
     |                                                 ----^^^^
     |                                                 |
     |                                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8384:37
     |
8384 | pub unsafe fn xmlXPathCompareValues(mut ctxt:
     |                                     ----^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8386:48
     |
8386 | ...                   mut inf: libc::c_int,
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8387:48
     |
8387 | ...                   mut strict: libc::c_int)
     |                       ----^^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8716:43
     |
8716 | pub unsafe extern "C" fn xmlXPathNextSelf(mut ctxt: xmlXPathParserContextPtr,
     |                                           ----^^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8717:43
     |
8717 | ...                   mut cur: xmlNodePtr) -> xmlNodePtr {
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8733:50
     |
8733 | pub unsafe extern "C" fn xmlXPathNextChild_rust2(mut ctxt: xmlXPathParserContextPtr,
     |                                                  ----^^^^
     |                                                  |
     |                                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8734:44
     |
8734 | ...                   mut cur: xmlNodePtr, mut flag: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8734:65
     |
8734 | ...                   mut cur: xmlNodePtr, mut flag: libc::c_int)
     |                                            ----^^^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8795:47
     |
8795 | unsafe extern "C" fn xmlXPathNextChildElement(mut ctxt:
     |                                               ----^^^^
     |                                               |
     |                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8875:49
     |
8875 | pub unsafe extern "C" fn xmlXPathNextDescendant(mut ctxt:
     |                                                 ----^^^^
     |                                                 |
     |                                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8946:55
     |
8946 | pub unsafe extern "C" fn xmlXPathNextDescendantOrSelf(mut ctxt:
     |                                                       ----^^^^
     |                                                       |
     |                                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8948:55
     |
8948 | ...                   mut cur: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8972:51
     |
8972 | pub unsafe extern "C" fn xmlXPathNextParent_rust2(mut ctxt:
     |                                                   ----^^^^
     |                                                   |
     |                                                   help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8974:45
     |
8974 | ...                   mut cur: xmlNodePtr,mut flag: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:8974:65
     |
8974 | ...                   mut cur: xmlNodePtr,mut flag: libc::c_int)
     |                                           ----^^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9006:25
     |
9006 |                     let mut att: xmlAttrPtr =
     |                         ----^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9012:25
     |
9012 |                     let mut ns: xmlNsPtr = (*(*ctxt).context).node as xmlNsPtr;
     |                         ----^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9054:25
     |
9054 |                     let mut att: xmlAttrPtr =
     |                         ----^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9060:25
     |
9060 |                     let mut ns: xmlNsPtr = (*(*ctxt).context).node as xmlNsPtr;
     |                         ----^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9090:53
     |
9090 | pub unsafe extern "C" fn xmlXPathNextAncestor_rust2(mut ctxt:
     |                                                     ----^^^^
     |                                                     |
     |                                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9092:47
     |
9092 | ...                   mut cur: xmlNodePtr, mut flag: libc::c_int)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9092:68
     |
9092 | ...                   mut cur: xmlNodePtr, mut flag: libc::c_int)
     |                                            ----^^^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9124:21
     |
9124 |                 let mut tmp: xmlAttrPtr =
     |                     ----^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9130:21
     |
9130 |                 let mut ns: xmlNsPtr = (*(*ctxt).context).node as xmlNsPtr;
     |                     ----^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9163:17
     |
9163 |             let mut att: xmlAttrPtr = cur as xmlAttrPtr;
     |                 ----^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9167:17
     |
9167 |             let mut ns_0: xmlNsPtr = cur as xmlNsPtr;
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9210:21
     |
9210 |                 let mut tmp: xmlAttrPtr =
     |                     ----^^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9216:21
     |
9216 |                 let mut ns: xmlNsPtr = (*(*ctxt).context).node as xmlNsPtr;
     |                     ----^^
     |                     |
     |                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9249:17
     |
9249 |             let mut att: xmlAttrPtr = cur as xmlAttrPtr;
     |                 ----^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9253:17
     |
9253 |             let mut ns_0: xmlNsPtr = cur as xmlNsPtr;
     |                 ----^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9283:53
     |
9283 | pub unsafe extern "C" fn xmlXPathNextAncestorOrSelf(mut ctxt:
     |                                                     ----^^^^
     |                                                     |
     |                                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9285:53
     |
9285 | ...                   mut cur: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9303:55
     |
9303 | pub unsafe extern "C" fn xmlXPathNextFollowingSibling(mut ctxt:
     |                                                       ----^^^^
     |                                                       |
     |                                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9305:55
     |
9305 | ...                   mut cur: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9331:55
     |
9331 | pub unsafe extern "C" fn xmlXPathNextPrecedingSibling(mut ctxt:
     |                                                       ----^^^^
     |                                                       |
     |                                                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9366:48
     |
9366 | pub unsafe extern "C" fn xmlXPathNextFollowing(mut ctxt:
     |                                                ----^^^^
     |                                                |
     |                                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9388:17
     |
9388 |             let mut ns: xmlNsPtr = cur as xmlNsPtr;
     |                 ----^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9419:30
     |
9419 | unsafe fn xmlXPathIsAncestor(mut ancestor: xmlNodePtr,
     |                              ----^^^^^^^^
     |                              |
     |                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9455:37
     |
9455 | pub unsafe fn xmlXPathNextPreceding(mut ctxt:
     |                                     ----^^^^
     |                                     |
     |                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9467:17
     |
9467 |             let mut ns: xmlNsPtr = cur as xmlNsPtr;
     |                 ----^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9531:17
     |
9531 |             let mut ns: xmlNsPtr = cur as xmlNsPtr;
     |                 ----^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9580:48
     |
9580 | ...                   mut cur: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9633:48
     |
9633 | pub unsafe extern "C" fn xmlXPathNextAttribute(mut ctxt:
     |                                                ----^^^^
     |                                                |
     |                                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9635:48
     |
9635 | ...                   mut cur: xmlNodePtr)
     |                       ----^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9668:28
     |
9668 | pub unsafe fn xmlXPathRoot(mut ctxt: xmlXPathParserContextPtr) {
     |                            ----^^^^
     |                            |
     |                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9693:53
     |
9693 | pub unsafe extern "C" fn xmlXPathLastFunction_rust2(mut ctxt:
     |                                                     ----^^^^
     |                                                     |
     |                                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9695:47
     |
9695 | ...                   mut nargs: libc::c_int, mut flag: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9695:71
     |
9695 | ...                   mut nargs: libc::c_int, mut flag: libc::c_int) {
     |                                               ----^^^^
     |                                               |
     |                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9735:57
     |
9735 | pub unsafe extern "C" fn xmlXPathPositionFunction_rust2(mut ctxt:
     |                                                         ----^^^^
     |                                                         |
     |                                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9737:51
     |
9737 | ...                   mut nargs: libc::c_int, mut flag: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9737:75
     |
9737 | ...                   mut nargs: libc::c_int, mut flag: libc::c_int) {
     |                                               ----^^^^
     |                                               |
     |                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9774:48
     |
9774 | pub unsafe extern "C" fn xmlXPathCountFunction(mut ctxt:
     |                                                ----^^^^
     |                                                |
     |                                                help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9776:48
     |
9776 | ...                   mut nargs: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9817:36
     |
9817 | unsafe fn xmlXPathGetElementsByIds(mut doc: xmlDocPtr,
     |                                    ----^^^
     |                                    |
     |                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9899:45
     |
9899 | pub unsafe extern "C" fn xmlXPathIdFunction(mut ctxt:
     |                                             ----^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9901:45
     |
9901 | ...                   mut nargs: libc::c_int) {
     |                       ----^^^^^
     |                       |
     |                       help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath.rs:9969:52
     |
9969 | pub unsafe extern "C" fn xmlXPathLocalNameFunction(mut ctxt:
     |                                                    ----^^^^
     |                                                    |
     |                                                    help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10007:13
      |
10007 |         let mut i: libc::c_int = 0 as libc::c_int;
      |             ----^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10064:55
      |
10064 | pub unsafe extern "C" fn xmlXPathNamespaceURIFunction(mut ctxt:
      |                                                       ----^^^^
      |                                                       |
      |                                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10103:13
      |
10103 |         let mut i: libc::c_int = 0 as libc::c_int;
      |             ----^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10154:43
      |
10154 | unsafe extern "C" fn xmlXPathNameFunction(mut ctxt: xmlXPathParserContextPtr,
      |                                           ----^^^^
      |                                           |
      |                                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10190:13
      |
10190 |         let mut i: libc::c_int = 0 as libc::c_int;
      |             ----^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10293:49
      |
10293 | pub unsafe extern "C" fn xmlXPathStringFunction(mut ctxt:
      |                                                 ----^^^^
      |                                                 |
      |                                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10295:49
      |
10295 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10333:55
      |
10333 | pub unsafe extern "C" fn xmlXPathStringLengthFunction(mut ctxt:
      |                                                       ----^^^^
      |                                                       |
      |                                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10335:55
      |
10335 | ...                   mut nargs:
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10394:49
      |
10394 | pub unsafe extern "C" fn xmlXPathConcatFunction(mut ctxt:
      |                                                 ----^^^^
      |                                                 |
      |                                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10459:51
      |
10459 | pub unsafe extern "C" fn xmlXPathContainsFunction(mut ctxt:
      |                                                   ----^^^^
      |                                                   |
      |                                                   help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10461:51
      |
10461 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10520:53
      |
10520 | pub unsafe extern "C" fn xmlXPathStartsWithFunction(mut ctxt:
      |                                                     ----^^^^
      |                                                     |
      |                                                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10522:53
      |
10522 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10601:52
      |
10601 | pub unsafe extern "C" fn xmlXPathSubstringFunction(mut ctxt:
      |                                                    ----^^^^
      |                                                    |
      |                                                    help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10603:52
      |
10603 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10702:13
      |
10702 |         let mut ret: *mut xmlChar =
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10728:58
      |
10728 | pub unsafe extern "C" fn xmlXPathSubstringBeforeFunction(mut ctxt:
      |                                                          ----^^^^
      |                                                          |
      |                                                          help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10730:58
      |
10730 | ...                   mut nargs:
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10791:57
      |
10791 | pub unsafe extern "C" fn xmlXPathSubstringAfterFunction(mut ctxt:
      |                                                         ----^^^^
      |                                                         |
      |                                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10793:57
      |
10793 | ...                   mut nargs:
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10855:52
      |
10855 | pub unsafe extern "C" fn xmlXPathNormalizeFunction(mut ctxt:
      |                                                    ----^^^^
      |                                                    |
      |                                                    help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10948:52
      |
10948 | pub unsafe extern "C" fn xmlXPathTranslateFunction(mut ctxt:
      |                                                    ----^^^^
      |                                                    |
      |                                                    help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:10950:52
      |
10950 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11069:50
      |
11069 | pub unsafe extern "C" fn xmlXPathBooleanFunction(mut ctxt:
      |                                                  ----^^^^
      |                                                  |
      |                                                  help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11071:50
      |
11071 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11103:46
      |
11103 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11135:47
      |
11135 | pub unsafe extern "C" fn xmlXPathTrueFunction(mut ctxt:
      |                                               ----^^^^
      |                                               |
      |                                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11137:47
      |
11137 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11159:48
      |
11159 | pub unsafe extern "C" fn xmlXPathFalseFunction(mut ctxt:
      |                                                ----^^^^
      |                                                |
      |                                                help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11161:48
      |
11161 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11196:47
      |
11196 | pub unsafe extern "C" fn xmlXPathLangFunction(mut ctxt:
      |                                               ----^^^^
      |                                               |
      |                                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11198:47
      |
11198 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11199:9
      |
11199 |     let mut current_block: u64;
      |         ----^^^^^^^^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11332:49
      |
11332 | pub unsafe extern "C" fn xmlXPathNumberFunction(mut ctxt:
      |                                                 ----^^^^
      |                                                 |
      |                                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11334:49
      |
11334 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11342:17
      |
11342 |             let mut content: *mut xmlChar =
      |                 ----^^^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11374:46
      |
11374 | pub unsafe extern "C" fn xmlXPathSumFunction(mut ctxt:
      |                                              ----^^^^
      |                                              |
      |                                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11376:46
      |
11376 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11425:48
      |
11425 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11460:53
      |
11460 | ...                   mut nargs: libc::c_int,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11461:53
      |
11461 | ...                   mut flag: libc::c_int) {
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11505:48
      |
11505 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11548:31
      |
11548 | unsafe fn xmlXPathCurrentChar(mut ctxt: xmlXPathParserContextPtr,
      |                               ----^^^^
      |                               |
      |                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11549:42
      |
11549 | ...                   mut len: *mut libc::c_int)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11551:9
      |
11551 |     let mut current_block: u64;
      |         ----^^^^^^^^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11759:41
      |
11759 | ...                   mut prefix: *mut *mut xmlChar)
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:11835:47
      |
11835 | ...                   mut qualified: libc::c_int)
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:12047:46
      |
12047 | pub unsafe fn xmlXPathStringEvalNumber_rust2(mut str: *const xmlChar, mut flag1: libc::c_int, mut flag2: libc::c_int)
      |                                              ----^^^
      |                                              |
      |                                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:12047:71
      |
12047 | pub unsafe fn xmlXPathStringEvalNumber_rust2(mut str: *const xmlChar, mut flag1: libc::c_int, mut flag2: libc::c_int)
      |                                                                       ----^^^^^
      |                                                                       |
      |                                                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:12047:95
      |
12047 | pub unsafe fn xmlXPathStringEvalNumber_rust2(mut str: *const xmlChar, mut flag1: libc::c_int, mut flag2: libc::c_int)
      |                                                                                               ----^^^^^
      |                                                                                               |
      |                                                                                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:12555:34
      |
12555 | pub unsafe fn xmlXPathIsNodeType(mut name: *const xmlChar)
      |                                  ----^^^^
      |                                  |
      |                                  help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:12644:17
      |
12644 |             let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |                 ----^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13134:13
      |
13134 |         let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13255:13
      |
13255 |         let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13316:13
      |
13316 |         let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13379:13
      |
13379 |         let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13451:13
      |
13451 |         let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13512:13
      |
13512 |         let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13558:42
      |
13558 | ...                   mut sort: libc::c_int) {
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13584:13
      |
13584 |         let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |             ----^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13637:44
      |
13637 | ...                   mut filter: libc::c_int) {
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13638:9
      |
13638 |     let mut op1: libc::c_int = (*(*ctxt).comp).last;
      |         ----^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13725:43
      |
13725 | ...                   mut test: *mut xmlXPathTestVal,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13726:43
      |
13726 | ...                   mut type_0: *mut xmlXPathTypeVal,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13727:43
      |
13727 | ...                   mut prefix: *mut *mut xmlChar,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:13918:30
      |
13918 | unsafe fn xmlXPathIsAxisName(mut name: *const xmlChar)
      |                              ----^^^^
      |                              |
      |                              help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14078:13
      |
14078 |         let mut current_block_91: u64;
      |             ----^^^^^^^^^^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14455:33
      |
14455 | unsafe fn xmlXPathNodeSetFilter(mut ctxt: xmlXPathParserContextPtr,
      |                                 ----^^^^
      |                                 |
      |                                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14457:44
      |
14457 | ...                   mut filterOpIndex: libc::c_int,
      |                       ----^^^^^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14458:44
      |
14458 | ...                   mut minPos: libc::c_int,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14459:44
      |
14459 | ...                   mut maxPos: libc::c_int,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14460:44
      |
14460 | ...                   mut hasNsNodes: libc::c_int) {
      |                       ----^^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14492:13
      |
14492 |         let mut node: xmlNodePtr = *(*set).nodeTab.offset(i as isize);
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14543:17
      |
14543 |             let mut node_0: xmlNodePtr = *(*set).nodeTab.offset(i as isize);
      |                 ----^^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14590:37
      |
14590 | unsafe fn xmlXPathLocationSetFilter(mut ctxt:
      |                                     ----^^^^
      |                                     |
      |                                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14593:48
      |
14593 | ...                   mut filterOpIndex: libc::c_int,
      |                       ----^^^^^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14594:48
      |
14594 | ...                   mut minPos: libc::c_int,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14595:48
      |
14595 | ...                   mut maxPos: libc::c_int) {
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14622:13
      |
14622 |         let mut contextNode: xmlNodePtr =
      |             ----^^^^^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14717:50
      |
14717 | ...                   mut op: xmlXPathStepOpPtr,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14718:50
      |
14718 | ...                   mut set: xmlNodeSetPtr,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14719:50
      |
14719 | ...                   mut minPos: libc::c_int,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14720:50
      |
14720 | ...                   mut maxPos: libc::c_int,
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14721:50
      |
14721 | ...                   mut hasNsNodes:
      |                       ----^^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14724:13
      |
14724 |         let mut comp: xmlXPathCompExprPtr = (*ctxt).comp;
      |             ----^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14757:41
      |
14757 | unsafe fn xmlXPathIsPositionalPredicate(mut ctxt:
      |                                         ----^^^^
      |                                         |
      |                                         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14759:52
      |
14759 | ...                   mut op: xmlXPathStepOpPtr,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14760:52
      |
14760 | ...                   mut maxPos:
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14793:13
      |
14793 |         let mut floatval: libc::c_double =
      |             ----^^^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14819:49
      |
14819 | ...                   mut op: xmlXPathStepOpPtr,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14822:49
      |
14822 | ...                   mut toBool: libc::c_int)
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14825:9
      |
14825 |     let mut axis: xmlXPathAxisVal = (*op).value as xmlXPathAxisVal;
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14826:9
      |
14826 |     let mut test: xmlXPathTestVal = (*op).value2 as xmlXPathTestVal;
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14827:9
      |
14827 |     let mut type_0: xmlXPathTypeVal = (*op).value3 as xmlXPathTypeVal;
      |         ----^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14828:9
      |
14828 |     let mut prefix: *const xmlChar = (*op).value4 as *const xmlChar;
      |         ----^^^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:14829:9
      |
14829 |     let mut name: *const xmlChar = (*op).value5 as *const xmlChar;
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:15937:53
      |
15937 | ...                   let mut attr: xmlAttrPtr =
      |                           ----^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:16053:57
      |
16053 | ...                   let mut ns: xmlNsPtr =
      |                           ----^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:16233:53
      |
16233 | ...                   let mut attr: xmlAttrPtr =
      |                           ----^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:16349:57
      |
16349 | ...                   let mut ns: xmlNsPtr =
      |                           ----^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:16529:53
      |
16529 | ...                   let mut attr: xmlAttrPtr =
      |                           ----^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:16645:57
      |
16645 | ...                   let mut ns: xmlNsPtr =
      |                           ----^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:16896:46
      |
16896 | ...                   mut op: xmlXPathStepOpPtr,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:16897:46
      |
16897 | ...                   mut first: *mut xmlNodePtr)
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:17094:45
      |
17094 | ...                   mut op: xmlXPathStepOpPtr,
      |                       ----^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:17095:45
      |
17095 | ...                   mut last: *mut xmlNodePtr)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:17951:29
      |
17951 |                         let mut f: libc::c_int =
      |                             ----^
      |                             |
      |                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18035:45
      |
18035 | ...                   let mut locset: xmlLocationSetPtr =
      |                           ----^^^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18101:17
      |
18101 |             let mut oldnode: xmlNodePtr = (*(*ctxt).context).node;
      |                 ----^^^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18102:17
      |
18102 |             let mut oldcs: libc::c_int = (*(*ctxt).context).contextSize;
      |                 ----^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18103:17
      |
18103 |             let mut oldpp: libc::c_int = (*(*ctxt).context).proximityPosition;
      |                 ----^^^^^
      |                 |
      |                 help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18183:41
      |
18183 | ...                   let mut rloc: xmlLocationSetPtr =
      |                           ----^^^^
      |                           |
      |                           help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18353:39
      |
18353 | unsafe fn xmlXPathCompOpEvalToBoolean(mut ctxt:
      |                                       ----^^^^
      |                                       |
      |                                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18356:50
      |
18356 | ...                   mut isPredicate: libc::c_int)
      |                       ----^^^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18448:44
      |
18448 | ...                   mut comp: xmlPatternPtr,
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18449:44
      |
18449 | ...                   mut resultSeq:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18451:44
      |
18451 | ...                   mut toBool: libc::c_int)
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18753:38
      |
18753 | ...                   mut toBool: libc::c_int) -> libc::c_int {
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18854:37
      |
18854 | pub unsafe fn xmlXPathEvalPredicate(mut ctxt: xmlXPathContextPtr,
      |                                     ----^^^^
      |                                     |
      |                                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18855:48
      |
18855 | ...                   mut res: xmlXPathObjectPtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18911:54
      |
18911 |  pub unsafe fn xmlXPathEvaluatePredicateResult_rust2(mut ctxt: xmlXPathParserContextPtr,
      |                                                      ----^^^^
      |                                                      |
      |                                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18912:57
      |
18912 | ...                   mut res: xmlXPathObjectPtr,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18913:57
      |
18913 | ...                   mut flag1: libc::c_int,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18914:57
      |
18914 | ...                   mut flag2: libc::c_int)
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18943:21
      |
18943 |                 let mut ptr: xmlLocationSetPtr = (*res).user as xmlLocationSetPtr;
      |                     ----^^^
      |                     |
      |                     help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18976:36
      |
18976 | unsafe fn xmlXPathTryStreamCompile(mut ctxt: xmlXPathContextPtr,
      |                                    ----^^^^
      |                                    |
      |                                    help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:18977:47
      |
18977 | ...                   mut str: *const xmlChar)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19085:38
      |
19085 | unsafe fn xmlXPathOptimizeExpression(mut pctxt:
      |                                      ----^^^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19088:9
      |
19088 |     let mut comp: xmlXPathCompExprPtr = (*pctxt).comp;
      |         ----^^^^
      |         |
      |         help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19098:13
      |
19098 |         let mut prevop: xmlXPathStepOpPtr =
      |             ----^^^^^^
      |             |
      |             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19172:46
      |
19172 | ...                   mut str: *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19173:45
      |
19173 | ...                   mut flag1: libc::c_int,
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19174:41
      |
19174 | ...                   mut flag2: libc::c_int)
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19242:31
      |
19242 | pub unsafe fn xmlXPathCompile(mut str: *const xmlChar)
      |                               ----^^^
      |                               |
      |                               help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19259:40
      |
19259 | unsafe fn xmlXPathCompiledEvalInternal(mut comp:
      |                                        ----^^^^
      |                                        |
      |                                        help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19261:51
      |
19261 | ...                   mut ctxt:
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19263:51
      |
19263 | ...                   mut resObjPtr:
      |                       ----^^^^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19265:51
      |
19265 | ...                   mut toBool: libc::c_int)
      |                       ----^^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19328:36
      |
19328 | pub unsafe fn xmlXPathCompiledEval(mut comp: xmlXPathCompExprPtr,
      |                                    ----^^^^
      |                                    |
      |                                    help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19329:47
      |
19329 | ...                   mut ctx: xmlXPathContextPtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19347:45
      |
19347 | pub unsafe fn xmlXPathCompiledEvalToBoolean(mut comp:
      |                                             ----^^^^
      |                                             |
      |                                             help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19349:56
      |
19349 | ...                   mut ctxt:
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19365:33
      |
19365 | ...                   mut flag1: libc::c_int, 
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19366:33
      |
19366 | ...                   mut flag2: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19440:28
      |
19440 | pub unsafe fn xmlXPathEval(mut str: *const xmlChar,
      |                            ----^^^
      |                            |
      |                            help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19441:39
      |
19441 | ...                   mut ctx: xmlXPathContextPtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19497:38
      |
19497 | pub unsafe fn xmlXPathSetContextNode(mut node: xmlNodePtr,
      |                                      ----^^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19520:32
      |
19520 | pub unsafe fn xmlXPathNodeEval(mut node: xmlNodePtr,
      |                                ----^^^^
      |                                |
      |                                help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19521:43
      |
19521 | ...                   mut str: *const xmlChar,
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19522:43
      |
19522 | ...                   mut ctx: xmlXPathContextPtr)
      |                       ----^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19541:38
      |
19541 | pub unsafe fn xmlXPathEvalExpression(mut str: *const xmlChar,
      |                                      ----^^^
      |                                      |
      |                                      help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19542:49
      |
19542 | ...                   mut ctxt: xmlXPathContextPtr)
      |                       ----^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19599:48
      |
19599 | unsafe extern "C" fn xmlXPathEscapeUriFunction(mut ctxt:
      |                                                ----^^^^
      |                                                |
      |                                                help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19601:48
      |
19601 | ...                   mut nargs: libc::c_int) {
      |                       ----^^^^^
      |                       |
      |                       help: remove this `mut`

warning: variable does not need to be mutable
     --> src/xpath.rs:19727:44
      |
19727 | pub unsafe fn xmlXPathRegisterAllFunctions(mut ctxt:
      |                                            ----^^^^
      |                                            |
      |                                            help: remove this `mut`

warning: variable does not need to be mutable
 --> src/xpath_rust.rs:2:48
  |
2 | pub extern "C" fn xmlXPathContextSetCache_rust(mut ctxt: xmlXPathContextPtr,
  |                                                ----^^^^
  |                                                |
  |                                                help: remove this `mut`

warning: variable does not need to be mutable
 --> src/xpath_rust.rs:3:5
  |
3 |     mut active: libc::c_int,
  |     ----^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/xpath_rust.rs:4:5
  |
4 |     mut value: libc::c_int,
  |     ----^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
 --> src/xpath_rust.rs:5:5
  |
5 |     mut options: libc::c_int)
  |     ----^^^^^^^
  |     |
  |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:14:33
   |
14 | pub extern "C" fn valuePop_rust(mut ctxt: xmlXPathParserContextPtr)
   |                                 ----^^^^
   |                                 |
   |                                 help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:23:34
   |
23 | pub extern "C" fn valuePush_rust(mut ctxt: xmlXPathParserContextPtr,
   |                                  ----^^^^
   |                                  |
   |                                  help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:24:5
   |
24 |     mut value: xmlXPathObjectPtr)
   |     ----^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:33:43
   |
33 | pub extern "C" fn xmlXPathPopBoolean_rust(mut ctxt:
   |                                           ----^^^^
   |                                           |
   |                                           help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:43:42
   |
43 | pub extern "C" fn xmlXPathPopNumber_rust(mut ctxt: xmlXPathParserContextPtr)
   |                                          ----^^^^
   |                                          |
   |                                          help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:52:42
   |
52 | pub extern "C" fn xmlXPathPopString_rust(mut ctxt: xmlXPathParserContextPtr)
   |                                          ----^^^^
   |                                          |
   |                                          help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:61:44
   |
61 | pub extern "C" fn xmlXPathPopExternal_rust(mut ctxt:
   |                                            ----^^^^
   |                                            |
   |                                            help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:71:46
   |
71 | pub extern "C" fn xmlXPathOrderDocElems_rust(mut doc: xmlDocPtr)
   |                                              ----^^^
   |                                              |
   |                                              help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:80:41
   |
80 | pub extern "C" fn xmlXPathCmpNodes_rust(mut node1: xmlNodePtr,
   |                                         ----^^^^^
   |                                         |
   |                                         help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:81:5
   |
81 |     mut node2: xmlNodePtr)
   |     ----^^^^^
   |     |
   |     help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:90:46
   |
90 | pub extern "C" fn xmlXPathNodeSetFreeNs_rust(mut ns: xmlNsPtr) {
   |                                              ----^^
   |                                              |
   |                                              help: remove this `mut`

warning: variable does not need to be mutable
  --> src/xpath_rust.rs:97:46
   |
97 | pub extern "C" fn xmlXPathNodeSetCreate_rust(mut val: xmlNodePtr)
   |                                              ----^^^
   |                                              |
   |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:106:48
    |
106 | pub extern "C" fn xmlXPathNodeSetContains_rust(mut cur: xmlNodeSetPtr,
    |                                                ----^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:107:5
    |
107 |     mut val: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:116:45
    |
116 | pub extern "C" fn xmlXPathNodeSetAddNs_rust(mut cur: xmlNodeSetPtr,
    |                                             ----^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:117:5
    |
117 |     mut node: xmlNodePtr,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:118:5
    |
118 |     mut ns: xmlNsPtr)
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:127:43
    |
127 | pub extern "C" fn xmlXPathNodeSetAdd_rust(mut cur: xmlNodeSetPtr,
    |                                           ----^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:128:5
    |
128 |     mut val: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:137:49
    |
137 | pub extern "C" fn xmlXPathNodeSetAddUnique_rust(mut cur: xmlNodeSetPtr,
    |                                                 ----^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:138:5
    |
138 |     mut val: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:147:45
    |
147 | pub extern "C" fn xmlXPathNodeSetMerge_rust(mut val1: xmlNodeSetPtr,
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:148:5
    |
148 |     mut val2: xmlNodeSetPtr)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:157:43
    |
157 | pub extern "C" fn xmlXPathNodeSetDel_rust(mut cur: xmlNodeSetPtr,
    |                                           ----^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:158:5
    |
158 |     mut val: xmlNodePtr) {
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:165:46
    |
165 | pub extern "C" fn xmlXPathNodeSetRemove_rust(mut cur: xmlNodeSetPtr,
    |                                              ----^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:166:5
    |
166 |     mut val: libc::c_int) {
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:173:44
    |
173 | pub extern "C" fn xmlXPathFreeNodeSet_rust(mut obj: xmlNodeSetPtr) {
    |                                            ----^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:180:47
    |
180 | pub extern "C" fn xmlXPathNewNodeSetList_rust(mut val: xmlNodeSetPtr)
    |                                               ----^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:189:43
    |
189 | pub extern "C" fn xmlXPathDifference_rust(mut nodes1: xmlNodeSetPtr,
    |                                           ----^^^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:190:5
    |
190 |     mut nodes2: xmlNodeSetPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:199:45
    |
199 | pub extern "C" fn xmlXPathIntersection_rust(mut nodes1: xmlNodeSetPtr,
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:200:5
    |
200 |     mut nodes2: xmlNodeSetPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:209:47
    |
209 | pub extern "C" fn xmlXPathDistinctSorted_rust(mut nodes: xmlNodeSetPtr)
    |                                               ----^^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:218:41
    |
218 | pub extern "C" fn xmlXPathDistinct_rust(mut nodes: xmlNodeSetPtr)
    |                                         ----^^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:227:45
    |
227 | pub extern "C" fn xmlXPathHasSameNodes_rust(mut nodes1: xmlNodeSetPtr,
    |                                             ----^^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:228:5
    |
228 |     mut nodes2: xmlNodeSetPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:237:50
    |
237 | pub extern "C" fn xmlXPathNodeLeadingSorted_rust(mut nodes: xmlNodeSetPtr,
    |                                                  ----^^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:238:5
    |
238 |     mut node: xmlNodePtr)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:247:44
    |
247 | pub extern "C" fn xmlXPathNodeLeading_rust(mut nodes: xmlNodeSetPtr,
    |                                            ----^^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:248:5
    |
248 |     mut node: xmlNodePtr)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:257:46
    |
257 | pub extern "C" fn xmlXPathLeadingSorted_rust(mut nodes1: xmlNodeSetPtr,
    |                                              ----^^^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:258:5
    |
258 |     mut nodes2: xmlNodeSetPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:267:40
    |
267 | pub extern "C" fn xmlXPathLeading_rust(mut nodes1: xmlNodeSetPtr,
    |                                        ----^^^^^^
    |                                        |
    |                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:268:5
    |
268 |     mut nodes2: xmlNodeSetPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:277:51
    |
277 | pub extern "C" fn xmlXPathNodeTrailingSorted_rust(mut nodes: xmlNodeSetPtr,
    |                                                   ----^^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:278:5
    |
278 |     mut node: xmlNodePtr)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:287:45
    |
287 | pub extern "C" fn xmlXPathNodeTrailing_rust(mut nodes: xmlNodeSetPtr,
    |                                             ----^^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:288:5
    |
288 |     mut node: xmlNodePtr)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:297:47
    |
297 | pub extern "C" fn xmlXPathTrailingSorted_rust(mut nodes1: xmlNodeSetPtr,
    |                                               ----^^^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:298:5
    |
298 |     mut nodes2: xmlNodeSetPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:307:41
    |
307 | pub extern "C" fn xmlXPathTrailing_rust(mut nodes1: xmlNodeSetPtr,
    |                                         ----^^^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:308:5
    |
308 |     mut nodes2: xmlNodeSetPtr)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:317:45
    |
317 | pub extern "C" fn xmlXPathRegisterFunc_rust(mut ctxt: xmlXPathContextPtr,
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:318:5
    |
318 |     mut name: *const xmlChar,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:319:5
    |
319 |     mut f: xmlXPathFunction)
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:328:36
    |
328 | pub extern "C" fn xmlXPathErr_rust(mut ctxt: xmlXPathParserContextPtr,
    |                                    ----^^^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:329:5
    |
329 |     mut error: libc::c_int) {
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:336:38
    |
336 | pub extern "C" fn xmlXPatherror_rust(mut ctxt: xmlXPathParserContextPtr,
    |                                      ----^^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:337:5
    |
337 |     mut file: *const libc::c_char,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:338:5
    |
338 |     mut line: libc::c_int,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:339:5
    |
339 |     mut no: libc::c_int) {
    |     ----^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:346:43
    |
346 | pub extern "C" fn xmlXPathPopNodeSet_rust(mut ctxt:
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:356:45
    |
356 | pub extern "C" fn xmlXPathFreeCompExpr_rust(mut comp: xmlXPathCompExprPtr) {
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:363:38
    |
363 | pub extern "C" fn xmlXPathIsNaN_rust(mut val: libc::c_double, mut flag: libc::c_int)
    |                                      ----^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:363:63
    |
363 | pub extern "C" fn xmlXPathIsNaN_rust(mut val: libc::c_double, mut flag: libc::c_int)
    |                                                               ----^^^^
    |                                                               |
    |                                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:372:38
    |
372 | pub extern "C" fn xmlXPathIsInf_rust(mut val: libc::c_double, mut flag: libc::c_int)
    |                                      ----^^^
    |                                      |
    |                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:372:63
    |
372 | pub extern "C" fn xmlXPathIsInf_rust(mut val: libc::c_double, mut flag: libc::c_int)
    |                                                               ----^^^^
    |                                                               |
    |                                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:381:48
    |
381 | pub extern "C" fn xmlXPathDebugDumpObject_rust(mut output: *mut FILE,
    |                                                ----^^^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:382:5
    |
382 |     mut cur: xmlXPathObjectPtr,
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:383:5
    |
383 |     mut depth: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:384:5
    |
384 |     mut flag: libc::c_int) {
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:401:49
    |
401 | pub extern "C" fn xmlXPathCastNodeToNumber_rust(mut node: xmlNodePtr)
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:413:52
    |
413 | pub extern "C" fn xmlXPathCastNodeSetToNumber_rust(mut ns: xmlNodeSetPtr)
    |                                                    ----^^
    |                                                    |
    |                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:426:49
    |
426 | pub extern "C" fn xmlXPathStringEvalNumber_rust(mut str: *const xmlChar, mut flag1: libc::c_int, mut flag2: libc::c_int)
    |                                                 ----^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:426:74
    |
426 | pub extern "C" fn xmlXPathStringEvalNumber_rust(mut str: *const xmlChar, mut flag1: libc::c_int, mut flag2: libc::c_int)
    |                                                                          ----^^^^^
    |                                                                          |
    |                                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:426:98
    |
426 | pub extern "C" fn xmlXPathStringEvalNumber_rust(mut str: *const xmlChar, mut flag1: libc::c_int, mut flag2: libc::c_int)
    |                                                                                                  ----^^^^^
    |                                                                                                  |
    |                                                                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:439:45
    |
439 | pub extern "C" fn xmlXPathCastToNumber_rust(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
    |                                             ----^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:439:73
    |
439 | pub extern "C" fn xmlXPathCastToNumber_rust(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
    |                                                                         ----^^^^
    |                                                                         |
    |                                                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:448:46
    |
448 | pub extern "C" fn xmlXPathCastToBoolean_rust(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
    |                                              ----^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:448:74
    |
448 | pub extern "C" fn xmlXPathCastToBoolean_rust(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
    |                                                                          ----^^^^
    |                                                                          |
    |                                                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:457:50
    |
457 | pub extern "C" fn xmlXPathDebugDumpCompExpr_rust(mut output: *mut FILE,
    |                                                  ----^^^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:458:5
    |
458 |     mut comp:
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:460:5
    |
460 |     mut depth: libc::c_int, mut flag: libc::c_int) {
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:460:29
    |
460 |     mut depth: libc::c_int, mut flag: libc::c_int) {
    |                             ----^^^^
    |                             |
    |                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:467:46
    |
467 | pub extern "C" fn xmlXPathNextNamespace_rust(mut ctxt:
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:469:1
    |
469 | mut cur: xmlNodePtr)
    | ----^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:478:51
    |
478 | pub extern "C" fn xmlXPathRegisterFuncLookup_rust(mut ctxt:
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:480:1
    |
480 | mut f:
    | ----^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:482:1
    |
482 | mut funcCtxt:
    | ----^^^^^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:490:47
    |
490 | pub extern "C" fn xmlXPathFunctionLookup_rust(mut ctxt: xmlXPathContextPtr,
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:491:5
    |
491 |     mut name: *const xmlChar)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:500:47
    |
500 | pub extern "C" fn xmlXPathRegisterFuncNS_rust(mut ctxt: xmlXPathContextPtr,
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:501:5
    |
501 |     mut name: *const xmlChar,
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:502:5
    |
502 |     mut ns_uri: *const xmlChar,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:503:5
    |
503 |     mut f: xmlXPathFunction)
    |     ----^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:512:55
    |
512 | pub extern "C" fn xmlXPathRegisteredFuncsCleanup_rust(mut ctxt:
    |                                                       ----^^^^
    |                                                       |
    |                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:520:51
    |
520 | pub extern "C" fn xmlXPathRegisterVariableNS_rust(mut ctxt:
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:522:1
    |
522 | mut name: *const xmlChar,
    | ----^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:523:1
    |
523 | mut ns_uri:
    | ----^^^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:525:1
    |
525 | mut value:
    | ----^^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:535:55
    |
535 | pub extern "C" fn xmlXPathRegisterVariableLookup_rust(mut ctxt:
    |                                                       ----^^^^
    |                                                       |
    |                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:537:1
    |
537 | mut f:
    | ----^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:539:1
    |
539 | mut data:
    | ----^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:547:47
    |
547 | pub extern "C" fn xmlXPathVariableLookup_rust(mut ctxt: xmlXPathContextPtr,
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:548:5
    |
548 |     mut name: *const xmlChar)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:557:49
    |
557 | pub extern "C" fn xmlXPathVariableLookupNS_rust(mut ctxt:
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:559:1
    |
559 | mut name: *const xmlChar,
    | ----^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:560:1
    |
560 | mut ns_uri: *const xmlChar)
    | ----^^^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:570:59
    |
570 | pub extern "C" fn xmlXPathRegisteredVariablesCleanup_rust(mut ctxt:
    |                                                           ----^^^^
    |                                                           |
    |                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:579:41
    |
579 | pub extern "C" fn xmlXPathNsLookup_rust(mut ctxt: xmlXPathContextPtr,
    |                                         ----^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:580:5
    |
580 |     mut prefix: *const xmlChar, mut flag: libc::c_int)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:580:33
    |
580 |     mut prefix: *const xmlChar, mut flag: libc::c_int)
    |                                 ----^^^^
    |                                 |
    |                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:589:43
    |
589 | pub extern "C" fn xmlXPathRegisterNs_rust(mut ctxt: xmlXPathContextPtr,
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:590:5
    |
590 |     mut prefix: *const xmlChar,
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:591:5
    |
591 |     mut ns_uri: *const xmlChar)
    |     ----^^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:600:49
    |
600 | pub extern "C" fn xmlXPathFunctionLookupNS_rust(mut ctxt:
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:602:1
    |
602 | mut name: *const xmlChar,
    | ----^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:603:1
    |
603 | mut ns_uri: *const xmlChar)
    | ----^^^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:612:51
    |
612 | pub extern "C" fn xmlXPathCastNumberToString_rust(mut val: libc::c_double)
    |                                                   ----^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:622:44
    |
622 | pub extern "C" fn xmlXPathFreeContext_rust(mut ctxt: xmlXPathContextPtr) {
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:629:47
    |
629 | pub extern "C" fn xmlXPathConvertBoolean_rust(mut val: xmlXPathObjectPtr)
    |                                               ----^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:638:41
    |
638 | pub extern "C" fn xmlXPathEvalExpr_rust(mut ctxt:
    |                                         ----^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:639:30
    |
639 |     xmlXPathParserContextPtr,mut flag1: libc::c_int, mut flag2: libc::c_int) {
    |                              ----^^^^^
    |                              |
    |                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:639:54
    |
639 |     xmlXPathParserContextPtr,mut flag1: libc::c_int, mut flag2: libc::c_int) {
    |                                                      ----^^^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:646:45
    |
646 | pub extern "C" fn xmlXPathCompiledEval_rust(mut comp: xmlXPathCompExprPtr,
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:647:5
    |
647 |     mut ctx: xmlXPathContextPtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:656:54
    |
656 | pub extern "C" fn xmlXPathCompiledEvalToBoolean_rust(mut comp:
    |                                                      ----^^^^
    |                                                      |
    |                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:658:1
    |
658 | mut ctxt:
    | ----^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:668:40
    |
668 | pub extern "C" fn xmlXPathCompile_rust(mut str: *const xmlChar)
    |                                        ----^^^
    |                                        |
    |                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:677:44
    |
677 | pub extern "C" fn xmlXPathCtxtCompile_rust(mut ctxt: xmlXPathContextPtr,
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:678:5
    |
678 |     mut str: *const xmlChar,
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:679:4
    |
679 |    mut flag1: libc::c_int,
    |    ----^^^^^
    |    |
    |    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:680:1
    |
680 | mut flag2: libc::c_int)
    | ----^^^^^
    | |
    | help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:689:49
    |
689 | pub extern "C" fn xmlXPathNewParserContext_rust(mut str: *const xmlChar,
    |                                                 ----^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:690:5
    |
690 |     mut ctxt:
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:700:41
    |
700 | pub extern "C" fn xmlXPathNodeEval_rust(mut node: xmlNodePtr,
    |                                         ----^^^^
    |                                         |
    |                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:701:5
    |
701 |     mut str: *const xmlChar, 
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:702:5
    |
702 |     mut ctx: xmlXPathContextPtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:711:47
    |
711 | pub extern "C" fn xmlXPathSetContextNode_rust(mut node: xmlNodePtr,
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:712:5
    |
712 |     mut ctx: xmlXPathContextPtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:721:46
    |
721 | pub extern "C" fn xmlXPathEvalPredicate_rust(mut ctxt: xmlXPathContextPtr, 
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:722:5
    |
722 |     mut res: xmlXPathObjectPtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:731:56
    |
731 | pub extern "C" fn xmlXPathEvaluatePredicateResult_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                                        ----^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:732:5
    |
732 |     mut res: xmlXPathObjectPtr,
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:733:5
    |
733 |     mut flag1: libc::c_int,
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:734:5
    |
734 |     mut flag2: libc::c_int)
    |     ----^^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:743:43
    |
743 | pub extern "C" fn xmlXPathIsNodeType_rust(mut name: *const xmlChar)
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:752:44
    |
752 | pub extern "C" fn xmlXPathParseNCName_rust(mut ctxt: xmlXPathParserContextPtr)
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:761:42
    |
761 | pub extern "C" fn xmlXPathParseName_rust(mut ctxt: xmlXPathParserContextPtr)
    |                                          ----^^^^
    |                                          |
    |                                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:770:46
    |
770 | pub extern "C" fn xmlXPathRoundFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:770:82
    |
770 | pub extern "C" fn xmlXPathRoundFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                  ----^^^^^
    |                                                                                  |
    |                                                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:775:46
    |
775 | pub extern "C" fn xmlXPathFloorFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:775:82
    |
775 | pub extern "C" fn xmlXPathFloorFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                  ----^^^^^
    |                                                                                  |
    |                                                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:780:48
    |
780 | pub extern "C" fn xmlXPathCeilingFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int,
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:780:84
    |
780 | pub extern "C" fn xmlXPathCeilingFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int,
    |                                                                                    ----^^^^^
    |                                                                                    |
    |                                                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:781:5
    |
781 |     mut flag: libc::c_int) {
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:786:44
    |
786 | pub extern "C" fn xmlXPathSumFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:786:80
    |
786 | pub extern "C" fn xmlXPathSumFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                ----^^^^^
    |                                                                                |
    |                                                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:791:45
    |
791 | pub extern "C" fn xmlXPathNextAncestor_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:792:5
    |
792 |     mut cur: xmlNodePtr, mut flag: libc::c_int)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:792:26
    |
792 |     mut cur: xmlNodePtr, mut flag: libc::c_int)
    |                          ----^^^^
    |                          |
    |                          help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:801:51
    |
801 | pub extern "C" fn xmlXPathNextAncestorOrSelf_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:802:5
    |
802 |     mut cur: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:811:53
    |
811 | pub extern "C" fn xmlXPathNextFollowingSibling_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:812:5
    |
812 |     mut cur: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:821:53
    |
821 | pub extern "C" fn xmlXPathNextPrecedingSibling_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:822:5
    |
822 |     mut cur: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:831:46
    |
831 | pub extern "C" fn xmlXPathNextFollowing_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:832:5
    |
832 |     mut cur: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:841:46
    |
841 | pub extern "C" fn xmlXPathNextPreceding_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:842:5
    |
842 |     mut cur: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:851:46
    |
851 | pub extern "C" fn xmlXPathNextAttribute_rust(mut ctxt: xmlXPathParserContextPtr, 
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:852:5
    |
852 |     mut cur: xmlNodePtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:861:37
    |
861 | pub extern "C" fn xmlXPathRoot_rust(mut ctxt: xmlXPathParserContextPtr) {
    |                                     ----^^^^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:866:46
    |
866 | pub extern "C" fn xmlXPathCountFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:866:82
    |
866 | pub extern "C" fn xmlXPathCountFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                  ----^^^^^
    |                                                                                  |
    |                                                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:871:43
    |
871 | pub extern "C" fn xmlXPathIdFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                           ----^^^^
    |                                           |
    |                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:871:79
    |
871 | pub extern "C" fn xmlXPathIdFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                               ----^^^^^
    |                                                                               |
    |                                                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:876:50
    |
876 | pub extern "C" fn xmlXPathLocalNameFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:876:86
    |
876 | pub extern "C" fn xmlXPathLocalNameFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                      ----^^^^^
    |                                                                                      |
    |                                                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:881:53
    |
881 | pub extern "C" fn xmlXPathNamespaceURIFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:881:89
    |
881 | pub extern "C" fn xmlXPathNamespaceURIFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                         ----^^^^^
    |                                                                                         |
    |                                                                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:886:47
    |
886 | pub extern "C" fn xmlXPathStringFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:886:83
    |
886 | pub extern "C" fn xmlXPathStringFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                   ----^^^^^
    |                                                                                   |
    |                                                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:891:53
    |
891 | pub extern "C" fn xmlXPathStringLengthFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:891:89
    |
891 | pub extern "C" fn xmlXPathStringLengthFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                         ----^^^^^
    |                                                                                         |
    |                                                                                         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:896:47
    |
896 | pub extern "C" fn xmlXPathConcatFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:896:83
    |
896 | pub extern "C" fn xmlXPathConcatFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                   ----^^^^^
    |                                                                                   |
    |                                                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:901:49
    |
901 | pub extern "C" fn xmlXPathContainsFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                 ----^^^^
    |                                                 |
    |                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:901:85
    |
901 | pub extern "C" fn xmlXPathContainsFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                     ----^^^^^
    |                                                                                     |
    |                                                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:906:51
    |
906 | pub extern "C" fn xmlXPathStartsWithFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                   ----^^^^
    |                                                   |
    |                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:906:87
    |
906 | pub extern "C" fn xmlXPathStartsWithFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                       ----^^^^^
    |                                                                                       |
    |                                                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:911:50
    |
911 | pub extern "C" fn xmlXPathSubstringFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:911:86
    |
911 | pub extern "C" fn xmlXPathSubstringFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                      ----^^^^^
    |                                                                                      |
    |                                                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:916:56
    |
916 | pub extern "C" fn xmlXPathSubstringBeforeFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                        ----^^^^
    |                                                        |
    |                                                        help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:916:92
    |
916 | pub extern "C" fn xmlXPathSubstringBeforeFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                            ----^^^^^
    |                                                                                            |
    |                                                                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:921:50
    |
921 | pub extern "C" fn xmlXPathNormalizeFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:921:86
    |
921 | pub extern "C" fn xmlXPathNormalizeFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                      ----^^^^^
    |                                                                                      |
    |                                                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:926:50
    |
926 | pub extern "C" fn xmlXPathTranslateFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                  ----^^^^
    |                                                  |
    |                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:926:86
    |
926 | pub extern "C" fn xmlXPathTranslateFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                      ----^^^^^
    |                                                                                      |
    |                                                                                      help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:931:48
    |
931 | pub extern "C" fn xmlXPathBooleanFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                ----^^^^
    |                                                |
    |                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:931:84
    |
931 | pub extern "C" fn xmlXPathBooleanFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                    ----^^^^^
    |                                                                                    |
    |                                                                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:936:44
    |
936 | pub extern "C" fn xmlXPathNotFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                            ----^^^^
    |                                            |
    |                                            help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:936:80
    |
936 | pub extern "C" fn xmlXPathNotFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                ----^^^^^
    |                                                                                |
    |                                                                                help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:941:45
    |
941 | pub extern "C" fn xmlXPathTrueFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:941:81
    |
941 | pub extern "C" fn xmlXPathTrueFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                 ----^^^^^
    |                                                                                 |
    |                                                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:946:46
    |
946 | pub extern "C" fn xmlXPathFalseFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                              ----^^^^
    |                                              |
    |                                              help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:946:82
    |
946 | pub extern "C" fn xmlXPathFalseFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                  ----^^^^^
    |                                                                                  |
    |                                                                                  help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:951:45
    |
951 | pub extern "C" fn xmlXPathLangFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                             ----^^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:951:81
    |
951 | pub extern "C" fn xmlXPathLangFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                 ----^^^^^
    |                                                                                 |
    |                                                                                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:956:55
    |
956 | pub extern "C" fn xmlXPathSubstringAfterFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                       ----^^^^
    |                                                       |
    |                                                       help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:956:91
    |
956 | pub extern "C" fn xmlXPathSubstringAfterFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                           ----^^^^^
    |                                                                                           |
    |                                                                                           help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:961:47
    |
961 | pub extern "C" fn xmlXPathNumberFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                               ----^^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:961:83
    |
961 | pub extern "C" fn xmlXPathNumberFunction_rust(mut ctxt: xmlXPathParserContextPtr, mut nargs: libc::c_int) {
    |                                                                                   ----^^^^^
    |                                                                                   |
    |                                                                                   help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:966:37
    |
966 | pub extern "C" fn xmlXPathEval_rust(mut str: *const xmlChar, 
    |                                     ----^^^
    |                                     |
    |                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:967:5
    |
967 |     mut ctx: xmlXPathContextPtr)
    |     ----^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:976:47
    |
976 | pub extern "C" fn xmlXPathEvalExpression_rust(mut str: *const xmlChar, 
    |                                               ----^^^
    |                                               |
    |                                               help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:977:5
    |
977 |     mut ctxt: xmlXPathContextPtr)
    |     ----^^^^
    |     |
    |     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:987:53
    |
987 | pub extern "C" fn xmlXPathRegisterAllFunctions_rust(mut ctxt: xmlXPathContextPtr) {
    |                                                     ----^^^^
    |                                                     |
    |                                                     help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:992:45
    |
992 | pub extern "C" fn xmlXPathCastToString_rust(mut val: xmlXPathObjectPtr,mut flag: libc::c_int)
    |                                             ----^^^
    |                                             |
    |                                             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/xpath_rust.rs:992:72
    |
992 | pub extern "C" fn xmlXPathCastToString_rust(mut val: xmlXPathObjectPtr,mut flag: libc::c_int)
    |                                                                        ----^^^^
    |                                                                        |
    |                                                                        help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1001:46
     |
1001 | pub extern "C" fn xmlXPathConvertString_rust(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                              ----^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1001:74
     |
1001 | pub extern "C" fn xmlXPathConvertString_rust(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |                                                                          ----^^^^
     |                                                                          |
     |                                                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1010:53
     |
1010 | pub extern "C" fn xmlXPathNextDescendantOrSelf_rust(mut ctxt: xmlXPathParserContextPtr, 
     |                                                     ----^^^^
     |                                                     |
     |                                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1011:5
     |
1011 |     mut cur: xmlNodePtr)
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1020:47
     |
1020 | pub extern "C" fn xmlXPathNextDescendant_rust(mut ctxt: xmlXPathParserContextPtr, 
     |                                               ----^^^^
     |                                               |
     |                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1021:5
     |
1021 |     mut cur: xmlNodePtr)
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1030:43
     |
1030 | pub extern "C" fn xmlXPathNewContext_rust(mut doc: xmlDocPtr, mut flag: libc::c_int)
     |                                           ----^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1030:63
     |
1030 | pub extern "C" fn xmlXPathNewContext_rust(mut doc: xmlDocPtr, mut flag: libc::c_int)
     |                                                               ----^^^^
     |                                                               |
     |                                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1040:50
     |
1040 | pub extern "C" fn xmlXPathFreeParserContext_rust(mut ctxt:
     |                                                  ----^^^^
     |                                                  |
     |                                                  help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1041:30
     |
1041 |     xmlXPathParserContextPtr,mut flag: libc::c_int) {
     |                              ----^^^^
     |                              |
     |                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1046:44
     |
1046 | pub extern "C" fn xmlXPathEqualValues_rust(mut ctxt:
     |                                            ----^^^^
     |                                            |
     |                                            help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1048:4
     |
1048 |    mut flag: libc::c_int)
     |    ----^^^^
     |    |
     |    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1057:47
     |
1057 | pub extern "C" fn xmlXPathNotEqualValues_rust(mut ctxt:
     |                                               ----^^^^
     |                                               |
     |                                               help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1059:4
     |
1059 |    mut flag: libc::c_int)
     |    ----^^^^
     |    |
     |    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1068:42
     |
1068 | pub extern "C" fn xmlXPathNextChild_rust(mut ctxt: xmlXPathParserContextPtr,
     |                                          ----^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1069:5
     |
1069 |     mut cur: xmlNodePtr, mut flag: libc::c_int)
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1069:26
     |
1069 |     mut cur: xmlNodePtr, mut flag: libc::c_int)
     |                          ----^^^^
     |                          |
     |                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1078:43
     |
1078 | pub extern "C" fn xmlXPathNextParent_rust(mut ctxt: xmlXPathParserContextPtr,
     |                                           ----^^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1079:5
     |
1079 |     mut cur: xmlNodePtr, mut flag: libc::c_int)
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1079:26
     |
1079 |     mut cur: xmlNodePtr, mut flag: libc::c_int)
     |                          ----^^^^
     |                          |
     |                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1088:45
     |
1088 | pub extern "C" fn xmlXPathLastFunction_rust(mut ctxt:
     |                                             ----^^^^
     |                                             |
     |                                             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1090:1
     |
1090 | mut nargs: libc::c_int, mut flag: libc::c_int) {
     | ----^^^^^
     | |
     | help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1090:25
     |
1090 | mut nargs: libc::c_int, mut flag: libc::c_int) {
     |                         ----^^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1095:49
     |
1095 | pub extern "C" fn xmlXPathPositionFunction_rust(mut ctxt:
     |                                                 ----^^^^
     |                                                 |
     |                                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1097:1
     |
1097 | mut nargs: libc::c_int, mut flag: libc::c_int) {
     | ----^^^^^
     | |
     | help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1097:25
     |
1097 | mut nargs: libc::c_int, mut flag: libc::c_int) {
     |                         ----^^^^
     |                         |
     |                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1102:46
     |
1102 | pub extern "C" fn xmlXPathCompareValues_rust(mut ctxt:
     |                                              ----^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1104:1
     |
1104 | mut inf: libc::c_int,
     | ----^^^
     | |
     | help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1105:1
     |
1105 | mut strict: libc::c_int)
     | ----^^^^^^
     | |
     | help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1114:42
     |
1114 | pub extern "C" fn xmlXPathAddValues_rust(mut ctxt:
     |                                          ----^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1120:42
     |
1120 | pub extern "C" fn xmlXPathSubValues_rust(mut ctxt:
     |                                          ----^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1126:42
     |
1126 | pub extern "C" fn xmlXPathModValues_rust(mut ctxt: xmlXPathParserContextPtr) {
     |                                          ----^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1133:42
     |
1133 | pub extern "C" fn xmlXPathDivValues_rust(mut ctxt: xmlXPathParserContextPtr) {
     |                                          ----^^^^
     |                                          |
     |                                          help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1140:43
     |
1140 | pub extern "C" fn xmlXPathMultValues_rust(mut ctxt: xmlXPathParserContextPtr) {
     |                                           ----^^^^
     |                                           |
     |                                           help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1147:46
     |
1147 | pub extern "C" fn xmlXPathValueFlipSign_rust(mut ctxt: xmlXPathParserContextPtr) {
     |                                              ----^^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1154:41
     |
1154 | pub extern "C" fn xmlXPathNextSelf_rust(mut ctxt: xmlXPathParserContextPtr,
     |                                         ----^^^^
     |                                         |
     |                                         help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1155:5
     |
1155 |     mut cur: xmlNodePtr)
     |     ----^^^
     |     |
     |     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1164:53
     |
1164 | pub extern "C" fn xmlXPathCastNodeSetToBoolean_rust(mut ns: xmlNodeSetPtr)
     |                                                     ----^^
     |                                                     |
     |                                                     help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1173:52
     |
1173 | pub extern "C" fn xmlXPathCastStringToBoolean_rust(mut val: *const xmlChar)
     |                                                    ----^^^
     |                                                    |
     |                                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1182:52
     |
1182 | pub extern "C" fn xmlXPathCastNumberToBoolean_rust(mut val: libc::c_double)
     |                                                    ----^^^
     |                                                    |
     |                                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1191:46
     |
1191 | pub extern "C" fn xmlXPathConvertNumber_rust(mut val: xmlXPathObjectPtr)
     |                                              ----^^^
     |                                              |
     |                                              help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1200:49
     |
1200 | pub extern "C" fn xmlXPathCastNodeToString_rust(mut node: xmlNodePtr)
     |                                                 ----^^^^
     |                                                 |
     |                                                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1209:52
     |
1209 | pub extern "C" fn xmlXPathCastBooleanToString_rust(mut val: libc::c_int)
     |                                                    ----^^^
     |                                                    |
     |                                                    help: remove this `mut`

warning: variable does not need to be mutable
    --> src/xpath_rust.rs:1218:52
     |
1218 | pub extern "C" fn xmlXPathRegisteredNsCleanup_rust(mut ctxt:
     |                                                    ----^^^^
     |                                                    |
     |                                                    help: remove this `mut`

warning: unnecessary `unsafe` block
   --> src/parserInternals_rust.rs:273:5
    |
272 | pub unsafe fn xmlClearNodeInfoSeq_rust(mut seq:xmlParserNodeInfoSeqPtr){
    | ----------------------------------------------------------------------- because it's nested under this `unsafe` fn
273 |     unsafe{
    |     ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

warning: unnecessary `unsafe` block
   --> src/parserInternals_rust.rs:283:28
    |
280 | / pub unsafe fn xmlParserFindNodeInfoIndex_rust(seq:
281 | |     xmlParserNodeInfoSeqPtr,node: xmlNodePtr)
282 | | -> libc::c_ulong{
    | |________________- because it's nested under this `unsafe` fn
283 |       let res:libc::c_ulong= unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parserInternals_rust.rs:292:9
    |
290 | / pub unsafe fn xmlParserAddNodeInfo_rust(mut ctxt: xmlParserCtxtPtr,
291 | |     info: xmlParserNodeInfoPtr){
    | |_______________________________- because it's nested under this `unsafe` fn
292 |           unsafe{
    |           ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parserInternals_rust.rs:299:26
    |
297 | / pub unsafe fn xmlPedanticParserDefault_rust(mut val: libc::c_int)
298 | | -> libc::c_int{
    | |______________- because it's nested under this `unsafe` fn
299 |       let res:libc::c_int= unsafe{
    |                            ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parserInternals_rust.rs:308:26
    |
306 | / pub unsafe fn xmlLineNumbersDefault_rust(mut val: libc::c_int)
307 | |  -> libc::c_int{
    | |_______________- because it's nested under this `unsafe` fn
308 |       let res:libc::c_int= unsafe{
    |                            ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parserInternals_rust.rs:317:26
    |
315 | /  pub unsafe fn xmlSubstituteEntitiesDefault_rust(mut val: libc::c_int)
316 | |  -> libc::c_int{
    | |_______________- because it's nested under this `unsafe` fn
317 |       let res:libc::c_int= unsafe{
    |                            ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parserInternals_rust.rs:326:26
    |
324 | /  pub unsafe fn xmlKeepBlanksDefault_rust(mut val: libc::c_int)
325 | |  -> libc::c_int{
    | |_______________- because it's nested under this `unsafe` fn
326 |       let res:libc::c_int= unsafe{
    |                            ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
 --> src/parser_rust.rs:4:29
  |
3 |  pub unsafe extern "C" fn xmlHasFeature_rust(mut feature: xmlFeature) -> libc::c_int{
  |  ----------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
4 |      let res: libc::c_int = unsafe{
  |                             ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> src/parser_rust.rs:68:30
   |
67 |  pub unsafe extern "C" fn xmlSkipBlankChars_rust(mut ctxt: xmlParserCtxtPtr) -> libc::c_int {
   |  ------------------------------------------------------------------------------------------ because it's nested under this `unsafe` fn
68 |      let res: libc::c_int  = unsafe{
   |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> src/parser_rust.rs:77:26
   |
76 |  pub unsafe extern "C" fn xmlPopInput_rust(mut ctxt: xmlParserCtxtPtr) -> xmlChar {
   |  -------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
77 |      let res: xmlChar  = unsafe{
   |                          ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> src/parser_rust.rs:86:30
   |
85 |  pub unsafe extern "C" fn xmlPushInput_rust(mut ctxt: xmlParserCtxtPtr, mut input: xmlParserInputPtr) -> libc::c_int {
   |  ------------------------------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
86 |      let res: libc::c_int  = unsafe{
   |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> src/parser_rust.rs:95:30
   |
94 |  pub unsafe extern "C" fn xmlParseCharRef_rust(mut ctxt: xmlParserCtxtPtr) -> libc::c_int {
   |  ---------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
95 |      let res: libc::c_int  = unsafe{
   |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:104:6
    |
103 |  pub unsafe extern "C" fn xmlParserHandlePEReference_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------------------ because it's nested under this `unsafe` fn
104 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:119:31
    |
110 | /  pub unsafe extern "C" fn xmlStringLenDecodeEntities_rust(mut ctxt:
111 | |                                                      xmlParserCtxtPtr,
112 | |                                                      mut str: *const xmlChar,
113 | |                                                      mut len: libc::c_int,
...   |
117 | |                                                      mut end3: xmlChar)
118 | |                                                      -> *mut xmlChar {
    | |____________________________________________________________________- because it's nested under this `unsafe` fn
119 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:140:31
    |
133 | /  pub unsafe extern "C" fn xmlStringDecodeEntities_rust(mut ctxt: xmlParserCtxtPtr,
134 | |                                                   mut str: *const xmlChar,
135 | |                                                   mut what: libc::c_int,
136 | |                                                   mut end: xmlChar,
137 | |                                                   mut end2: xmlChar,
138 | |                                                   mut end3: xmlChar)
139 | |                                                   -> *mut xmlChar {
    | |_________________________________________________________________- because it's nested under this `unsafe` fn
140 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:157:31
    |
153 | /  pub unsafe extern "C" fn xmlSplitQName_rust(mut ctxt: xmlParserCtxtPtr,
154 | |                                         mut name: *const xmlChar,
155 | |                                         mut prefix: *mut *mut xmlChar)
156 | |                                         -> *mut xmlChar {
    | |_______________________________________________________- because it's nested under this `unsafe` fn
157 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:169:33
    |
167 | /  pub unsafe extern "C" fn xmlParseName_rust(mut ctxt: xmlParserCtxtPtr)
168 | |                                        -> *const xmlChar {
    | |________________________________________________________- because it's nested under this `unsafe` fn
169 |        let res: *const xmlChar  = unsafe{
    |                                   ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:179:31
    |
177 | /  pub unsafe extern "C" fn xmlParseNmtoken_rust(mut ctxt: xmlParserCtxtPtr)
178 | |                                           -> *mut xmlChar {
    | |_________________________________________________________- because it's nested under this `unsafe` fn
179 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:190:31
    |
187 | /  pub unsafe extern "C" fn xmlParseEntityValue_rust(mut ctxt: xmlParserCtxtPtr,
188 | |                                               mut orig: *mut *mut xmlChar)
189 | |                                               -> *mut xmlChar {
    | |_____________________________________________________________- because it's nested under this `unsafe` fn
190 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:200:31
    |
198 | /  pub unsafe extern "C" fn xmlParseAttValue_rust(mut ctxt: xmlParserCtxtPtr)
199 | |                                            -> *mut xmlChar {
    | |__________________________________________________________- because it's nested under this `unsafe` fn
200 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:210:31
    |
208 | /  pub unsafe extern "C" fn xmlParseSystemLiteral_rust(mut ctxt: xmlParserCtxtPtr)
209 | |                                                 -> *mut xmlChar {
    | |_______________________________________________________________- because it's nested under this `unsafe` fn
210 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:220:31
    |
218 | /  pub unsafe extern "C" fn xmlParsePubidLiteral_rust(mut ctxt: xmlParserCtxtPtr)
219 | |                                                -> *mut xmlChar {
    | |______________________________________________________________- because it's nested under this `unsafe` fn
220 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:229:6
    |
228 |  pub unsafe extern "C" fn xmlParseCharData_rust(mut ctxt: xmlParserCtxtPtr, mut cdata: libc::c_int) {
    |  -------------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
229 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:239:31
    |
235 | /  pub unsafe extern "C" fn xmlParseExternalID_rust(mut ctxt: xmlParserCtxtPtr,
236 | |                                              mut publicID: *mut *mut xmlChar,
237 | |                                              mut strict: libc::c_int)
238 | |                                              -> *mut xmlChar {
    | |____________________________________________________________- because it's nested under this `unsafe` fn
239 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:248:6
    |
247 |  pub unsafe extern "C" fn xmlParseComment_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------- because it's nested under this `unsafe` fn
248 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:255:33
    |
254 |  pub unsafe extern "C" fn xmlParsePITarget_rust(mut ctxt: xmlParserCtxtPtr) -> *const xmlChar {
    |  -------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
255 |      let res: *const xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:263:6
    |
262 |  pub unsafe extern "C" fn xmlParsePI_rust(mut ctxt: xmlParserCtxtPtr) {
    |  -------------------------------------------------------------------- because it's nested under this `unsafe` fn
263 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:270:6
    |
269 |  pub unsafe extern "C" fn xmlParseNotationDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------------ because it's nested under this `unsafe` fn
270 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:277:6
    |
276 |  pub unsafe extern "C" fn xmlParseEntityDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ---------------------------------------------------------------------------- because it's nested under this `unsafe` fn
277 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:285:30
    |
283 | /  pub unsafe extern "C" fn xmlParseDefaultDecl_rust(mut ctxt: xmlParserCtxtPtr, mut value: *mut *mut xmlChar)
284 | |                                               -> libc::c_int {
    | |____________________________________________________________- because it's nested under this `unsafe` fn
285 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:294:36
    |
293 |  pub unsafe extern "C" fn xmlParseNotationType_rust(mut ctxt: xmlParserCtxtPtr) -> xmlEnumerationPtr {
    |  --------------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
294 |      let res: xmlEnumerationPtr  = unsafe{
    |                                    ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:303:36
    |
302 |  pub unsafe extern "C" fn xmlParseEnumerationType_rust(mut ctxt: xmlParserCtxtPtr) -> xmlEnumerationPtr {
    |  ------------------------------------------------------------------------------------------------------ because it's nested under this `unsafe` fn
303 |      let res: xmlEnumerationPtr  = unsafe{
    |                                    ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:315:30
    |
311 | /  pub unsafe extern "C" fn xmlParseEnumeratedType_rust(mut ctxt: xmlParserCtxtPtr,
312 | |                                                  mut tree:
313 | |                                                  *mut xmlEnumerationPtr)
314 | |                                                  -> libc::c_int {
    | |_______________________________________________________________- because it's nested under this `unsafe` fn
315 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:324:30
    |
323 |  pub unsafe extern "C" fn xmlParseAttributeType_rust(mut ctxt: xmlParserCtxtPtr, mut tree: *mut xmlEnumerationPtr) -> libc::c_int {
    |  -------------------------------------------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
324 |      let res: libc::c_int  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:333:6
    |
332 |  pub unsafe extern "C" fn xmlParseAttributeListDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ----------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
333 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:344:39
    |
339 | /  pub unsafe extern "C" fn xmlParseElementMixedContentDecl_rust(mut ctxt:
340 | |                                                           xmlParserCtxtPtr,
341 | |                                                           mut inputchk:
342 | |                                                           libc::c_int)
343 | |                                                           -> xmlElementContentPtr {
    | |_________________________________________________________________________________- because it's nested under this `unsafe` fn
344 |        let res: xmlElementContentPtr  = unsafe{
    |                                         ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:357:39
    |
352 | /  pub unsafe extern "C" fn xmlParseElementChildrenContentDecl_rust(mut ctxt:
353 | |                                                              xmlParserCtxtPtr,
354 | |                                                              mut inputchk:
355 | |                                                              libc::c_int)
356 | |                                                              -> xmlElementContentPtr {
    | |____________________________________________________________________________________- because it's nested under this `unsafe` fn
357 |        let res: xmlElementContentPtr  = unsafe{
    |                                         ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:371:30
    |
365 | /  pub unsafe extern "C" fn xmlParseElementContentDecl_rust(mut ctxt:
366 | |                                                      xmlParserCtxtPtr,
367 | |                                                      mut name: *const xmlChar,
368 | |                                                      mut result:
369 | |                                                      *mut xmlElementContentPtr)
370 | |                                                      -> libc::c_int {
    | |___________________________________________________________________- because it's nested under this `unsafe` fn
371 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:380:30
    |
379 |  pub unsafe extern "C" fn xmlParseElementDecl_rust(mut ctxt: xmlParserCtxtPtr) -> libc::c_int {
    |  -------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
380 |      let res: libc::c_int  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:389:6
    |
388 |  pub unsafe extern "C" fn xmlParseMarkupDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ---------------------------------------------------------------------------- because it's nested under this `unsafe` fn
389 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:396:6
    |
395 |  pub unsafe extern "C" fn xmlParseTextDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |  -------------------------------------------------------------------------- because it's nested under this `unsafe` fn
396 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:407:6
    |
402 | /  pub unsafe extern "C" fn xmlParseExternalSubset_rust(mut ctxt: xmlParserCtxtPtr,
403 | |                                                  mut ExternalID:
404 | |                                                  *const xmlChar,
405 | |                                                  mut SystemID:
406 | |                                                  *const xmlChar) {
    | |________________________________________________________________- because it's nested under this `unsafe` fn
407 |        unsafe{
    |        ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:414:6
    |
413 |  pub unsafe extern "C" fn xmlParseReference_rust(mut ctxt: xmlParserCtxtPtr) {
    |  --------------------------------------------------------------------------- because it's nested under this `unsafe` fn
414 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:421:31
    |
420 |  pub unsafe extern "C" fn xmlParseEntityRef_rust(mut ctxt: xmlParserCtxtPtr) -> xmlEntityPtr {
    |  ------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
421 |      let res: xmlEntityPtr  = unsafe{
    |                               ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:430:6
    |
429 |  pub unsafe extern "C" fn xmlParsePEReference_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ----------------------------------------------------------------------------- because it's nested under this `unsafe` fn
430 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:437:6
    |
436 |  pub unsafe extern "C" fn xmlParseDocTypeDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ----------------------------------------------------------------------------- because it's nested under this `unsafe` fn
437 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:444:33
    |
443 |  pub unsafe extern "C" fn xmlParseAttribute_rust(mut ctxt: xmlParserCtxtPtr, mut value: *mut *mut xmlChar) -> *const xmlChar {
    |  --------------------------------------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
444 |      let res: *const xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:453:33
    |
452 |  pub unsafe extern "C" fn xmlParseStartTag_rust(mut ctxt: xmlParserCtxtPtr) -> *const xmlChar {
    |  -------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
453 |      let res: *const xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:461:6
    |
460 |  pub unsafe extern "C" fn xmlParseEndTag_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------ because it's nested under this `unsafe` fn
461 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:468:6
    |
467 |  pub unsafe extern "C" fn xmlParseCDSect_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------ because it's nested under this `unsafe` fn
468 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:475:6
    |
474 |  pub unsafe extern "C" fn xmlParseContent_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------- because it's nested under this `unsafe` fn
475 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:482:6
    |
481 |  pub unsafe extern "C" fn xmlParseElement_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------- because it's nested under this `unsafe` fn
482 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:490:31
    |
488 | /  pub unsafe extern "C" fn xmlParseVersionNum_rust(mut ctxt: xmlParserCtxtPtr)
489 | |                                              -> *mut xmlChar {
    | |____________________________________________________________- because it's nested under this `unsafe` fn
490 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:500:31
    |
498 | /  pub unsafe extern "C" fn xmlParseVersionInfo_rust(mut ctxt: xmlParserCtxtPtr)
499 | |                                               -> *mut xmlChar {
    | |_____________________________________________________________- because it's nested under this `unsafe` fn
500 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:510:31
    |
508 | /  pub unsafe extern "C" fn xmlParseEncName_rust(mut ctxt: xmlParserCtxtPtr)
509 | |                                           -> *mut xmlChar {
    | |_________________________________________________________- because it's nested under this `unsafe` fn
510 |        let res: *mut xmlChar  = unsafe{
    |                                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:520:33
    |
518 | /  pub unsafe extern "C" fn xmlParseEncodingDecl_rust(mut ctxt: xmlParserCtxtPtr)
519 | |                                                -> *const xmlChar {
    | |________________________________________________________________- because it's nested under this `unsafe` fn
520 |        let res: *const xmlChar  = unsafe{
    |                                   ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:530:30
    |
528 | /  pub unsafe extern "C" fn xmlParseSDDecl_rust(mut ctxt: xmlParserCtxtPtr)
529 | |                                          -> libc::c_int {
    | |_______________________________________________________- because it's nested under this `unsafe` fn
530 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:539:6
    |
538 |  pub unsafe extern "C" fn xmlParseXMLDecl_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ------------------------------------------------------------------------- because it's nested under this `unsafe` fn
539 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:546:6
    |
545 |  pub unsafe extern "C" fn xmlParseMisc_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ---------------------------------------------------------------------- because it's nested under this `unsafe` fn
546 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:554:30
    |
552 | /  pub unsafe extern "C" fn xmlParseDocument_rust(mut ctxt: xmlParserCtxtPtr)
553 | |                                            -> libc::c_int {
    | |_________________________________________________________- because it's nested under this `unsafe` fn
554 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:564:30
    |
562 | /  pub unsafe extern "C" fn xmlParseExtParsedEnt_rust(mut ctxt: xmlParserCtxtPtr)
563 | |                                                -> libc::c_int {
    | |_____________________________________________________________- because it's nested under this `unsafe` fn
564 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:577:30
    |
572 | /  pub unsafe extern "C" fn xmlParseChunk_rust(mut ctxt: xmlParserCtxtPtr,
573 | |                                         mut chunk: *const libc::c_char,
574 | |                                         mut size: libc::c_int,
575 | |                                         mut terminate: libc::c_int)
576 | |                                         -> libc::c_int {
    | |______________________________________________________- because it's nested under this `unsafe` fn
577 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:597:35
    |
588 | /  pub unsafe extern "C" fn xmlCreatePushParserCtxt_rust(mut sax: xmlSAXHandlerPtr,
589 | |                                                   mut user_data:
590 | |                                                   *mut libc::c_void,
591 | |                                                   mut chunk:
...   |
595 | |                                                   *const libc::c_char)
596 | |                                                   -> xmlParserCtxtPtr {
    | |_____________________________________________________________________- because it's nested under this `unsafe` fn
597 |        let res: xmlParserCtxtPtr  = unsafe{
    |                                     ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:613:6
    |
612 |  pub unsafe extern "C" fn xmlStopParser_rust(mut ctxt: xmlParserCtxtPtr) {
    |  ----------------------------------------------------------------------- because it's nested under this `unsafe` fn
613 |      unsafe{
    |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:629:35
    |
619 | /  pub unsafe extern "C" fn xmlCreateIOParserCtxt_rust(mut sax: xmlSAXHandlerPtr,
620 | |                                                 mut user_data:
621 | |                                                 *mut libc::c_void,
622 | |                                                 mut ioread:
...   |
627 | |                                                 mut enc: xmlCharEncoding)
628 | |                                                 -> xmlParserCtxtPtr {
    | |___________________________________________________________________- because it's nested under this `unsafe` fn
629 |        let res: xmlParserCtxtPtr  = unsafe{
    |                                     ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:641:28
    |
637 | /  pub unsafe extern "C" fn xmlIOParseDTD_rust(mut sax: xmlSAXHandlerPtr,
638 | |                                         mut input: xmlParserInputBufferPtr,
639 | |                                         mut enc: xmlCharEncoding)
640 | |                                         -> xmlDtdPtr {
    | |____________________________________________________- because it's nested under this `unsafe` fn
641 |        let res: xmlDtdPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:655:28
    |
651 | /  pub unsafe extern "C" fn xmlSAXParseDTD_rust(mut sax: xmlSAXHandlerPtr,
652 | |                                          mut ExternalID: *const xmlChar,
653 | |                                          mut SystemID: *const xmlChar)
654 | |                                          -> xmlDtdPtr {
    | |_____________________________________________________- because it's nested under this `unsafe` fn
655 |        let res: xmlDtdPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:668:28
    |
665 | /  pub unsafe extern "C" fn xmlParseDTD_rust(mut ExternalID: *const xmlChar,
666 | |                                       mut SystemID: *const xmlChar)
667 | |                                       -> xmlDtdPtr {
    | |__________________________________________________- because it's nested under this `unsafe` fn
668 |        let res: xmlDtdPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:682:30
    |
677 | /  pub unsafe extern "C" fn xmlParseCtxtExternalEntity_rust(mut ctx: xmlParserCtxtPtr,
678 | |                                                      mut URL: *const xmlChar,
679 | |                                                      mut ID: *const xmlChar,
680 | |                                                      mut lst: *mut xmlNodePtr)
681 | |                                                      -> libc::c_int {
    | |___________________________________________________________________- because it's nested under this `unsafe` fn
682 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:702:30
    |
693 | /  pub unsafe extern "C" fn xmlParseExternalEntity_rust(mut doc: xmlDocPtr,
694 | |                                                  mut sax: xmlSAXHandlerPtr,
695 | |                                                  mut user_data:
696 | |                                                  *mut libc::c_void,
...   |
700 | |                                                  mut lst: *mut xmlNodePtr)
701 | |                                                  -> libc::c_int {
    | |_______________________________________________________________- because it's nested under this `unsafe` fn
702 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:726:30
    |
716 | /  pub unsafe extern "C" fn xmlParseBalancedChunkMemory_rust(mut doc: xmlDocPtr,
717 | |                                                       mut sax:
718 | |                                                       xmlSAXHandlerPtr,
719 | |                                                       mut user_data:
...   |
724 | |                                                       mut lst: *mut xmlNodePtr)
725 | |                                                       -> libc::c_int {
    | |____________________________________________________________________- because it's nested under this `unsafe` fn
726 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:746:34
    |
740 | /  pub unsafe extern "C" fn xmlParseInNodeContext_rust(mut node: xmlNodePtr,
741 | |                                                 mut data: *const libc::c_char,
742 | |                                                 mut datalen: libc::c_int,
743 | |                                                 mut options: libc::c_int,
744 | |                                                 mut lst: *mut xmlNodePtr)
745 | |                                                 -> xmlParserErrors {
    | |__________________________________________________________________- because it's nested under this `unsafe` fn
746 |        let res: xmlParserErrors  = unsafe{
    |                                    ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:773:30
    |
758 | /  pub unsafe extern "C" fn xmlParseBalancedChunkMemoryRecover_rust(mut doc:
759 | |                                                              xmlDocPtr,
760 | |                                                              mut sax:
761 | |                                                              xmlSAXHandlerPtr,
...   |
771 | |                                                              libc::c_int)
772 | |                                                              -> libc::c_int {
    | |___________________________________________________________________________- because it's nested under this `unsafe` fn
773 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:790:28
    |
787 | /  pub unsafe extern "C" fn xmlSAXParseEntity_rust(mut sax: xmlSAXHandlerPtr,
788 | |                                             mut filename: *const libc::c_char)
789 | |                                             -> xmlDocPtr {
    | |________________________________________________________- because it's nested under this `unsafe` fn
790 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:800:28
    |
798 | /  pub unsafe extern "C" fn xmlParseEntity_rust(mut filename: *const libc::c_char)
799 | |                                          -> xmlDocPtr {
    | |_____________________________________________________- because it's nested under this `unsafe` fn
800 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:812:35
    |
808 | /  pub unsafe extern "C" fn xmlCreateEntityParserCtxt_rust(mut URL: *const xmlChar,
809 | |                                                     mut ID: *const xmlChar,
810 | |                                                     mut base: *const xmlChar)
811 | |                                                     -> xmlParserCtxtPtr {
    | |_______________________________________________________________________- because it's nested under this `unsafe` fn
812 |        let res: xmlParserCtxtPtr  = unsafe{
    |                                     ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:826:35
    |
822 | /  pub unsafe extern "C" fn xmlCreateURLParserCtxt_rust(mut filename:
823 | |                                                  *const libc::c_char,
824 | |                                                  mut options: libc::c_int)
825 | |                                                  -> xmlParserCtxtPtr {
    | |____________________________________________________________________- because it's nested under this `unsafe` fn
826 |        let res: xmlParserCtxtPtr  = unsafe{
    |                                     ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:835:35
    |
834 |  pub unsafe extern "C" fn xmlCreateFileParserCtxt_rust(mut filename: *const libc::c_char) -> xmlParserCtxtPtr {
    |  ------------------------------------------------------------------------------------------------------------ because it's nested under this `unsafe` fn
835 |      let res: xmlParserCtxtPtr  = unsafe{
    |                                   ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:849:28
    |
843 | /  pub unsafe extern "C" fn xmlSAXParseFileWithData_rust(mut sax: xmlSAXHandlerPtr,
844 | |                                                   mut filename:
845 | |                                                   *const libc::c_char,
846 | |                                                   mut recovery: libc::c_int,
847 | |                                                   mut data: *mut libc::c_void)
848 | |                                                   -> xmlDocPtr {
    | |______________________________________________________________- because it's nested under this `unsafe` fn
849 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:864:28
    |
860 | /  pub unsafe extern "C" fn xmlSAXParseFile_rust(mut sax: xmlSAXHandlerPtr,
861 | |                                           mut filename: *const libc::c_char,
862 | |                                           mut recovery: libc::c_int)
863 | |                                           -> xmlDocPtr {
    | |______________________________________________________- because it's nested under this `unsafe` fn
864 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:875:28
    |
874 |  pub unsafe extern "C" fn xmlRecoverDoc_rust(mut cur: *const xmlChar) -> xmlDocPtr {
    |  --------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
875 |      let res: xmlDocPtr  = unsafe{
    |                            ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:885:28
    |
883 | /  pub unsafe extern "C" fn xmlParseFile_rust(mut filename: *const libc::c_char)
884 | |                                        -> xmlDocPtr {
    | |___________________________________________________- because it's nested under this `unsafe` fn
885 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:895:28
    |
893 | /  pub unsafe extern "C" fn xmlRecoverFile_rust(mut filename: *const libc::c_char)
894 | |                                          -> xmlDocPtr {
    | |_____________________________________________________- because it's nested under this `unsafe` fn
895 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:907:6
    |
903 | /  pub unsafe extern "C" fn xmlSetupParserForBuffer_rust(mut ctxt: xmlParserCtxtPtr,
904 | |                                                   mut buffer: *const xmlChar,
905 | |                                                   mut filename:
906 | |                                                   *const libc::c_char) {
    | |______________________________________________________________________- because it's nested under this `unsafe` fn
907 |        unsafe{
    |        ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:918:30
    |
913 | /  pub unsafe extern "C" fn xmlSAXUserParseFile_rust(mut sax: xmlSAXHandlerPtr,
914 | |                                               mut user_data: *mut libc::c_void,
915 | |                                               mut filename:
916 | |                                               *const libc::c_char)
917 | |                                               -> libc::c_int {
    | |____________________________________________________________- because it's nested under this `unsafe` fn
918 |        let res: libc::c_int  = unsafe{
    |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:930:35
    |
926 | /  pub unsafe extern "C" fn xmlCreateMemoryParserCtxt_rust(mut buffer:
927 | |                                                     *const libc::c_char,
928 | |                                                     mut size: libc::c_int)
929 | |                                                     -> xmlParserCtxtPtr {
    | |_______________________________________________________________________- because it's nested under this `unsafe` fn
930 |        let res: xmlParserCtxtPtr  = unsafe{
    |                                     ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:946:28
    |
938 | /  pub unsafe extern "C" fn xmlSAXParseMemoryWithData_rust(mut sax: xmlSAXHandlerPtr,
939 | |                                                     mut buffer:
940 | |                                                     *const libc::c_char,
941 | |                                                     mut size: libc::c_int,
...   |
944 | |                                                     *mut libc::c_void)
945 | |                                                     -> xmlDocPtr {
    | |________________________________________________________________- because it's nested under this `unsafe` fn
946 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:963:28
    |
958 | /  pub unsafe extern "C" fn xmlSAXParseMemory_rust(mut sax: xmlSAXHandlerPtr,
959 | |                                             mut buffer: *const libc::c_char,
960 | |                                             mut size: libc::c_int,
961 | |                                             mut recovery: libc::c_int)
962 | |                                             -> xmlDocPtr {
    | |________________________________________________________- because it's nested under this `unsafe` fn
963 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:976:28
    |
974 | /  pub unsafe extern "C" fn xmlParseMemory_rust(mut buffer: *const libc::c_char,
975 | |                                          mut size: libc::c_int) -> xmlDocPtr {
    | |____________________________________________________________________________- because it's nested under this `unsafe` fn
976 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/parser_rust.rs:987:28
    |
984 | /  pub unsafe extern "C" fn xmlRecoverMemory_rust(mut buffer: *const libc::c_char,
985 | |                                            mut size: libc::c_int)
986 | |                                            -> xmlDocPtr {
    | |_______________________________________________________- because it's nested under this `unsafe` fn
987 |        let res: xmlDocPtr  = unsafe{
    |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1002:30
     |
995  | /  pub unsafe extern "C" fn xmlSAXUserParseMemory_rust(mut sax: xmlSAXHandlerPtr,
996  | |                                                 mut user_data:
997  | |                                                 *mut libc::c_void,
998  | |                                                 mut buffer:
999  | |                                                 *const libc::c_char,
1000 | |                                                 mut size: libc::c_int)
1001 | |                                                 -> libc::c_int {
     | |______________________________________________________________- because it's nested under this `unsafe` fn
1002 |        let res: libc::c_int  = unsafe{
     |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1014:35
     |
1013 |  pub unsafe extern "C" fn xmlCreateDocParserCtxt_rust(mut cur: *const xmlChar) -> xmlParserCtxtPtr {
     |  ------------------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
1014 |      let res: xmlParserCtxtPtr  = unsafe{
     |                                   ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1026:28
     |
1022 | /  pub unsafe extern "C" fn xmlSAXParseDoc_rust(mut sax: xmlSAXHandlerPtr,
1023 | |                                          mut cur: *const xmlChar,
1024 | |                                          mut recovery: libc::c_int)
1025 | |                                          -> xmlDocPtr {
     | |_____________________________________________________- because it's nested under this `unsafe` fn
1026 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1037:28
     |
1036 |  pub unsafe extern "C" fn xmlParseDoc_rust(mut cur: *const xmlChar) -> xmlDocPtr {
     |  ------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
1037 |      let res: xmlDocPtr  = unsafe{
     |                            ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1046:6
     |
1045 |  pub unsafe extern "C" fn xmlSetEntityReferenceFunc_rust(mut func: xmlEntityReferenceFunc) {
     |  ----------------------------------------------------------------------------------------- because it's nested under this `unsafe` fn
1046 |      unsafe{
     |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1053:6
     |
1052 |  pub unsafe extern "C" fn xmlInitParser_rust() {
     |  --------------------------------------------- because it's nested under this `unsafe` fn
1053 |      unsafe{
     |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1060:6
     |
1059 |  pub unsafe extern "C" fn xmlCleanupParser_rust() {
     |  ------------------------------------------------ because it's nested under this `unsafe` fn
1060 |      unsafe{
     |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1067:6
     |
1066 |  pub unsafe extern "C" fn xmlCtxtReset_rust(mut ctxt: xmlParserCtxtPtr) {
     |  ---------------------------------------------------------------------- because it's nested under this `unsafe` fn
1067 |      unsafe{
     |      ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1079:30
     |
1073 | /  pub unsafe extern "C" fn xmlCtxtResetPush_rust(mut ctxt: xmlParserCtxtPtr,
1074 | |                                            mut chunk: *const libc::c_char,
1075 | |                                            mut size: libc::c_int,
1076 | |                                            mut filename: *const libc::c_char,
1077 | |                                            mut encoding: *const libc::c_char)
1078 | |                                            -> libc::c_int {
     | |_________________________________________________________- because it's nested under this `unsafe` fn
1079 |        let res: libc::c_int  = unsafe{
     |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1090:30
     |
1087 | /  pub unsafe extern "C" fn xmlCtxtUseOptions_rust(mut ctxt: xmlParserCtxtPtr,
1088 | |                                             mut options: libc::c_int)
1089 | |                                             -> libc::c_int {
     | |__________________________________________________________- because it's nested under this `unsafe` fn
1090 |        let res: libc::c_int  = unsafe{
     |                                ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1103:28
     |
1099 | /  pub unsafe extern "C" fn xmlReadDoc_rust(mut cur: *const xmlChar,
1100 | |                                      mut URL: *const libc::c_char,
1101 | |                                      mut encoding: *const libc::c_char,
1102 | |                                      mut options: libc::c_int) -> xmlDocPtr {
     | |___________________________________________________________________________- because it's nested under this `unsafe` fn
1103 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1117:28
     |
1114 | /  pub unsafe extern "C" fn xmlReadFile_rust(mut filename: *const libc::c_char,
1115 | |                                       mut encoding: *const libc::c_char,
1116 | |                                       mut options: libc::c_int) -> xmlDocPtr {
     | |____________________________________________________________________________- because it's nested under this `unsafe` fn
1117 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1133:28
     |
1127 | /  pub unsafe extern "C" fn xmlReadMemory_rust(mut buffer: *const libc::c_char,
1128 | |                                         mut size: libc::c_int,
1129 | |                                         mut URL: *const libc::c_char,
1130 | |                                         mut encoding: *const libc::c_char,
1131 | |                                         mut options: libc::c_int)
1132 | |                                         -> xmlDocPtr {
     | |____________________________________________________- because it's nested under this `unsafe` fn
1133 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1149:28
     |
1145 | /  pub unsafe extern "C" fn xmlReadFd_rust(mut fd: libc::c_int,
1146 | |                                     mut URL: *const libc::c_char,
1147 | |                                     mut encoding: *const libc::c_char,
1148 | |                                     mut options: libc::c_int) -> xmlDocPtr {
     | |__________________________________________________________________________- because it's nested under this `unsafe` fn
1149 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1166:28
     |
1160 | /  pub unsafe extern "C" fn xmlReadIO_rust(mut ioread: xmlInputReadCallback,
1161 | |                                     mut ioclose: xmlInputCloseCallback,
1162 | |                                     mut ioctx: *mut libc::c_void,
1163 | |                                     mut URL: *const libc::c_char,
1164 | |                                     mut encoding: *const libc::c_char,
1165 | |                                     mut options: libc::c_int) -> xmlDocPtr {
     | |__________________________________________________________________________- because it's nested under this `unsafe` fn
1166 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1185:28
     |
1179 | /  pub unsafe extern "C" fn xmlCtxtReadDoc_rust(mut ctxt: xmlParserCtxtPtr,
1180 | |                                          mut cur: *const xmlChar,
1181 | |                                          mut URL: *const libc::c_char,
1182 | |                                          mut encoding: *const libc::c_char,
1183 | |                                          mut options: libc::c_int)
1184 | |                                          -> xmlDocPtr {
     | |_____________________________________________________- because it's nested under this `unsafe` fn
1185 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1202:28
     |
1197 | /  pub unsafe extern "C" fn xmlCtxtReadFile_rust(mut ctxt: xmlParserCtxtPtr,
1198 | |                                           mut filename: *const libc::c_char,
1199 | |                                           mut encoding: *const libc::c_char,
1200 | |                                           mut options: libc::c_int)
1201 | |                                           -> xmlDocPtr {
     | |______________________________________________________- because it's nested under this `unsafe` fn
1202 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1220:28
     |
1213 | /  pub unsafe extern "C" fn xmlCtxtReadMemory_rust(mut ctxt: xmlParserCtxtPtr,
1214 | |                                             mut buffer: *const libc::c_char,
1215 | |                                             mut size: libc::c_int,
1216 | |                                             mut URL: *const libc::c_char,
1217 | |                                             mut encoding: *const libc::c_char,
1218 | |                                             mut options: libc::c_int)
1219 | |                                             -> xmlDocPtr {
     | |________________________________________________________- because it's nested under this `unsafe` fn
1220 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1239:28
     |
1233 | /  pub unsafe extern "C" fn xmlCtxtReadFd_rust(mut ctxt: xmlParserCtxtPtr,
1234 | |                                         mut fd: libc::c_int,
1235 | |                                         mut URL: *const libc::c_char,
1236 | |                                         mut encoding: *const libc::c_char,
1237 | |                                         mut options: libc::c_int)
1238 | |                                         -> xmlDocPtr {
     | |____________________________________________________- because it's nested under this `unsafe` fn
1239 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
    --> src/parser_rust.rs:1259:28
     |
1251 | /  pub unsafe extern "C" fn xmlCtxtReadIO_rust(mut ctxt: xmlParserCtxtPtr,
1252 | |                                         mut ioread: xmlInputReadCallback,
1253 | |                                         mut ioclose: xmlInputCloseCallback,
1254 | |                                         mut ioctx: *mut libc::c_void,
...    |
1257 | |                                         mut options: libc::c_int)
1258 | |                                         -> xmlDocPtr {
     | |____________________________________________________- because it's nested under this `unsafe` fn
1259 |        let res: xmlDocPtr  = unsafe{
     |                              ^^^^^^ unnecessary `unsafe` block

warning: static is never used: `xmlDictInitialized`
   --> src/defination.rs:110:1
    |
110 | static mut xmlDictInitialized: libc::c_int = 0 as libc::c_int;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: static is never used: `rand_seed`
   --> src/defination.rs:111:1
    |
111 | static mut rand_seed: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: structure field `_IO_read_ptr` should have a snake case name
  --> src/defination.rs:10:9
   |
10 |     pub _IO_read_ptr: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_ptr`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: structure field `_IO_read_end` should have a snake case name
  --> src/defination.rs:11:9
   |
11 |     pub _IO_read_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_end`

warning: structure field `_IO_read_base` should have a snake case name
  --> src/defination.rs:12:9
   |
12 |     pub _IO_read_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_read_base`

warning: structure field `_IO_write_base` should have a snake case name
  --> src/defination.rs:13:9
   |
13 |     pub _IO_write_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_base`

warning: structure field `_IO_write_ptr` should have a snake case name
  --> src/defination.rs:14:9
   |
14 |     pub _IO_write_ptr: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_ptr`

warning: structure field `_IO_write_end` should have a snake case name
  --> src/defination.rs:15:9
   |
15 |     pub _IO_write_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_write_end`

warning: structure field `_IO_buf_base` should have a snake case name
  --> src/defination.rs:16:9
   |
16 |     pub _IO_buf_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_base`

warning: structure field `_IO_buf_end` should have a snake case name
  --> src/defination.rs:17:9
   |
17 |     pub _IO_buf_end: *mut libc::c_char,
   |         ^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_buf_end`

warning: structure field `_IO_save_base` should have a snake case name
  --> src/defination.rs:18:9
   |
18 |     pub _IO_save_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_base`

warning: structure field `_IO_backup_base` should have a snake case name
  --> src/defination.rs:19:9
   |
19 |     pub _IO_backup_base: *mut libc::c_char,
   |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_backup_base`

warning: structure field `_IO_save_end` should have a snake case name
  --> src/defination.rs:20:9
   |
20 |     pub _IO_save_end: *mut libc::c_char,
   |         ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `_io_save_end`

warning: structure field `contentIO` should have a snake case name
  --> src/defination.rs:56:9
   |
56 |     pub contentIO: *mut xmlChar,
   |         ^^^^^^^^^ help: convert the identifier to snake case: `content_io`

warning: structure field `nbElems` should have a snake case name
  --> src/defination.rs:80:9
   |
80 |     pub nbElems: libc::c_uint,
   |         ^^^^^^^ help: convert the identifier to snake case: `nb_elems`

warning: structure field `nbStrings` should have a snake case name
  --> src/defination.rs:95:9
   |
95 |     pub nbStrings: size_t,
   |         ^^^^^^^^^ help: convert the identifier to snake case: `nb_strings`

warning: static variable `xmlDictInitialized` should have an upper case name
   --> src/defination.rs:110:12
    |
110 | static mut xmlDictInitialized: libc::c_int = 0 as libc::c_int;
    |            ^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_DICT_INITIALIZED`
    |
    = note: `#[warn(non_upper_case_globals)]` on by default

warning: static variable `rand_seed` should have an upper case name
   --> src/defination.rs:111:12
    |
111 | static mut rand_seed: libc::c_uint = 0 as libc::c_int as libc::c_uint;
    |            ^^^^^^^^^ help: convert the identifier to upper case: `RAND_SEED`

warning: structure field `nbElems` should have a snake case name
   --> src/defination.rs:122:9
    |
122 |     pub nbElems: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `nb_elems`

warning: structure field `maxRanges` should have a snake case name
   --> src/defination.rs:188:9
    |
188 |     pub maxRanges: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `max_ranges`

warning: structure field `nbRanges` should have a snake case name
   --> src/defination.rs:189:9
    |
189 |     pub nbRanges: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `nb_ranges`

warning: structure field `blockName` should have a snake case name
   --> src/defination.rs:202:9
    |
202 |     pub blockName: *mut xmlChar,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `block_name`

warning: structure field `nbStates` should have a snake case name
   --> src/defination.rs:290:9
    |
290 |     pub nbStates: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `nb_states`

warning: structure field `nbAtoms` should have a snake case name
   --> src/defination.rs:292:9
    |
292 |     pub nbAtoms: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `nb_atoms`

warning: structure field `nbCounters` should have a snake case name
   --> src/defination.rs:294:9
    |
294 |     pub nbCounters: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `nb_counters`

warning: structure field `stringMap` should have a snake case name
   --> src/defination.rs:302:9
    |
302 |     pub stringMap: *mut *mut xmlChar,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `string_map`

warning: structure field `maxRollbacks` should have a snake case name
   --> src/defination.rs:318:9
    |
318 |     pub maxRollbacks: libc::c_int,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `max_rollbacks`

warning: structure field `nbRollbacks` should have a snake case name
   --> src/defination.rs:319:9
    |
319 |     pub nbRollbacks: libc::c_int,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `nb_rollbacks`

warning: structure field `inputStackMax` should have a snake case name
   --> src/defination.rs:322:9
    |
322 |     pub inputStackMax: libc::c_int,
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `input_stack_max`

warning: structure field `inputStackNr` should have a snake case name
   --> src/defination.rs:323:9
    |
323 |     pub inputStackNr: libc::c_int,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `input_stack_nr`

warning: structure field `charStack` should have a snake case name
   --> src/defination.rs:325:9
    |
325 |     pub charStack: *mut libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `char_stack`

warning: structure field `inputString` should have a snake case name
   --> src/defination.rs:326:9
    |
326 |     pub inputString: *const xmlChar,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `input_string`

warning: structure field `inputStack` should have a snake case name
   --> src/defination.rs:327:9
    |
327 |     pub inputStack: xmlRegInputTokenPtr,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `input_stack`

warning: structure field `errStateNo` should have a snake case name
   --> src/defination.rs:328:9
    |
328 |     pub errStateNo: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `err_state_no`

warning: structure field `errState` should have a snake case name
   --> src/defination.rs:329:9
    |
329 |     pub errState: xmlRegStatePtr,
    |         ^^^^^^^^ help: convert the identifier to snake case: `err_state`

warning: structure field `errString` should have a snake case name
   --> src/defination.rs:330:9
    |
330 |     pub errString: *mut xmlChar,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `err_string`

warning: structure field `errCounts` should have a snake case name
   --> src/defination.rs:331:9
    |
331 |     pub errCounts: *mut libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `err_counts`

warning: structure field `nbPush` should have a snake case name
   --> src/defination.rs:332:9
    |
332 |     pub nbPush: libc::c_int,
    |         ^^^^^^ help: convert the identifier to snake case: `nb_push`

warning: structure field `maxTrans` should have a snake case name
   --> src/defination.rs:372:9
    |
372 |     pub maxTrans: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `max_trans`

warning: structure field `nbTrans` should have a snake case name
   --> src/defination.rs:373:9
    |
373 |     pub nbTrans: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `nb_trans`

warning: structure field `maxTransTo` should have a snake case name
   --> src/defination.rs:375:9
    |
375 |     pub maxTransTo: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `max_trans_to`

warning: structure field `nbTransTo` should have a snake case name
   --> src/defination.rs:376:9
    |
376 |     pub nbTransTo: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `nb_trans_to`

warning: structure field `transTo` should have a snake case name
   --> src/defination.rs:377:9
    |
377 |     pub transTo: *mut libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `trans_to`

warning: structure field `maxAtoms` should have a snake case name
   --> src/defination.rs:396:9
    |
396 |     pub maxAtoms: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `max_atoms`

warning: structure field `nbAtoms` should have a snake case name
   --> src/defination.rs:397:9
    |
397 |     pub nbAtoms: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `nb_atoms`

warning: structure field `maxStates` should have a snake case name
   --> src/defination.rs:399:9
    |
399 |     pub maxStates: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `max_states`

warning: structure field `nbStates` should have a snake case name
   --> src/defination.rs:400:9
    |
400 |     pub nbStates: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `nb_states`

warning: structure field `maxCounters` should have a snake case name
   --> src/defination.rs:402:9
    |
402 |     pub maxCounters: libc::c_int,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `max_counters`

warning: structure field `nbCounters` should have a snake case name
   --> src/defination.rs:403:9
    |
403 |     pub nbCounters: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `nb_counters`

warning: structure field `elemDecl` should have a snake case name
   --> src/defination.rs:417:9
    |
417 |     pub elemDecl: xmlElementPtr,
    |         ^^^^^^^^ help: convert the identifier to snake case: `elem_decl`

warning: structure field `contModel` should have a snake case name
   --> src/defination.rs:445:9
    |
445 |     pub contModel: xmlRegexpPtr,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `cont_model`

warning: structure field `defaultValue` should have a snake case name
   --> src/defination.rs:470:9
    |
470 |     pub defaultValue: *const xmlChar,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `default_value`

warning: structure field `PublicID` should have a snake case name
   --> src/defination.rs:481:9
    |
481 |     pub PublicID: *const xmlChar,
    |         ^^^^^^^^ help: convert the identifier to snake case: `public_id`

warning: structure field `SystemID` should have a snake case name
   --> src/defination.rs:482:9
    |
482 |     pub SystemID: *const xmlChar,
    |         ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: structure field `userData` should have a snake case name
   --> src/defination.rs:641:9
    |
641 |     pub userData: *mut libc::c_void,
    |         ^^^^^^^^ help: convert the identifier to snake case: `user_data`

warning: structure field `myDoc` should have a snake case name
   --> src/defination.rs:642:9
    |
642 |     pub myDoc: xmlDocPtr,
    |         ^^^^^ help: convert the identifier to snake case: `my_doc`

warning: structure field `wellFormed` should have a snake case name
   --> src/defination.rs:643:9
    |
643 |     pub wellFormed: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `well_formed`

warning: structure field `replaceEntities` should have a snake case name
   --> src/defination.rs:644:9
    |
644 |     pub replaceEntities: libc::c_int,
    |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `replace_entities`

warning: structure field `inputNr` should have a snake case name
   --> src/defination.rs:650:9
    |
650 |     pub inputNr: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `input_nr`

warning: structure field `inputMax` should have a snake case name
   --> src/defination.rs:651:9
    |
651 |     pub inputMax: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `input_max`

warning: structure field `inputTab` should have a snake case name
   --> src/defination.rs:652:9
    |
652 |     pub inputTab: *mut xmlParserInputPtr,
    |         ^^^^^^^^ help: convert the identifier to snake case: `input_tab`

warning: structure field `nodeNr` should have a snake case name
   --> src/defination.rs:654:9
    |
654 |     pub nodeNr: libc::c_int,
    |         ^^^^^^ help: convert the identifier to snake case: `node_nr`

warning: structure field `nodeMax` should have a snake case name
   --> src/defination.rs:655:9
    |
655 |     pub nodeMax: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `node_max`

warning: structure field `nodeTab` should have a snake case name
   --> src/defination.rs:656:9
    |
656 |     pub nodeTab: *mut xmlNodePtr,
    |         ^^^^^^^ help: convert the identifier to snake case: `node_tab`

warning: structure field `errNo` should have a snake case name
   --> src/defination.rs:659:9
    |
659 |     pub errNo: libc::c_int,
    |         ^^^^^ help: convert the identifier to snake case: `err_no`

warning: structure field `hasExternalSubset` should have a snake case name
   --> src/defination.rs:660:9
    |
660 |     pub hasExternalSubset: libc::c_int,
    |         ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `has_external_subset`

warning: structure field `hasPErefs` should have a snake case name
   --> src/defination.rs:661:9
    |
661 |     pub hasPErefs: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `has_perefs`

warning: structure field `nameNr` should have a snake case name
   --> src/defination.rs:670:9
    |
670 |     pub nameNr: libc::c_int,
    |         ^^^^^^ help: convert the identifier to snake case: `name_nr`

warning: structure field `nameMax` should have a snake case name
   --> src/defination.rs:671:9
    |
671 |     pub nameMax: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `name_max`

warning: structure field `nameTab` should have a snake case name
   --> src/defination.rs:672:9
    |
672 |     pub nameTab: *mut *const xmlChar,
    |         ^^^^^^^ help: convert the identifier to snake case: `name_tab`

warning: structure field `nbChars` should have a snake case name
   --> src/defination.rs:673:9
    |
673 |     pub nbChars: libc::c_long,
    |         ^^^^^^^ help: convert the identifier to snake case: `nb_chars`

warning: structure field `checkIndex` should have a snake case name
   --> src/defination.rs:674:9
    |
674 |     pub checkIndex: libc::c_long,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `check_index`

warning: structure field `keepBlanks` should have a snake case name
   --> src/defination.rs:675:9
    |
675 |     pub keepBlanks: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `keep_blanks`

warning: structure field `disableSAX` should have a snake case name
   --> src/defination.rs:676:9
    |
676 |     pub disableSAX: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `disable_sax`

warning: structure field `inSubset` should have a snake case name
   --> src/defination.rs:677:9
    |
677 |     pub inSubset: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `in_subset`

warning: structure field `intSubName` should have a snake case name
   --> src/defination.rs:678:9
    |
678 |     pub intSubName: *const xmlChar,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `int_sub_name`

warning: structure field `extSubURI` should have a snake case name
   --> src/defination.rs:679:9
    |
679 |     pub extSubURI: *mut xmlChar,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `ext_sub_uri`

warning: structure field `extSubSystem` should have a snake case name
   --> src/defination.rs:680:9
    |
680 |     pub extSubSystem: *mut xmlChar,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `ext_sub_system`

warning: structure field `spaceNr` should have a snake case name
   --> src/defination.rs:682:9
    |
682 |     pub spaceNr: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `space_nr`

warning: structure field `spaceMax` should have a snake case name
   --> src/defination.rs:683:9
    |
683 |     pub spaceMax: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `space_max`

warning: structure field `spaceTab` should have a snake case name
   --> src/defination.rs:684:9
    |
684 |     pub spaceTab: *mut libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `space_tab`

warning: structure field `nsNr` should have a snake case name
   --> src/defination.rs:705:9
    |
705 |     pub nsNr: libc::c_int,
    |         ^^^^ help: convert the identifier to snake case: `ns_nr`

warning: structure field `nsMax` should have a snake case name
   --> src/defination.rs:706:9
    |
706 |     pub nsMax: libc::c_int,
    |         ^^^^^ help: convert the identifier to snake case: `ns_max`

warning: structure field `nsTab` should have a snake case name
   --> src/defination.rs:707:9
    |
707 |     pub nsTab: *mut *const xmlChar,
    |         ^^^^^ help: convert the identifier to snake case: `ns_tab`

warning: structure field `pushTab` should have a snake case name
   --> src/defination.rs:709:9
    |
709 |     pub pushTab: *mut xmlStartTag,
    |         ^^^^^^^ help: convert the identifier to snake case: `push_tab`

warning: structure field `attsDefault` should have a snake case name
   --> src/defination.rs:710:9
    |
710 |     pub attsDefault: xmlHashTablePtr,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `atts_default`

warning: structure field `attsSpecial` should have a snake case name
   --> src/defination.rs:711:9
    |
711 |     pub attsSpecial: xmlHashTablePtr,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `atts_special`

warning: structure field `nsWellFormed` should have a snake case name
   --> src/defination.rs:712:9
    |
712 |     pub nsWellFormed: libc::c_int,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `ns_well_formed`

warning: structure field `dictNames` should have a snake case name
   --> src/defination.rs:714:9
    |
714 |     pub dictNames: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `dict_names`

warning: structure field `freeElemsNr` should have a snake case name
   --> src/defination.rs:715:9
    |
715 |     pub freeElemsNr: libc::c_int,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `free_elems_nr`

warning: structure field `freeElems` should have a snake case name
   --> src/defination.rs:716:9
    |
716 |     pub freeElems: xmlNodePtr,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `free_elems`

warning: structure field `freeAttrsNr` should have a snake case name
   --> src/defination.rs:717:9
    |
717 |     pub freeAttrsNr: libc::c_int,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `free_attrs_nr`

warning: structure field `freeAttrs` should have a snake case name
   --> src/defination.rs:718:9
    |
718 |     pub freeAttrs: xmlAttrPtr,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `free_attrs`

warning: structure field `lastError` should have a snake case name
   --> src/defination.rs:719:9
    |
719 |     pub lastError: xmlError,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `last_error`

warning: structure field `parseMode` should have a snake case name
   --> src/defination.rs:720:9
    |
720 |     pub parseMode: xmlParserMode,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `parse_mode`

warning: structure field `nodeInfo` should have a snake case name
   --> src/defination.rs:723:9
    |
723 |     pub nodeInfo: *mut xmlParserNodeInfo,
    |         ^^^^^^^^ help: convert the identifier to snake case: `node_info`

warning: structure field `nodeInfoNr` should have a snake case name
   --> src/defination.rs:724:9
    |
724 |     pub nodeInfoNr: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `node_info_nr`

warning: structure field `nodeInfoMax` should have a snake case name
   --> src/defination.rs:725:9
    |
725 |     pub nodeInfoMax: libc::c_int,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `node_info_max`

warning: structure field `nodeInfoTab` should have a snake case name
   --> src/defination.rs:726:9
    |
726 |     pub nodeInfoTab: *mut xmlParserNodeInfo,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `node_info_tab`

warning: structure field `nsDef` should have a snake case name
   --> src/defination.rs:756:9
    |
756 |     pub nsDef: *mut xmlNs,
    |         ^^^^^ help: convert the identifier to snake case: `ns_def`

warning: structure field `intSubset` should have a snake case name
   --> src/defination.rs:787:9
    |
787 |     pub intSubset: *mut _xmlDtd,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `int_subset`

warning: structure field `extSubset` should have a snake case name
   --> src/defination.rs:788:9
    |
788 |     pub extSubset: *mut _xmlDtd,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `ext_subset`

warning: structure field `oldNs` should have a snake case name
   --> src/defination.rs:789:9
    |
789 |     pub oldNs: *mut _xmlNs,
    |         ^^^^^ help: convert the identifier to snake case: `old_ns`

warning: structure field `URL` should have a snake case name
   --> src/defination.rs:794:9
    |
794 |     pub URL: *const xmlChar,
    |         ^^^ help: convert the identifier to snake case: `url`

warning: structure field `parseFlags` should have a snake case name
   --> src/defination.rs:798:9
    |
798 |     pub parseFlags: libc::c_int,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `parse_flags`

warning: structure field `ExternalID` should have a snake case name
   --> src/defination.rs:817:9
    |
817 |     pub ExternalID: *const xmlChar,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: structure field `SystemID` should have a snake case name
   --> src/defination.rs:818:9
    |
818 |     pub SystemID: *const xmlChar,
    |         ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: structure field `URI` should have a snake case name
   --> src/defination.rs:916:9
    |
916 |     pub URI: *const xmlChar,
    |         ^^^ help: convert the identifier to snake case: `uri`

warning: structure field `nsNr` should have a snake case name
   --> src/defination.rs:918:9
    |
918 |     pub nsNr: libc::c_int,
    |         ^^^^ help: convert the identifier to snake case: `ns_nr`

warning: structure field `userData` should have a snake case name
   --> src/defination.rs:945:9
    |
945 |     pub userData: *mut libc::c_void,
    |         ^^^^^^^^ help: convert the identifier to snake case: `user_data`

warning: structure field `nodeNr` should have a snake case name
   --> src/defination.rs:949:9
    |
949 |     pub nodeNr: libc::c_int,
    |         ^^^^^^ help: convert the identifier to snake case: `node_nr`

warning: structure field `nodeMax` should have a snake case name
   --> src/defination.rs:950:9
    |
950 |     pub nodeMax: libc::c_int,
    |         ^^^^^^^ help: convert the identifier to snake case: `node_max`

warning: structure field `nodeTab` should have a snake case name
   --> src/defination.rs:951:9
    |
951 |     pub nodeTab: *mut xmlNodePtr,
    |         ^^^^^^^ help: convert the identifier to snake case: `node_tab`

warning: structure field `finishDtd` should have a snake case name
   --> src/defination.rs:952:9
    |
952 |     pub finishDtd: libc::c_uint,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `finish_dtd`

warning: structure field `vstateNr` should have a snake case name
   --> src/defination.rs:956:9
    |
956 |     pub vstateNr: libc::c_int,
    |         ^^^^^^^^ help: convert the identifier to snake case: `vstate_nr`

warning: structure field `vstateMax` should have a snake case name
   --> src/defination.rs:957:9
    |
957 |     pub vstateMax: libc::c_int,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `vstate_max`

warning: structure field `vstateTab` should have a snake case name
   --> src/defination.rs:958:9
    |
958 |     pub vstateTab: *mut xmlValidState,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `vstate_tab`

warning: structure field `internalSubset` should have a snake case name
   --> src/defination.rs:990:9
    |
990 |     pub internalSubset: internalSubsetSAXFunc,
    |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `internal_subset`

warning: structure field `isStandalone` should have a snake case name
   --> src/defination.rs:991:9
    |
991 |     pub isStandalone: isStandaloneSAXFunc,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `is_standalone`

warning: structure field `hasInternalSubset` should have a snake case name
   --> src/defination.rs:992:9
    |
992 |     pub hasInternalSubset: hasInternalSubsetSAXFunc,
    |         ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `has_internal_subset`

warning: structure field `hasExternalSubset` should have a snake case name
   --> src/defination.rs:993:9
    |
993 |     pub hasExternalSubset: hasExternalSubsetSAXFunc,
    |         ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `has_external_subset`

warning: structure field `resolveEntity` should have a snake case name
   --> src/defination.rs:994:9
    |
994 |     pub resolveEntity: resolveEntitySAXFunc,
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `resolve_entity`

warning: structure field `getEntity` should have a snake case name
   --> src/defination.rs:995:9
    |
995 |     pub getEntity: getEntitySAXFunc,
    |         ^^^^^^^^^ help: convert the identifier to snake case: `get_entity`

warning: structure field `entityDecl` should have a snake case name
   --> src/defination.rs:996:9
    |
996 |     pub entityDecl: entityDeclSAXFunc,
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `entity_decl`

warning: structure field `notationDecl` should have a snake case name
   --> src/defination.rs:997:9
    |
997 |     pub notationDecl: notationDeclSAXFunc,
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `notation_decl`

warning: structure field `attributeDecl` should have a snake case name
   --> src/defination.rs:998:9
    |
998 |     pub attributeDecl: attributeDeclSAXFunc,
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `attribute_decl`

warning: structure field `elementDecl` should have a snake case name
   --> src/defination.rs:999:9
    |
999 |     pub elementDecl: elementDeclSAXFunc,
    |         ^^^^^^^^^^^ help: convert the identifier to snake case: `element_decl`

warning: structure field `unparsedEntityDecl` should have a snake case name
    --> src/defination.rs:1000:9
     |
1000 |     pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `unparsed_entity_decl`

warning: structure field `setDocumentLocator` should have a snake case name
    --> src/defination.rs:1001:9
     |
1001 |     pub setDocumentLocator: setDocumentLocatorSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `set_document_locator`

warning: structure field `startDocument` should have a snake case name
    --> src/defination.rs:1002:9
     |
1002 |     pub startDocument: startDocumentSAXFunc,
     |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `start_document`

warning: structure field `endDocument` should have a snake case name
    --> src/defination.rs:1003:9
     |
1003 |     pub endDocument: endDocumentSAXFunc,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `end_document`

warning: structure field `startElement` should have a snake case name
    --> src/defination.rs:1004:9
     |
1004 |     pub startElement: startElementSAXFunc,
     |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `start_element`

warning: structure field `endElement` should have a snake case name
    --> src/defination.rs:1005:9
     |
1005 |     pub endElement: endElementSAXFunc,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `end_element`

warning: structure field `ignorableWhitespace` should have a snake case name
    --> src/defination.rs:1008:9
     |
1008 |     pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `ignorable_whitespace`

warning: structure field `processingInstruction` should have a snake case name
    --> src/defination.rs:1009:9
     |
1009 |     pub processingInstruction: processingInstructionSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `processing_instruction`

warning: structure field `fatalError` should have a snake case name
    --> src/defination.rs:1013:9
     |
1013 |     pub fatalError: fatalErrorSAXFunc,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `fatal_error`

warning: structure field `getParameterEntity` should have a snake case name
    --> src/defination.rs:1014:9
     |
1014 |     pub getParameterEntity: getParameterEntitySAXFunc,
     |         ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parameter_entity`

warning: structure field `cdataBlock` should have a snake case name
    --> src/defination.rs:1015:9
     |
1015 |     pub cdataBlock: cdataBlockSAXFunc,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `cdata_block`

warning: structure field `externalSubset` should have a snake case name
    --> src/defination.rs:1016:9
     |
1016 |     pub externalSubset: externalSubsetSAXFunc,
     |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `external_subset`

warning: structure field `startElementNs` should have a snake case name
    --> src/defination.rs:1019:9
     |
1019 |     pub startElementNs: startElementNsSAX2Func,
     |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `start_element_ns`

warning: structure field `endElementNs` should have a snake case name
    --> src/defination.rs:1020:9
     |
1020 |     pub endElementNs: endElementNsSAX2Func,
     |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `end_element_ns`

warning: structure field `ExternalID` should have a snake case name
    --> src/defination.rs:1070:9
     |
1070 |     pub ExternalID: *const xmlChar,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: structure field `SystemID` should have a snake case name
    --> src/defination.rs:1071:9
     |
1071 |     pub SystemID: *const xmlChar,
     |         ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: structure field `URI` should have a snake case name
    --> src/defination.rs:1073:9
     |
1073 |     pub URI: *const xmlChar,
     |         ^^^ help: convert the identifier to snake case: `uri`

warning: structure field `getPublicId` should have a snake case name
    --> src/defination.rs:1139:9
     |
1139 |     pub getPublicId: Option<unsafe extern "C" fn(_: *mut libc::c_void)
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `get_public_id`

warning: structure field `getSystemId` should have a snake case name
    --> src/defination.rs:1141:9
     |
1141 |     pub getSystemId: Option<unsafe extern "C" fn(_: *mut libc::c_void)
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `get_system_id`

warning: structure field `getLineNumber` should have a snake case name
    --> src/defination.rs:1143:9
     |
1143 |     pub getLineNumber: Option<unsafe extern "C" fn(_: *mut libc::c_void)
     |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_line_number`

warning: structure field `getColumnNumber` should have a snake case name
    --> src/defination.rs:1145:9
     |
1145 |     pub getColumnNumber: Option<unsafe extern "C" fn(_: *mut libc::c_void)
     |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_column_number`

warning: structure field `contentIO` should have a snake case name
    --> src/defination.rs:1243:9
     |
1243 |     pub contentIO: *mut xmlChar,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `content_io`

warning: structure field `internalSubset` should have a snake case name
    --> src/defination.rs:2097:9
     |
2097 |     pub internalSubset: internalSubsetSAXFunc,
     |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `internal_subset`

warning: structure field `isStandalone` should have a snake case name
    --> src/defination.rs:2098:9
     |
2098 |     pub isStandalone: isStandaloneSAXFunc,
     |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `is_standalone`

warning: structure field `hasInternalSubset` should have a snake case name
    --> src/defination.rs:2099:9
     |
2099 |     pub hasInternalSubset: hasInternalSubsetSAXFunc,
     |         ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `has_internal_subset`

warning: structure field `hasExternalSubset` should have a snake case name
    --> src/defination.rs:2100:9
     |
2100 |     pub hasExternalSubset: hasExternalSubsetSAXFunc,
     |         ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `has_external_subset`

warning: structure field `resolveEntity` should have a snake case name
    --> src/defination.rs:2101:9
     |
2101 |     pub resolveEntity: resolveEntitySAXFunc,
     |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `resolve_entity`

warning: structure field `getEntity` should have a snake case name
    --> src/defination.rs:2102:9
     |
2102 |     pub getEntity: getEntitySAXFunc,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `get_entity`

warning: structure field `entityDecl` should have a snake case name
    --> src/defination.rs:2103:9
     |
2103 |     pub entityDecl: entityDeclSAXFunc,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `entity_decl`

warning: structure field `notationDecl` should have a snake case name
    --> src/defination.rs:2104:9
     |
2104 |     pub notationDecl: notationDeclSAXFunc,
     |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `notation_decl`

warning: structure field `attributeDecl` should have a snake case name
    --> src/defination.rs:2105:9
     |
2105 |     pub attributeDecl: attributeDeclSAXFunc,
     |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `attribute_decl`

warning: structure field `elementDecl` should have a snake case name
    --> src/defination.rs:2106:9
     |
2106 |     pub elementDecl: elementDeclSAXFunc,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `element_decl`

warning: structure field `unparsedEntityDecl` should have a snake case name
    --> src/defination.rs:2107:9
     |
2107 |     pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `unparsed_entity_decl`

warning: structure field `setDocumentLocator` should have a snake case name
    --> src/defination.rs:2108:9
     |
2108 |     pub setDocumentLocator: setDocumentLocatorSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `set_document_locator`

warning: structure field `startDocument` should have a snake case name
    --> src/defination.rs:2109:9
     |
2109 |     pub startDocument: startDocumentSAXFunc,
     |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `start_document`

warning: structure field `endDocument` should have a snake case name
    --> src/defination.rs:2110:9
     |
2110 |     pub endDocument: endDocumentSAXFunc,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `end_document`

warning: structure field `startElement` should have a snake case name
    --> src/defination.rs:2111:9
     |
2111 |     pub startElement: startElementSAXFunc,
     |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `start_element`

warning: structure field `endElement` should have a snake case name
    --> src/defination.rs:2112:9
     |
2112 |     pub endElement: endElementSAXFunc,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `end_element`

warning: structure field `ignorableWhitespace` should have a snake case name
    --> src/defination.rs:2115:9
     |
2115 |     pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `ignorable_whitespace`

warning: structure field `processingInstruction` should have a snake case name
    --> src/defination.rs:2116:9
     |
2116 |     pub processingInstruction: processingInstructionSAXFunc,
     |         ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `processing_instruction`

warning: structure field `fatalError` should have a snake case name
    --> src/defination.rs:2120:9
     |
2120 |     pub fatalError: fatalErrorSAXFunc,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `fatal_error`

warning: structure field `getParameterEntity` should have a snake case name
    --> src/defination.rs:2121:9
     |
2121 |     pub getParameterEntity: getParameterEntitySAXFunc,
     |         ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `get_parameter_entity`

warning: structure field `cdataBlock` should have a snake case name
    --> src/defination.rs:2122:9
     |
2122 |     pub cdataBlock: cdataBlockSAXFunc,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `cdata_block`

warning: structure field `externalSubset` should have a snake case name
    --> src/defination.rs:2123:9
     |
2123 |     pub externalSubset: externalSubsetSAXFunc,
     |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `external_subset`

warning: structure field `nbShortRange` should have a snake case name
    --> src/defination.rs:2193:9
     |
2193 |     pub nbShortRange: libc::c_int,
     |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `nb_short_range`

warning: structure field `nbLongRange` should have a snake case name
    --> src/defination.rs:2194:9
     |
2194 |     pub nbLongRange: libc::c_int,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `nb_long_range`

warning: structure field `shortRange` should have a snake case name
    --> src/defination.rs:2195:9
     |
2195 |     pub shortRange: *const xmlChSRange,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `short_range`

warning: structure field `longRange` should have a snake case name
    --> src/defination.rs:2196:9
     |
2196 |     pub longRange: *const xmlChLRange,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `long_range`

warning: structure field `nbAttrs` should have a snake case name
    --> src/defination.rs:2225:9
     |
2225 |     pub nbAttrs: libc::c_int,
     |         ^^^^^^^ help: convert the identifier to snake case: `nb_attrs`

warning: structure field `maxAttrs` should have a snake case name
    --> src/defination.rs:2226:9
     |
2226 |     pub maxAttrs: libc::c_int,
     |         ^^^^^^^^ help: convert the identifier to snake case: `max_attrs`

warning: structure field `oldTag` should have a snake case name
    --> src/defination.rs:2353:9
     |
2353 |     pub oldTag: *const libc::c_char,
     |         ^^^^^^ help: convert the identifier to snake case: `old_tag`

warning: structure field `newTag` should have a snake case name
    --> src/defination.rs:2354:9
     |
2354 |     pub newTag: *const libc::c_char,
     |         ^^^^^^ help: convert the identifier to snake case: `new_tag`

warning: structure field `startTag` should have a snake case name
    --> src/defination.rs:2376:9
     |
2376 |     pub startTag: libc::c_char,
     |         ^^^^^^^^ help: convert the identifier to snake case: `start_tag`

warning: structure field `endTag` should have a snake case name
    --> src/defination.rs:2377:9
     |
2377 |     pub endTag: libc::c_char,
     |         ^^^^^^ help: convert the identifier to snake case: `end_tag`

warning: structure field `saveEndTag` should have a snake case name
    --> src/defination.rs:2378:9
     |
2378 |     pub saveEndTag: libc::c_char,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `save_end_tag`

warning: structure field `varHash` should have a snake case name
    --> src/defination.rs:2447:9
     |
2447 |     pub varHash: xmlHashTablePtr,
     |         ^^^^^^^ help: convert the identifier to snake case: `var_hash`

warning: structure field `funcHash` should have a snake case name
    --> src/defination.rs:2453:9
     |
2453 |     pub funcHash: xmlHashTablePtr,
     |         ^^^^^^^^ help: convert the identifier to snake case: `func_hash`

warning: structure field `nsNr` should have a snake case name
    --> src/defination.rs:2458:9
     |
2458 |     pub nsNr: libc::c_int,
     |         ^^^^ help: convert the identifier to snake case: `ns_nr`

warning: structure field `contextSize` should have a snake case name
    --> src/defination.rs:2460:9
     |
2460 |     pub contextSize: libc::c_int,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `context_size`

warning: structure field `proximityPosition` should have a snake case name
    --> src/defination.rs:2461:9
     |
2461 |     pub proximityPosition: libc::c_int,
     |         ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `proximity_position`

warning: structure field `nsHash` should have a snake case name
    --> src/defination.rs:2465:9
     |
2465 |     pub nsHash: xmlHashTablePtr,
     |         ^^^^^^ help: convert the identifier to snake case: `ns_hash`

warning: structure field `varLookupFunc` should have a snake case name
    --> src/defination.rs:2466:9
     |
2466 |     pub varLookupFunc: xmlXPathVariableLookupFunc,
     |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `var_lookup_func`

warning: structure field `varLookupData` should have a snake case name
    --> src/defination.rs:2467:9
     |
2467 |     pub varLookupData: *mut libc::c_void,
     |         ^^^^^^^^^^^^^ help: convert the identifier to snake case: `var_lookup_data`

warning: structure field `functionURI` should have a snake case name
    --> src/defination.rs:2470:9
     |
2470 |     pub functionURI: *const xmlChar,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `function_uri`

warning: structure field `funcLookupFunc` should have a snake case name
    --> src/defination.rs:2471:9
     |
2471 |     pub funcLookupFunc: xmlXPathFuncLookupFunc,
     |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `func_lookup_func`

warning: structure field `funcLookupData` should have a snake case name
    --> src/defination.rs:2472:9
     |
2472 |     pub funcLookupData: *mut libc::c_void,
     |         ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `func_lookup_data`

warning: structure field `tmpNsList` should have a snake case name
    --> src/defination.rs:2473:9
     |
2473 |     pub tmpNsList: *mut xmlNsPtr,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `tmp_ns_list`

warning: structure field `tmpNsNr` should have a snake case name
    --> src/defination.rs:2474:9
     |
2474 |     pub tmpNsNr: libc::c_int,
     |         ^^^^^^^ help: convert the identifier to snake case: `tmp_ns_nr`

warning: structure field `userData` should have a snake case name
    --> src/defination.rs:2475:9
     |
2475 |     pub userData: *mut libc::c_void,
     |         ^^^^^^^^ help: convert the identifier to snake case: `user_data`

warning: structure field `lastError` should have a snake case name
    --> src/defination.rs:2477:9
     |
2477 |     pub lastError: xmlError,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `last_error`

warning: structure field `debugNode` should have a snake case name
    --> src/defination.rs:2478:9
     |
2478 |     pub debugNode: xmlNodePtr,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `debug_node`

warning: structure field `opLimit` should have a snake case name
    --> src/defination.rs:2482:9
     |
2482 |     pub opLimit: libc::c_ulong,
     |         ^^^^^^^ help: convert the identifier to snake case: `op_limit`

warning: structure field `opCount` should have a snake case name
    --> src/defination.rs:2483:9
     |
2483 |     pub opCount: libc::c_ulong,
     |         ^^^^^^^ help: convert the identifier to snake case: `op_count`

warning: structure field `valueNr` should have a snake case name
    --> src/defination.rs:2531:9
     |
2531 |     pub valueNr: libc::c_int,
     |         ^^^^^^^ help: convert the identifier to snake case: `value_nr`

warning: structure field `valueMax` should have a snake case name
    --> src/defination.rs:2532:9
     |
2532 |     pub valueMax: libc::c_int,
     |         ^^^^^^^^ help: convert the identifier to snake case: `value_max`

warning: structure field `valueTab` should have a snake case name
    --> src/defination.rs:2533:9
     |
2533 |     pub valueTab: *mut xmlXPathObjectPtr,
     |         ^^^^^^^^ help: convert the identifier to snake case: `value_tab`

warning: structure field `valueFrame` should have a snake case name
    --> src/defination.rs:2537:9
     |
2537 |     pub valueFrame: libc::c_int,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `value_frame`

warning: structure field `nbStep` should have a snake case name
    --> src/defination.rs:2547:9
     |
2547 |     pub nbStep: libc::c_int,
     |         ^^^^^^ help: convert the identifier to snake case: `nb_step`

warning: structure field `maxStep` should have a snake case name
    --> src/defination.rs:2548:9
     |
2548 |     pub maxStep: libc::c_int,
     |         ^^^^^^^ help: convert the identifier to snake case: `max_step`

warning: structure field `cacheURI` should have a snake case name
    --> src/defination.rs:2584:9
     |
2584 |     pub cacheURI: *mut libc::c_void,
     |         ^^^^^^^^ help: convert the identifier to snake case: `cache_uri`

warning: structure field `nodeNr` should have a snake case name
    --> src/defination.rs:2629:9
     |
2629 |     pub nodeNr: libc::c_int,
     |         ^^^^^^ help: convert the identifier to snake case: `node_nr`

warning: structure field `nodeMax` should have a snake case name
    --> src/defination.rs:2630:9
     |
2630 |     pub nodeMax: libc::c_int,
     |         ^^^^^^^ help: convert the identifier to snake case: `node_max`

warning: structure field `nodeTab` should have a snake case name
    --> src/defination.rs:2631:9
     |
2631 |     pub nodeTab: *mut xmlNodePtr,
     |         ^^^^^^^ help: convert the identifier to snake case: `node_tab`

warning: structure field `locNr` should have a snake case name
    --> src/defination.rs:2785:9
     |
2785 |     pub locNr: libc::c_int,
     |         ^^^^^ help: convert the identifier to snake case: `loc_nr`

warning: structure field `locMax` should have a snake case name
    --> src/defination.rs:2786:9
     |
2786 |     pub locMax: libc::c_int,
     |         ^^^^^^ help: convert the identifier to snake case: `loc_max`

warning: structure field `locTab` should have a snake case name
    --> src/defination.rs:2787:9
     |
2787 |     pub locTab: *mut xmlXPathObjectPtr,
     |         ^^^^^^ help: convert the identifier to snake case: `loc_tab`

warning: structure field `nodesetObjs` should have a snake case name
    --> src/defination.rs:2817:9
     |
2817 |     pub nodesetObjs: xmlPointerListPtr,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `nodeset_objs`

warning: structure field `stringObjs` should have a snake case name
    --> src/defination.rs:2818:9
     |
2818 |     pub stringObjs: xmlPointerListPtr,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `string_objs`

warning: structure field `booleanObjs` should have a snake case name
    --> src/defination.rs:2819:9
     |
2819 |     pub booleanObjs: xmlPointerListPtr,
     |         ^^^^^^^^^^^ help: convert the identifier to snake case: `boolean_objs`

warning: structure field `numberObjs` should have a snake case name
    --> src/defination.rs:2820:9
     |
2820 |     pub numberObjs: xmlPointerListPtr,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `number_objs`

warning: structure field `miscObjs` should have a snake case name
    --> src/defination.rs:2821:9
     |
2821 |     pub miscObjs: xmlPointerListPtr,
     |         ^^^^^^^^ help: convert the identifier to snake case: `misc_objs`

warning: structure field `maxNodeset` should have a snake case name
    --> src/defination.rs:2822:9
     |
2822 |     pub maxNodeset: libc::c_int,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `max_nodeset`

warning: structure field `maxString` should have a snake case name
    --> src/defination.rs:2823:9
     |
2823 |     pub maxString: libc::c_int,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `max_string`

warning: structure field `maxBoolean` should have a snake case name
    --> src/defination.rs:2824:9
     |
2824 |     pub maxBoolean: libc::c_int,
     |         ^^^^^^^^^^ help: convert the identifier to snake case: `max_boolean`

warning: structure field `maxNumber` should have a snake case name
    --> src/defination.rs:2825:9
     |
2825 |     pub maxNumber: libc::c_int,
     |         ^^^^^^^^^ help: convert the identifier to snake case: `max_number`

warning: structure field `maxMisc` should have a snake case name
    --> src/defination.rs:2826:9
     |
2826 |     pub maxMisc: libc::c_int,
     |         ^^^^^^^ help: convert the identifier to snake case: `max_misc`

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:933:28
     |
933  |    fn xmlFreePattern(comp: xmlPatternPtr);
     |                            ^^^^^^^^^^^^^ not FFI-safe
     |
     = note: `#[warn(improper_ctypes)]` on by default
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:935:32
     |
935  |    fn xmlFreePatternList(comp: xmlPatternPtr);
     |                                ^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:942:9
     |
942  |    ) -> xmlPatternPtr;
     |         ^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:944:34
     |
944  |    fn xmlPatternStreamable(comp: xmlPatternPtr) -> libc::c_int;
     |                                  ^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:946:32
     |
946  |    fn xmlPatternMaxDepth(comp: xmlPatternPtr) -> libc::c_int;
     |                                ^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:948:32
     |
948  |    fn xmlPatternMinDepth(comp: xmlPatternPtr) -> libc::c_int;
     |                                ^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:950:32
     |
950  |    fn xmlPatternFromRoot(comp: xmlPatternPtr) -> libc::c_int;
     |                                ^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:952:37
     |
952  |    fn xmlPatternGetStreamCtxt(comp: xmlPatternPtr) -> xmlStreamCtxtPtr;
     |                                     ^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlStreamCtxt`, which is not FFI-safe
    --> src/ffi.rs:952:55
     |
952  |    fn xmlPatternGetStreamCtxt(comp: xmlPatternPtr) -> xmlStreamCtxtPtr;
     |                                                       ^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2439:1
     |
2439 | pub struct _xmlStreamCtxt {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlStreamCtxt`, which is not FFI-safe
    --> src/ffi.rs:954:33
     |
954  |    fn xmlFreeStreamCtxt(stream: xmlStreamCtxtPtr);
     |                                 ^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2439:1
     |
2439 | pub struct _xmlStreamCtxt {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlStreamCtxt`, which is not FFI-safe
    --> src/ffi.rs:957:15
     |
957  |       stream: xmlStreamCtxtPtr,
     |               ^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2439:1
     |
2439 | pub struct _xmlStreamCtxt {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlStreamCtxt`, which is not FFI-safe
    --> src/ffi.rs:964:15
     |
964  |       stream: xmlStreamCtxtPtr,
     |               ^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2439:1
     |
2439 | pub struct _xmlStreamCtxt {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlStreamCtxt`, which is not FFI-safe
    --> src/ffi.rs:969:28
     |
969  |    fn xmlStreamPop(stream: xmlStreamCtxtPtr) -> libc::c_int;
     |                            ^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2439:1
     |
2439 | pub struct _xmlStreamCtxt {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlStreamCtxt`, which is not FFI-safe
    --> src/ffi.rs:971:37
     |
971  |    fn xmlStreamWantsAnyNode(stream: xmlStreamCtxtPtr) -> libc::c_int;
     |                                     ^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2439:1
     |
2439 | pub struct _xmlStreamCtxt {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:989:30
     |
989  |    fn xmlXPathNsLookup(ctxt: xmlXPathContextPtr, prefix: *const xmlChar) -> *const xmlChar;
     |                              ^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:991:30
     |
991  |    fn xmlXPathEvalExpr(ctxt: xmlXPathParserContextPtr);
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:993:33
     |
993  |    fn xmlXPathCtxtCompile(ctxt: xmlXPathContextPtr, str: *const xmlChar) -> xmlXPathCompExprPtr;
     |                                 ^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:993:77
     |
993  |    fn xmlXPathCtxtCompile(ctxt: xmlXPathContextPtr, str: *const xmlChar) -> xmlXPathCompExprPtr;
     |                                                                             ^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:995:45
     |
995  |    fn xmlXPathEvaluatePredicateResult(ctxt: xmlXPathParserContextPtr, res: xmlXPathObjectPtr) -> libc::c_int;
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:997:37
     |
997  |    fn xmlXPathCeilingFunction(ctxt: xmlXPathParserContextPtr, nargs: libc::c_int);
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1003:39
     |
1003 |    fn xmlXPathFreeParserContext(ctxt: xmlXPathParserContextPtr);
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1005:33
     |
1005 |    fn xmlXPathEqualValues(ctxt: xmlXPathParserContextPtr) -> libc::c_int;
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1007:36
     |
1007 |    fn xmlXPathNotEqualValues(ctxt: xmlXPathParserContextPtr) -> libc::c_int;
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1009:31
     |
1009 |    fn xmlXPathNextChild(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1011:32
     |
1011 |    fn xmlXPathNextParent(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1013:34
     |
1013 |    fn xmlXPathLastFunction(ctxt: xmlXPathParserContextPtr, nargs: libc::c_int);
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1015:38
     |
1015 |    fn xmlXPathPositionFunction(ctxt: xmlXPathParserContextPtr, nargs: libc::c_int);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `extern` block uses type `_xmlPattern`, which is not FFI-safe
    --> src/ffi.rs:1017:34
     |
1017 |    fn xmlXPathNextAncestor(ctxt: xmlXPathParserContextPtr, cur: xmlNodePtr) -> xmlNodePtr;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
     |
     = help: consider adding a member to this struct
     = note: this struct has no fields
note: the type is defined here
    --> src/defination.rs:2435:1
     |
2435 | pub struct _xmlPattern {}
     | ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `xmlCheckVersion` should have a snake case name
 --> src/parserInternals.rs:1:15
  |
1 | pub unsafe fn xmlCheckVersion(mut version: libc::c_int) {
  |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_check_version`

warning: function `xmlErrMemory` should have a snake case name
  --> src/parserInternals.rs:57:15
   |
57 | pub unsafe fn xmlErrMemory(mut ctxt: xmlParserCtxtPtr,
   |               ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_err_memory`

warning: function `__xmlErrEncoding` should have a snake case name
   --> src/parserInternals.rs:103:15
    |
103 | pub unsafe fn __xmlErrEncoding(mut ctxt: xmlParserCtxtPtr,
    |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `__xml_err_encoding`

warning: function `xmlErrInternal` should have a snake case name
   --> src/parserInternals.rs:135:11
    |
135 | unsafe fn xmlErrInternal(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_err_internal`

warning: function `xmlErrEncodingInt` should have a snake case name
   --> src/parserInternals.rs:169:11
    |
169 | unsafe fn xmlErrEncodingInt(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_err_encoding_int`

warning: function `xmlIsLetter` should have a snake case name
   --> src/parserInternals.rs:205:15
    |
205 | pub unsafe fn xmlIsLetter(mut c: libc::c_int) -> libc::c_int {
    |               ^^^^^^^^^^^ help: convert the identifier to snake case: `xml_is_letter`

warning: function `xmlParserInputRead` should have a snake case name
   --> src/parserInternals.rs:285:15
    |
285 | pub unsafe fn xmlParserInputRead(mut in_0: xmlParserInputPtr,
    |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_input_read`

warning: function `xmlParserInputGrow_parserInternals` should have a snake case name
   --> src/parserInternals.rs:302:15
    |
302 | pub unsafe fn xmlParserInputGrow_parserInternals(mut in_0: xmlParserInputPtr,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_input_grow_parser_internals`

warning: function `xmlParserInputShrink_parserInternals` should have a snake case name
   --> src/parserInternals.rs:373:15
    |
373 | pub unsafe fn xmlParserInputShrink_parserInternals(mut in_0: xmlParserInputPtr) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_input_shrink_parser_internals`

warning: function `xmlNextChar_parserInternals` should have a snake case name
   --> src/parserInternals.rs:455:15
    |
455 | pub unsafe fn xmlNextChar_parserInternals(mut ctxt: xmlParserCtxtPtr) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_next_char_parser_internals`

warning: function `xmlCurrentChar` should have a snake case name
   --> src/parserInternals.rs:709:15
    |
709 | pub unsafe fn xmlCurrentChar(mut ctxt: xmlParserCtxtPtr,
    |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_current_char`

warning: function `xmlStringCurrentChar` should have a snake case name
   --> src/parserInternals.rs:974:15
    |
974 | pub unsafe fn xmlStringCurrentChar(mut ctxt: xmlParserCtxtPtr,
    |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_string_current_char`

warning: function `xmlCopyCharMultiByte` should have a snake case name
    --> src/parserInternals.rs:1161:15
     |
1161 | pub unsafe fn xmlCopyCharMultiByte(mut out: *mut xmlChar,
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_copy_char_multi_byte`

warning: function `xmlCopyChar_parserInternals` should have a snake case name
    --> src/parserInternals.rs:1226:15
     |
1226 | pub unsafe fn xmlCopyChar_parserInternals(mut len: libc::c_int,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_copy_char_parser_internals`

warning: function `xmlSwitchEncoding_parserInternals` should have a snake case name
    --> src/parserInternals.rs:1246:15
     |
1246 | pub unsafe fn xmlSwitchEncoding_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_switch_encoding_parser_internals`

warning: function `xmlSwitchInputEncodingInt` should have a snake case name
    --> src/parserInternals.rs:1447:11
     |
1447 | unsafe fn xmlSwitchInputEncodingInt(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_switch_input_encoding_int`

warning: function `xmlSwitchInputEncoding` should have a snake case name
    --> src/parserInternals.rs:1612:15
     |
1612 | pub unsafe fn xmlSwitchInputEncoding(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_switch_input_encoding`

warning: function `xmlSwitchToEncodingInt` should have a snake case name
    --> src/parserInternals.rs:1638:11
     |
1638 | unsafe fn xmlSwitchToEncodingInt(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_switch_to_encoding_int`

warning: function `xmlSwitchToEncoding_parserInternals` should have a snake case name
    --> src/parserInternals.rs:1672:15
     |
1672 | pub unsafe fn xmlSwitchToEncoding_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_switch_to_encoding_parser_internals`

warning: function `xmlFreeInputStream_parserInternals` should have a snake case name
    --> src/parserInternals.rs:1690:15
     |
1690 | pub unsafe fn xmlFreeInputStream_parserInternals(mut input: xmlParserInputPtr) {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_free_input_stream_parser_internals`

warning: function `xmlNewInputStream_parserInternals` should have a snake case name
    --> src/parserInternals.rs:1728:15
     |
1728 | pub unsafe fn xmlNewInputStream_parserInternals(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_new_input_stream_parser_internals`

warning: function `xmlNewIOInputStream_parserInternals` should have a snake case name
    --> src/parserInternals.rs:1770:15
     |
1770 | pub unsafe fn xmlNewIOInputStream_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_new_ioinput_stream_parser_internals`

warning: variable `inputStream` should have a snake case name
    --> src/parserInternals.rs:1775:13
     |
1775 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^^^^^^^ help: convert the identifier to snake case: `input_stream`

warning: function `xmlNewEntityInputStream` should have a snake case name
    --> src/parserInternals.rs:1805:15
     |
1805 | pub unsafe fn xmlNewEntityInputStream(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_new_entity_input_stream`

warning: function `xmlNewStringInputStream_parserInternals` should have a snake case name
    --> src/parserInternals.rs:1889:15
     |
1889 | pub unsafe fn xmlNewStringInputStream_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_new_string_input_stream_parser_internals`

warning: function `xmlNewInputFromFile` should have a snake case name
    --> src/parserInternals.rs:1933:15
     |
1933 | pub unsafe fn xmlNewInputFromFile(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_new_input_from_file`

warning: variable `inputStream` should have a snake case name
    --> src/parserInternals.rs:1938:13
     |
1938 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
     |             ^^^^^^^^^^^ help: convert the identifier to snake case: `input_stream`

warning: variable `URI` should have a snake case name
    --> src/parserInternals.rs:1940:13
     |
1940 |     let mut URI: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^ help: convert the identifier to snake case: `uri`

warning: function `xmlInitParserCtxt` should have a snake case name
    --> src/parserInternals.rs:2008:15
     |
2008 | pub unsafe fn xmlInitParserCtxt(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_init_parser_ctxt`

warning: function `xmlFreeParserCtxt_parserInternals` should have a snake case name
    --> src/parserInternals.rs:2239:15
     |
2239 | pub unsafe fn xmlFreeParserCtxt_parserInternals(mut ctxt: xmlParserCtxtPtr) {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_free_parser_ctxt_parser_internals`

warning: function `xmlNewParserCtxt_parserInternals` should have a snake case name
    --> src/parserInternals.rs:2407:15
     |
2407 | pub unsafe fn xmlNewParserCtxt_parserInternals() -> xmlParserCtxtPtr {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_new_parser_ctxt_parser_internals`

warning: function `xmlClearParserCtxt` should have a snake case name
    --> src/parserInternals.rs:2439:15
     |
2439 | pub unsafe fn xmlClearParserCtxt(mut ctxt: xmlParserCtxtPtr) {
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_clear_parser_ctxt`

warning: function `xmlParserFindNodeInfo` should have a snake case name
    --> src/parserInternals.rs:2454:15
     |
2454 | pub unsafe fn xmlParserFindNodeInfo(ctx: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_find_node_info`

warning: function `xmlInitNodeInfoSeq_parserInternals` should have a snake case name
    --> src/parserInternals.rs:2477:15
     |
2477 | pub unsafe fn xmlInitNodeInfoSeq_parserInternals(mut seq:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_init_node_info_seq_parser_internals`

warning: function `xmlClearNodeInfoSeq` should have a snake case name
    --> src/parserInternals.rs:2492:15
     |
2492 | pub unsafe fn xmlClearNodeInfoSeq(mut seq:
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_clear_node_info_seq`

warning: function `xmlParserFindNodeInfoIndex` should have a snake case name
    --> src/parserInternals.rs:2513:15
     |
2513 | pub unsafe fn xmlParserFindNodeInfoIndex(seq:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_find_node_info_index`

warning: function `xmlParserAddNodeInfo_parserInternals` should have a snake case name
    --> src/parserInternals.rs:2596:15
     |
2596 | pub unsafe fn xmlParserAddNodeInfo_parserInternals(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_add_node_info_parser_internals`

warning: function `xmlPedanticParserDefault` should have a snake case name
    --> src/parserInternals.rs:2683:15
     |
2683 | pub unsafe fn xmlPedanticParserDefault(mut val: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_pedantic_parser_default`

warning: function `xmlLineNumbersDefault` should have a snake case name
    --> src/parserInternals.rs:2699:15
     |
2699 | pub unsafe fn xmlLineNumbersDefault(mut val: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_line_numbers_default`

warning: function `xmlSubstituteEntitiesDefault` should have a snake case name
    --> src/parserInternals.rs:2719:15
     |
2719 | pub unsafe fn xmlSubstituteEntitiesDefault(mut val: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_substitute_entities_default`

warning: function `xmlKeepBlanksDefault` should have a snake case name
    --> src/parserInternals.rs:2756:15
     |
2756 | pub unsafe fn xmlKeepBlanksDefault(mut val: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_keep_blanks_default`

warning: function `xmlClearNodeInfoSeq_rust` should have a snake case name
   --> src/parserInternals_rust.rs:272:15
    |
272 | pub unsafe fn xmlClearNodeInfoSeq_rust(mut seq:xmlParserNodeInfoSeqPtr){
    |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_clear_node_info_seq_rust`

warning: function `xmlParserFindNodeInfoIndex_rust` should have a snake case name
   --> src/parserInternals_rust.rs:280:15
    |
280 | pub unsafe fn xmlParserFindNodeInfoIndex_rust(seq:
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_find_node_info_index_rust`

warning: function `xmlParserAddNodeInfo_rust` should have a snake case name
   --> src/parserInternals_rust.rs:290:15
    |
290 | pub unsafe fn xmlParserAddNodeInfo_rust(mut ctxt: xmlParserCtxtPtr,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_add_node_info_rust`

warning: function `xmlPedanticParserDefault_rust` should have a snake case name
   --> src/parserInternals_rust.rs:297:15
    |
297 | pub unsafe fn xmlPedanticParserDefault_rust(mut val: libc::c_int)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_pedantic_parser_default_rust`

warning: function `xmlLineNumbersDefault_rust` should have a snake case name
   --> src/parserInternals_rust.rs:306:15
    |
306 | pub unsafe fn xmlLineNumbersDefault_rust(mut val: libc::c_int)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_line_numbers_default_rust`

warning: function `xmlSubstituteEntitiesDefault_rust` should have a snake case name
   --> src/parserInternals_rust.rs:315:16
    |
315 |  pub unsafe fn xmlSubstituteEntitiesDefault_rust(mut val: libc::c_int)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_substitute_entities_default_rust`

warning: function `xmlKeepBlanksDefault_rust` should have a snake case name
   --> src/parserInternals_rust.rs:324:16
    |
324 |  pub unsafe fn xmlKeepBlanksDefault_rust(mut val: libc::c_int)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_keep_blanks_default_rust`

warning: function `xmlParserEntityCheck` should have a snake case name
 --> src/parser.rs:1:11
  |
1 | unsafe fn xmlParserEntityCheck(mut ctxt: xmlParserCtxtPtr,
  |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_entity_check`

warning: static variable `xmlParserMaxDepth` should have an upper case name
   --> src/parser.rs:186:16
    |
186 | pub static mut xmlParserMaxDepth: libc::c_uint =
    |                ^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_PARSER_MAX_DEPTH`

warning: static variable `xmlW3CPIs` should have an upper case name
   --> src/parser.rs:191:12
    |
191 | static mut xmlW3CPIs: [*const libc::c_char; 3] =
    |            ^^^^^^^^^ help: convert the identifier to upper case: `XML_W3_CPIS`

warning: function `xmlErrAttributeDup` should have a snake case name
   --> src/parser.rs:208:11
    |
208 | unsafe fn xmlErrAttributeDup(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_err_attribute_dup`

warning: function `xmlFatalErr` should have a snake case name
   --> src/parser.rs:257:11
    |
257 | unsafe fn xmlFatalErr(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^ help: convert the identifier to snake case: `xml_fatal_err`

warning: function `xmlFatalErrMsg` should have a snake case name
   --> src/parser.rs:586:11
    |
586 | unsafe fn xmlFatalErrMsg(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_fatal_err_msg`

warning: function `xmlWarningMsg` should have a snake case name
   --> src/parser.rs:619:11
    |
619 | unsafe fn xmlWarningMsg(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_warning_msg`

warning: function `xmlValidityError` should have a snake case name
   --> src/parser.rs:667:11
    |
667 | unsafe fn xmlValidityError(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_validity_error`

warning: function `xmlFatalErrMsgInt` should have a snake case name
   --> src/parser.rs:716:11
    |
716 | unsafe fn xmlFatalErrMsgInt(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_fatal_err_msg_int`

warning: function `xmlFatalErrMsgStrIntStr` should have a snake case name
   --> src/parser.rs:750:11
    |
750 | unsafe fn xmlFatalErrMsgStrIntStr(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_fatal_err_msg_str_int_str`

warning: function `xmlFatalErrMsgStr` should have a snake case name
   --> src/parser.rs:784:11
    |
784 | unsafe fn xmlFatalErrMsgStr(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_fatal_err_msg_str`

warning: function `xmlErrMsgStr` should have a snake case name
   --> src/parser.rs:816:11
    |
816 | unsafe fn xmlErrMsgStr(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_err_msg_str`

warning: function `xmlNsErr` should have a snake case name
   --> src/parser.rs:843:11
    |
843 | unsafe fn xmlNsErr(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^ help: convert the identifier to snake case: `xml_ns_err`

warning: function `xmlNsWarn` should have a snake case name
   --> src/parser.rs:874:11
    |
874 | unsafe fn xmlNsWarn(mut ctxt: xmlParserCtxtPtr,
    |           ^^^^^^^^^ help: convert the identifier to snake case: `xml_ns_warn`

warning: function `xmlHasFeature` should have a snake case name
   --> src/parser.rs:909:15
    |
909 | pub unsafe fn xmlHasFeature(mut feature: xmlFeature)
    |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_has_feature`

warning: function `xmlDetectSAX2` should have a snake case name
   --> src/parser.rs:960:11
    |
960 | unsafe fn xmlDetectSAX2(mut ctxt: xmlParserCtxtPtr) {
    |           ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_detect_sax2`

warning: function `xmlAttrNormalizeSpace` should have a snake case name
    --> src/parser.rs:1017:11
     |
1017 | unsafe fn xmlAttrNormalizeSpace(mut src: *const xmlChar,
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_attr_normalize_space`

warning: function `xmlAttrNormalizeSpace2` should have a snake case name
    --> src/parser.rs:1055:11
     |
1055 | unsafe fn xmlAttrNormalizeSpace2(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_attr_normalize_space2`

warning: function `xmlAddDefAttrs` should have a snake case name
    --> src/parser.rs:1116:11
     |
1116 | unsafe fn xmlAddDefAttrs(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_add_def_attrs`

warning: function `xmlAddSpecialAttr` should have a snake case name
    --> src/parser.rs:1333:11
     |
1333 | unsafe fn xmlAddSpecialAttr(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_add_special_attr`

warning: function `xmlCleanSpecialAttrCallback` should have a snake case name
    --> src/parser.rs:1356:22
     |
1356 | unsafe extern "C" fn xmlCleanSpecialAttrCallback(mut payload:
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_clean_special_attr_callback`

warning: function `xmlCleanSpecialAttr` should have a snake case name
    --> src/parser.rs:1376:11
     |
1376 | unsafe fn xmlCleanSpecialAttr(mut ctxt: xmlParserCtxtPtr) {
     |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_clean_special_attr`

warning: function `xmlCheckLanguageID` should have a snake case name
    --> src/parser.rs:1450:15
     |
1450 | pub unsafe fn xmlCheckLanguageID(mut lang: *const xmlChar)
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_check_language_id`

warning: function `nsPush` should have a snake case name
    --> src/parser.rs:1728:11
     |
1728 | unsafe fn nsPush(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^ help: convert the identifier to snake case: `ns_push`

warning: variable `URL` should have a snake case name
    --> src/parser.rs:1730:33
     |
1730 | ...                   mut URL: *const xmlChar) -> libc::c_int {
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `nsPop` should have a snake case name
    --> src/parser.rs:1799:11
     |
1799 | unsafe fn nsPop(mut ctxt: xmlParserCtxtPtr, mut nr: libc::c_int)
     |           ^^^^^ help: convert the identifier to snake case: `ns_pop`

warning: function `xmlCtxtGrowAttrs` should have a snake case name
    --> src/parser.rs:1823:11
     |
1823 | unsafe fn xmlCtxtGrowAttrs(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_grow_attrs`

warning: function `inputPush_parser` should have a snake case name
    --> src/parser.rs:1911:15
     |
1911 | pub unsafe fn inputPush_parser(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `input_push_parser`

warning: function `inputPop_parser` should have a snake case name
    --> src/parser.rs:1950:15
     |
1950 | pub unsafe fn inputPop_parser(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `input_pop_parser`

warning: function `nodePush` should have a snake case name
    --> src/parser.rs:1976:15
     |
1976 | pub unsafe fn nodePush(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^ help: convert the identifier to snake case: `node_push`

warning: function `nodePop_parser` should have a snake case name
    --> src/parser.rs:2025:15
     |
2025 | pub unsafe fn nodePop_parser(mut ctxt: xmlParserCtxtPtr) -> xmlNodePtr {
     |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `node_pop_parser`

warning: function `nameNsPush` should have a snake case name
    --> src/parser.rs:2053:11
     |
2053 | unsafe fn nameNsPush(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^ help: convert the identifier to snake case: `name_ns_push`

warning: variable `URI` should have a snake case name
    --> src/parser.rs:2056:37
     |
2056 | ...                   mut URI: *const xmlChar,
     |                           ^^^ help: convert the identifier to snake case: `uri`

warning: variable `nsNr` should have a snake case name
    --> src/parser.rs:2057:60
     |
2057 | ...                   mut line: libc::c_int, mut nsNr: libc::c_int)
     |                                                  ^^^^ help: convert the identifier to snake case: `ns_nr`

warning: function `nameNsPop` should have a snake case name
    --> src/parser.rs:2143:11
     |
2143 | unsafe fn nameNsPop(mut ctxt: xmlParserCtxtPtr) -> *const xmlChar {
     |           ^^^^^^^^^ help: convert the identifier to snake case: `name_ns_pop`

warning: function `namePush` should have a snake case name
    --> src/parser.rs:2168:15
     |
2168 | pub unsafe fn namePush(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^ help: convert the identifier to snake case: `name_push`

warning: function `namePop` should have a snake case name
    --> src/parser.rs:2207:15
     |
2207 | pub unsafe fn namePop(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^ help: convert the identifier to snake case: `name_pop`

warning: function `spacePush` should have a snake case name
    --> src/parser.rs:2224:11
     |
2224 | unsafe fn spacePush(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^ help: convert the identifier to snake case: `space_push`

warning: function `spacePop` should have a snake case name
    --> src/parser.rs:2253:11
     |
2253 | unsafe fn spacePop(mut ctxt: xmlParserCtxtPtr) -> libc::c_int {
     |           ^^^^^^^^ help: convert the identifier to snake case: `space_pop`

warning: function `xmlSHRINK` should have a snake case name
    --> src/parser.rs:2270:11
     |
2270 | unsafe fn xmlSHRINK(mut ctxt: xmlParserCtxtPtr) {
     |           ^^^^^^^^^ help: convert the identifier to snake case: `xml_shrink`

warning: function `xmlGROW` should have a snake case name
    --> src/parser.rs:2276:11
     |
2276 | unsafe fn xmlGROW(mut ctxt: xmlParserCtxtPtr) {
     |           ^^^^^^^ help: convert the identifier to snake case: `xml_grow`

warning: variable `curEnd` should have a snake case name
    --> src/parser.rs:2277:13
     |
2277 |     let mut curEnd: ptrdiff_t =
     |             ^^^^^^ help: convert the identifier to snake case: `cur_end`

warning: variable `curBase` should have a snake case name
    --> src/parser.rs:2280:13
     |
2280 |     let mut curBase: ptrdiff_t =
     |             ^^^^^^^ help: convert the identifier to snake case: `cur_base`

warning: function `xmlSkipBlankChars` should have a snake case name
    --> src/parser.rs:2324:15
     |
2324 | pub unsafe fn xmlSkipBlankChars(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_skip_blank_chars`

warning: variable `expandPE` should have a snake case name
    --> src/parser.rs:2355:17
     |
2355 |         let mut expandPE: libc::c_int =
     |                 ^^^^^^^^ help: convert the identifier to snake case: `expand_pe`

warning: function `xmlPopInput_parser` should have a snake case name
    --> src/parser.rs:2426:15
     |
2426 | pub unsafe fn xmlPopInput_parser(mut ctxt: xmlParserCtxtPtr) -> xmlChar {
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_pop_input_parser`

warning: function `xmlPushInput` should have a snake case name
    --> src/parser.rs:2462:15
     |
2462 | pub unsafe fn xmlPushInput(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_push_input`

warning: function `xmlParseCharRef` should have a snake case name
    --> src/parser.rs:2526:15
     |
2526 | pub unsafe fn xmlParseCharRef(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_char_ref`

warning: function `xmlParseStringCharRef` should have a snake case name
    --> src/parser.rs:2703:11
     |
2703 | unsafe fn xmlParseStringCharRef(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_string_char_ref`

warning: function `xmlParserHandlePEReference` should have a snake case name
    --> src/parser.rs:2839:15
     |
2839 | pub unsafe fn xmlParserHandlePEReference(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parser_handle_pereference`

warning: function `xmlStringLenDecodeEntities` should have a snake case name
    --> src/parser.rs:2930:15
     |
2930 | pub unsafe fn xmlStringLenDecodeEntities(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_string_len_decode_entities`

warning: function `xmlStringDecodeEntities` should have a snake case name
    --> src/parser.rs:3464:15
     |
3464 | pub unsafe fn xmlStringDecodeEntities(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_string_decode_entities`

warning: function `areBlanks` should have a snake case name
    --> src/parser.rs:3491:11
     |
3491 | unsafe fn areBlanks(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^ help: convert the identifier to snake case: `are_blanks`

warning: variable `lastChild` should have a snake case name
    --> src/parser.rs:3496:13
     |
3496 |     let mut lastChild: xmlNodePtr = 0 as *mut xmlNode;
     |             ^^^^^^^^^ help: convert the identifier to snake case: `last_child`

warning: function `xmlSplitQName` should have a snake case name
    --> src/parser.rs:3593:15
     |
3593 | pub unsafe fn xmlSplitQName(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_split_qname`

warning: function `xmlIsNameStartChar` should have a snake case name
    --> src/parser.rs:3853:11
     |
3853 | unsafe fn xmlIsNameStartChar(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_is_name_start_char`

warning: function `xmlIsNameChar` should have a snake case name
    --> src/parser.rs:3909:11
     |
3909 | unsafe fn xmlIsNameChar(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_is_name_char`

warning: function `xmlParseNameComplex` should have a snake case name
    --> src/parser.rs:3987:11
     |
3987 | unsafe fn xmlParseNameComplex(mut ctxt: xmlParserCtxtPtr)
     |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_name_complex`

warning: function `xmlParseName` should have a snake case name
    --> src/parser.rs:4256:15
     |
4256 | pub unsafe fn xmlParseName(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_name`

warning: function `xmlParseNCNameComplex` should have a snake case name
    --> src/parser.rs:4319:11
     |
4319 | unsafe fn xmlParseNCNameComplex(mut ctxt: xmlParserCtxtPtr)
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_ncname_complex`

warning: variable `startPosition` should have a snake case name
    --> src/parser.rs:4325:13
     |
4325 |     let mut startPosition: size_t = 0 as libc::c_int as size_t;
     |             ^^^^^^^^^^^^^ help: convert the identifier to snake case: `start_position`

warning: function `xmlParseNCName` should have a snake case name
    --> src/parser.rs:4429:11
     |
4429 | unsafe fn xmlParseNCName(mut ctxt: xmlParserCtxtPtr)
     |           ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_ncname`

warning: function `xmlParseNameAndCompare` should have a snake case name
    --> src/parser.rs:4503:11
     |
4503 | unsafe fn xmlParseNameAndCompare(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_name_and_compare`

warning: function `xmlParseStringName` should have a snake case name
    --> src/parser.rs:4560:11
     |
4560 | unsafe fn xmlParseStringName(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_string_name`

warning: function `xmlParseNmtoken` should have a snake case name
    --> src/parser.rs:4695:15
     |
4695 | pub unsafe fn xmlParseNmtoken(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_nmtoken`

warning: function `xmlParseEntityValue` should have a snake case name
    --> src/parser.rs:4874:15
     |
4874 | pub unsafe fn xmlParseEntityValue(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_entity_value`

warning: variable `nameOk` should have a snake case name
    --> src/parser.rs:5024:41
     |
5024 | ...                   let mut nameOk: libc::c_int =
     |                               ^^^^^^ help: convert the identifier to snake case: `name_ok`

warning: function `xmlParseAttValueComplex` should have a snake case name
    --> src/parser.rs:5113:11
     |
5113 | unsafe fn xmlParseAttValueComplex(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_att_value_complex`

warning: function `xmlParseAttValue` should have a snake case name
    --> src/parser.rs:5925:15
     |
5925 | pub unsafe fn xmlParseAttValue(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_att_value`

warning: function `xmlParseSystemLiteral` should have a snake case name
    --> src/parser.rs:5942:15
     |
5942 | pub unsafe fn xmlParseSystemLiteral(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_system_literal`

warning: function `xmlParsePubidLiteral` should have a snake case name
    --> src/parser.rs:6117:15
     |
6117 | pub unsafe fn xmlParsePubidLiteral(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_pubid_literal`

warning: static variable `test_char_data` should have an upper case name
    --> src/parser.rs:6254:12
     |
6254 | static mut test_char_data: [libc::c_uchar; 256] =
     |            ^^^^^^^^^^^^^^ help: convert the identifier to upper case: `TEST_CHAR_DATA`

warning: function `xmlParseCharData` should have a snake case name
    --> src/parser.rs:6444:15
     |
6444 | pub unsafe fn xmlParseCharData(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_char_data`

warning: function `xmlParseCharDataComplex` should have a snake case name
    --> src/parser.rs:6674:11
     |
6674 | unsafe fn xmlParseCharDataComplex(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_char_data_complex`

warning: function `xmlParseExternalID` should have a snake case name
    --> src/parser.rs:6867:15
     |
6867 | pub unsafe fn xmlParseExternalID(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_external_id`

warning: variable `publicID` should have a snake case name
    --> src/parser.rs:6868:49
     |
6868 | ...                   mut publicID: *mut *mut xmlChar,
     |                           ^^^^^^^^ help: convert the identifier to snake case: `public_id`

warning: variable `URI` should have a snake case name
    --> src/parser.rs:6871:13
     |
6871 |     let mut URI: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^ help: convert the identifier to snake case: `uri`

warning: function `xmlParseCommentComplex` should have a snake case name
    --> src/parser.rs:6994:11
     |
6994 | unsafe fn xmlParseCommentComplex(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_comment_complex`

warning: function `xmlParseComment` should have a snake case name
    --> src/parser.rs:7267:15
     |
7267 | pub unsafe fn xmlParseComment(mut ctxt: xmlParserCtxtPtr) {
     |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_comment`

warning: function `xmlParsePITarget` should have a snake case name
    --> src/parser.rs:7566:15
     |
7566 | pub unsafe fn xmlParsePITarget(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_pitarget`

warning: function `xmlParseCatalogPI` should have a snake case name
    --> src/parser.rs:7641:11
     |
7641 | unsafe fn xmlParseCatalogPI(mut ctxt: xmlParserCtxtPtr,
     |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_catalog_pi`

warning: variable `URL` should have a snake case name
    --> src/parser.rs:7643:13
     |
7643 |     let mut URL: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlParsePI` should have a snake case name
    --> src/parser.rs:7723:15
     |
7723 | pub unsafe fn xmlParsePI(mut ctxt: xmlParserCtxtPtr) {
     |               ^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_pi`

warning: function `xmlParseNotationDecl` should have a snake case name
    --> src/parser.rs:8017:15
     |
8017 | pub unsafe fn xmlParseNotationDecl(mut ctxt: xmlParserCtxtPtr) {
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_notation_decl`

warning: variable `Pubid` should have a snake case name
    --> src/parser.rs:8019:13
     |
8019 |     let mut Pubid: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^ help: convert the identifier to snake case: `pubid`

warning: variable `Systemid` should have a snake case name
    --> src/parser.rs:8020:13
     |
8020 |     let mut Systemid: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `systemid`

warning: function `xmlParseEntityDecl` should have a snake case name
    --> src/parser.rs:8146:15
     |
8146 | pub unsafe fn xmlParseEntityDecl(mut ctxt: xmlParserCtxtPtr) {
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_entity_decl`

warning: variable `URI` should have a snake case name
    --> src/parser.rs:8149:13
     |
8149 |     let mut URI: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^^ help: convert the identifier to snake case: `uri`

warning: variable `isParameter` should have a snake case name
    --> src/parser.rs:8152:13
     |
8152 |     let mut isParameter: libc::c_int = 0 as libc::c_int;
     |             ^^^^^^^^^^^ help: convert the identifier to snake case: `is_parameter`

warning: function `xmlParseDefaultDecl` should have a snake case name
    --> src/parser.rs:8569:15
     |
8569 | pub unsafe fn xmlParseDefaultDecl(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_default_decl`

warning: function `xmlParseNotationType` should have a snake case name
    --> src/parser.rs:8700:15
     |
8700 | pub unsafe fn xmlParseNotationType(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_notation_type`

warning: function `xmlParseEnumerationType` should have a snake case name
    --> src/parser.rs:8786:15
     |
8786 | pub unsafe fn xmlParseEnumerationType(mut ctxt: xmlParserCtxtPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_enumeration_type`

warning: function `xmlParseEnumeratedType` should have a snake case name
    --> src/parser.rs:8871:15
     |
8871 | pub unsafe fn xmlParseEnumeratedType(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_enumerated_type`

warning: function `xmlParseAttributeType` should have a snake case name
    --> src/parser.rs:8965:15
     |
8965 | pub unsafe fn xmlParseAttributeType(mut ctxt: xmlParserCtxtPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_attribute_type`

warning: function `xmlParseAttributeListDecl` should have a snake case name
    --> src/parser.rs:9285:15
     |
9285 | pub unsafe fn xmlParseAttributeListDecl(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_attribute_list_decl`

warning: variable `elemName` should have a snake case name
    --> src/parser.rs:9287:13
     |
9287 |     let mut elemName: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^^^^ help: convert the identifier to snake case: `elem_name`

warning: variable `attrName` should have a snake case name
    --> src/parser.rs:9288:13
     |
9288 |     let mut attrName: *const xmlChar = 0 as *const xmlChar;
     |             ^^^^^^^^ help: convert the identifier to snake case: `attr_name`

warning: variable `defaultValue` should have a snake case name
    --> src/parser.rs:9347:21
     |
9347 |             let mut defaultValue: *mut xmlChar = 0 as *mut xmlChar;
     |                     ^^^^^^^^^^^^ help: convert the identifier to snake case: `default_value`

warning: function `xmlParseElementMixedContentDecl` should have a snake case name
    --> src/parser.rs:9502:15
     |
9502 | pub unsafe fn xmlParseElementMixedContentDecl(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element_mixed_content_decl`

warning: function `xmlParseElementChildrenContentDeclPriv` should have a snake case name
    --> src/parser.rs:9692:11
     |
9692 | unsafe fn xmlParseElementChildrenContentDeclPriv(mut ctxt:
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element_children_content_decl_priv`

warning: function `xmlParseElementChildrenContentDecl` should have a snake case name
     --> src/parser.rs:10085:15
      |
10085 | pub unsafe fn xmlParseElementChildrenContentDecl(mut ctxt:
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element_children_content_decl`

warning: function `xmlParseElementContentDecl` should have a snake case name
     --> src/parser.rs:10108:15
      |
10108 | pub unsafe fn xmlParseElementContentDecl(mut ctxt:
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element_content_decl`

warning: function `xmlParseElementDecl` should have a snake case name
     --> src/parser.rs:10181:15
      |
10181 | pub unsafe fn xmlParseElementDecl(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element_decl`

warning: function `xmlParseConditionalSections` should have a snake case name
     --> src/parser.rs:10346:11
      |
10346 | unsafe fn xmlParseConditionalSections(mut ctxt: xmlParserCtxtPtr) {
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_conditional_sections`

warning: variable `inputIds` should have a snake case name
     --> src/parser.rs:10347:13
      |
10347 |     let mut inputIds: *mut libc::c_int = 0 as *mut libc::c_int;
      |             ^^^^^^^^ help: convert the identifier to snake case: `input_ids`

warning: variable `inputIdsSize` should have a snake case name
     --> src/parser.rs:10348:13
      |
10348 |     let mut inputIdsSize: size_t = 0 as libc::c_int as size_t;
      |             ^^^^^^^^^^^^ help: convert the identifier to snake case: `input_ids_size`

warning: variable `ignoreDepth` should have a snake case name
     --> src/parser.rs:10474:25
      |
10474 |                 let mut ignoreDepth: size_t = 0 as libc::c_int as size_t;
      |                         ^^^^^^^^^^^ help: convert the identifier to snake case: `ignore_depth`

warning: function `xmlParseMarkupDecl` should have a snake case name
     --> src/parser.rs:10666:15
      |
10666 | pub unsafe fn xmlParseMarkupDecl(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_markup_decl`

warning: function `xmlParseTextDecl` should have a snake case name
     --> src/parser.rs:10715:15
      |
10715 | pub unsafe fn xmlParseTextDecl(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_text_decl`

warning: function `xmlParseExternalSubset` should have a snake case name
     --> src/parser.rs:10833:15
      |
10833 | pub unsafe fn xmlParseExternalSubset(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_external_subset`

warning: variable `ExternalID` should have a snake case name
     --> src/parser.rs:10834:53
      |
10834 | ...                   mut ExternalID:
      |                           ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: variable `SystemID` should have a snake case name
     --> src/parser.rs:10836:53
      |
10836 | ...                   mut SystemID:
      |                           ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: function `xmlParseReference` should have a snake case name
     --> src/parser.rs:10952:15
      |
10952 | pub unsafe fn xmlParseReference(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_reference`

warning: variable `firstChild` should have a snake case name
     --> src/parser.rs:11338:25
      |
11338 |                 let mut firstChild: xmlNodePtr = 0 as xmlNodePtr;
      |                         ^^^^^^^^^^ help: convert the identifier to snake case: `first_child`

warning: variable `firstChild_0` should have a snake case name
     --> src/parser.rs:11389:25
      |
11389 |                 let mut firstChild_0: xmlNodePtr = 0 as xmlNodePtr;
      |                         ^^^^^^^^^^^^ help: convert the identifier to snake case: `first_child_0`

warning: function `xmlParseEntityRef` should have a snake case name
     --> src/parser.rs:11506:15
      |
11506 | pub unsafe fn xmlParseEntityRef(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_entity_ref`

warning: function `xmlParseStringEntityRef` should have a snake case name
     --> src/parser.rs:11711:11
      |
11711 | unsafe fn xmlParseStringEntityRef(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_string_entity_ref`

warning: function `xmlParsePEReference` should have a snake case name
     --> src/parser.rs:11910:15
      |
11910 | pub unsafe fn xmlParsePEReference(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_pereference`

warning: function `xmlLoadEntityContent` should have a snake case name
     --> src/parser.rs:12112:11
      |
12112 | unsafe fn xmlLoadEntityContent(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_load_entity_content`

warning: function `xmlParseStringPEReference` should have a snake case name
     --> src/parser.rs:12278:11
      |
12278 | unsafe fn xmlParseStringPEReference(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_string_pereference`

warning: function `xmlParseDocTypeDecl` should have a snake case name
     --> src/parser.rs:12389:15
      |
12389 | pub unsafe fn xmlParseDocTypeDecl(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_doc_type_decl`

warning: variable `ExternalID` should have a snake case name
     --> src/parser.rs:12391:13
      |
12391 |     let mut ExternalID: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: variable `URI` should have a snake case name
     --> src/parser.rs:12392:13
      |
12392 |     let mut URI: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^ help: convert the identifier to snake case: `uri`

warning: function `xmlParseInternalSubset` should have a snake case name
     --> src/parser.rs:12459:11
      |
12459 | unsafe fn xmlParseInternalSubset(mut ctxt: xmlParserCtxtPtr) {
      |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_internal_subset`

warning: variable `baseInputNr` should have a snake case name
     --> src/parser.rs:12464:17
      |
12464 |         let mut baseInputNr: libc::c_int = (*ctxt).inputNr;
      |                 ^^^^^^^^^^^ help: convert the identifier to snake case: `base_input_nr`

warning: function `xmlParseAttribute` should have a snake case name
     --> src/parser.rs:12553:15
      |
12553 | pub unsafe fn xmlParseAttribute(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_attribute`

warning: function `xmlParseStartTag` should have a snake case name
     --> src/parser.rs:12654:15
      |
12654 | pub unsafe fn xmlParseStartTag(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_start_tag`

warning: function `xmlParseEndTag1` should have a snake case name
     --> src/parser.rs:12907:11
      |
12907 | unsafe fn xmlParseEndTag1(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_end_tag1`

warning: function `xmlParseEndTag` should have a snake case name
     --> src/parser.rs:12993:15
      |
12993 | pub unsafe fn xmlParseEndTag(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_end_tag`

warning: function `xmlGetNamespace` should have a snake case name
     --> src/parser.rs:13012:11
      |
13012 | unsafe fn xmlGetNamespace(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_get_namespace`

warning: function `xmlParseQName` should have a snake case name
     --> src/parser.rs:13044:11
      |
13044 | unsafe fn xmlParseQName(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_qname`

warning: function `xmlParseQNameAndCompare` should have a snake case name
     --> src/parser.rs:13160:11
      |
13160 | unsafe fn xmlParseQNameAndCompare(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_qname_and_compare`

warning: function `xmlParseAttValueInternal` should have a snake case name
     --> src/parser.rs:13247:11
      |
13247 | unsafe fn xmlParseAttValueInternal(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_att_value_internal`

warning: function `xmlParseAttribute2` should have a snake case name
     --> src/parser.rs:13552:11
      |
13552 | unsafe fn xmlParseAttribute2(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_attribute2`

warning: function `xmlParseStartTag2` should have a snake case name
     --> src/parser.rs:13696:11
      |
13696 | unsafe fn xmlParseStartTag2(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_start_tag2`

warning: variable `URI` should have a snake case name
     --> src/parser.rs:13698:44
      |
13698 | ...                   mut URI: *mut *const xmlChar,
      |                           ^^^ help: convert the identifier to snake case: `uri`

warning: variable `nbNs` should have a snake case name
     --> src/parser.rs:13716:13
      |
13716 |     let mut nbNs: libc::c_int = 0;
      |             ^^^^ help: convert the identifier to snake case: `nb_ns`

warning: variable `nsNr` should have a snake case name
     --> src/parser.rs:13719:13
      |
13719 |     let mut nsNr: libc::c_int = (*ctxt).nsNr;
      |             ^^^^ help: convert the identifier to snake case: `ns_nr`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:13805:25
      |
13805 |                 let mut URL: *const xmlChar =
      |                         ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL_0` should have a snake case name
     --> src/parser.rs:13894:25
      |
13894 |                 let mut URL_0: *const xmlChar =
      |                         ^^^^^ help: convert the identifier to snake case: `url_0`

warning: function `xmlParseEndTag2` should have a snake case name
     --> src/parser.rs:14559:11
      |
14559 | unsafe fn xmlParseEndTag2(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_end_tag2`

warning: function `xmlParseCDSect` should have a snake case name
     --> src/parser.rs:14654:15
      |
14654 | pub unsafe fn xmlParseCDSect(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_cdsect`

warning: function `xmlParseContentInternal` should have a snake case name
     --> src/parser.rs:14878:11
      |
14878 | unsafe fn xmlParseContentInternal(mut ctxt: xmlParserCtxtPtr) {
      |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_content_internal`

warning: variable `nameNr` should have a snake case name
     --> src/parser.rs:14879:13
      |
14879 |     let mut nameNr: libc::c_int = (*ctxt).nameNr;
      |             ^^^^^^ help: convert the identifier to snake case: `name_nr`

warning: function `xmlParseContent` should have a snake case name
     --> src/parser.rs:15006:15
      |
15006 | pub unsafe fn xmlParseContent(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_content`

warning: variable `nameNr` should have a snake case name
     --> src/parser.rs:15007:13
      |
15007 |     let mut nameNr: libc::c_int = (*ctxt).nameNr;
      |             ^^^^^^ help: convert the identifier to snake case: `name_nr`

warning: function `xmlParseElement` should have a snake case name
     --> src/parser.rs:15037:15
      |
15037 | pub unsafe fn xmlParseElement(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element`

warning: function `xmlParseElementStart` should have a snake case name
     --> src/parser.rs:15065:11
      |
15065 | unsafe fn xmlParseElementStart(mut ctxt: xmlParserCtxtPtr)
      |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element_start`

warning: variable `URI` should have a snake case name
     --> src/parser.rs:15069:13
      |
15069 |     let mut URI: *const xmlChar = 0 as *const xmlChar;
      |             ^^^ help: convert the identifier to snake case: `uri`

warning: variable `nsNr` should have a snake case name
     --> src/parser.rs:15079:13
      |
15079 |     let mut nsNr: libc::c_int = (*ctxt).nsNr;
      |             ^^^^ help: convert the identifier to snake case: `ns_nr`

warning: function `xmlParseElementEnd` should have a snake case name
     --> src/parser.rs:15230:11
      |
15230 | unsafe fn xmlParseElementEnd(mut ctxt: xmlParserCtxtPtr) {
      |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_element_end`

warning: function `xmlParseVersionNum` should have a snake case name
     --> src/parser.rs:15284:15
      |
15284 | pub unsafe fn xmlParseVersionNum(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_version_num`

warning: function `xmlParseVersionInfo` should have a snake case name
     --> src/parser.rs:15363:15
      |
15363 | pub unsafe fn xmlParseVersionInfo(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_version_info`

warning: function `xmlParseEncName` should have a snake case name
     --> src/parser.rs:15433:15
      |
15433 | pub unsafe fn xmlParseEncName(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_enc_name`

warning: function `xmlParseEncodingDecl` should have a snake case name
     --> src/parser.rs:15531:15
      |
15531 | pub unsafe fn xmlParseEncodingDecl(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_encoding_decl`

warning: function `xmlParseSDDecl` should have a snake case name
     --> src/parser.rs:15719:15
      |
15719 | pub unsafe fn xmlParseSDDecl(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_sddecl`

warning: function `xmlParseXMLDecl` should have a snake case name
     --> src/parser.rs:15851:15
      |
15851 | pub unsafe fn xmlParseXMLDecl(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_xmldecl`

warning: function `xmlParseMisc` should have a snake case name
     --> src/parser.rs:16014:15
      |
16014 | pub unsafe fn xmlParseMisc(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_misc`

warning: function `xmlParseDocument` should have a snake case name
     --> src/parser.rs:16073:15
      |
16073 | pub unsafe fn xmlParseDocument(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_document`

warning: function `xmlParseExtParsedEnt` should have a snake case name
     --> src/parser.rs:16344:15
      |
16344 | pub unsafe fn xmlParseExtParsedEnt(mut ctxt: xmlParserCtxtPtr)
      |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_ext_parsed_ent`

warning: function `xmlParseLookupSequence` should have a snake case name
     --> src/parser.rs:16491:11
      |
16491 | unsafe fn xmlParseLookupSequence(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_lookup_sequence`

warning: function `xmlParseGetLasts` should have a snake case name
     --> src/parser.rs:16658:11
      |
16658 | unsafe fn xmlParseGetLasts(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_get_lasts`

warning: function `xmlCheckCdataPush` should have a snake case name
     --> src/parser.rs:16731:11
      |
16731 | unsafe fn xmlCheckCdataPush(mut utf: *const xmlChar,
      |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_check_cdata_push`

warning: function `xmlParseTryOrFinish` should have a snake case name
     --> src/parser.rs:16883:11
      |
16883 | unsafe fn xmlParseTryOrFinish(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_try_or_finish`

warning: variable `URI` should have a snake case name
     --> src/parser.rs:17327:25
      |
17327 |                 let mut URI: *const xmlChar = 0 as *const xmlChar;
      |                         ^^^ help: convert the identifier to snake case: `uri`

warning: variable `nsNr` should have a snake case name
     --> src/parser.rs:17329:25
      |
17329 |                 let mut nsNr: libc::c_int = (*ctxt).nsNr;
      |                         ^^^^ help: convert the identifier to snake case: `ns_nr`

warning: function `xmlParseCheckTransition` should have a snake case name
     --> src/parser.rs:18874:11
      |
18874 | unsafe fn xmlParseCheckTransition(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_check_transition`

warning: function `xmlParseChunk` should have a snake case name
     --> src/parser.rs:18939:15
      |
18939 | pub unsafe fn xmlParseChunk(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_chunk`

warning: function `xmlCreatePushParserCtxt` should have a snake case name
     --> src/parser.rs:19213:15
      |
19213 | pub unsafe fn xmlCreatePushParserCtxt(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_push_parser_ctxt`

warning: variable `inputStream` should have a snake case name
     --> src/parser.rs:19223:13
      |
19223 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^ help: convert the identifier to snake case: `input_stream`

warning: function `xmlHaltParser` should have a snake case name
     --> src/parser.rs:19350:11
      |
19350 | unsafe fn xmlHaltParser(mut ctxt: xmlParserCtxtPtr) {
      |           ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_halt_parser`

warning: function `xmlStopParser_parser` should have a snake case name
     --> src/parser.rs:19386:15
      |
19386 | pub unsafe fn xmlStopParser_parser(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_stop_parser_parser`

warning: function `xmlCreateIOParserCtxt` should have a snake case name
     --> src/parser.rs:19406:15
      |
19406 | pub unsafe fn xmlCreateIOParserCtxt(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_ioparser_ctxt`

warning: variable `inputStream` should have a snake case name
     --> src/parser.rs:19417:13
      |
19417 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^ help: convert the identifier to snake case: `input_stream`

warning: function `xmlIOParseDTD` should have a snake case name
     --> src/parser.rs:19496:15
      |
19496 | pub unsafe fn xmlIOParseDTD(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ioparse_dtd`

warning: function `xmlSAXParseDTD` should have a snake case name
     --> src/parser.rs:19630:15
      |
19630 | pub unsafe fn xmlSAXParseDTD(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxparse_dtd`

warning: variable `ExternalID` should have a snake case name
     --> src/parser.rs:19631:45
      |
19631 | ...                   mut ExternalID: *const xmlChar,
      |                           ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: variable `SystemID` should have a snake case name
     --> src/parser.rs:19632:45
      |
19632 | ...                   mut SystemID: *const xmlChar)
      |                           ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: variable `systemIdCanonic` should have a snake case name
     --> src/parser.rs:19638:13
      |
19638 |     let mut systemIdCanonic: *mut xmlChar = 0 as *mut xmlChar;
      |             ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `system_id_canonic`

warning: function `xmlParseDTD` should have a snake case name
     --> src/parser.rs:19761:15
      |
19761 | pub unsafe fn xmlParseDTD(mut ExternalID: *const xmlChar,
      |               ^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_dtd`

warning: variable `ExternalID` should have a snake case name
     --> src/parser.rs:19761:31
      |
19761 | pub unsafe fn xmlParseDTD(mut ExternalID: *const xmlChar,
      |                               ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: variable `SystemID` should have a snake case name
     --> src/parser.rs:19762:42
      |
19762 | ...                   mut SystemID: *const xmlChar)
      |                           ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: function `xmlParseCtxtExternalEntity` should have a snake case name
     --> src/parser.rs:19789:15
      |
19789 | pub unsafe fn xmlParseCtxtExternalEntity(mut ctx: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_ctxt_external_entity`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:19790:57
      |
19790 | ...                   mut URL: *const xmlChar,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
     --> src/parser.rs:19791:57
      |
19791 | ...                   mut ID: *const xmlChar,
      |                           ^^ help: convert the identifier to snake case: `id`

warning: variable `userData` should have a snake case name
     --> src/parser.rs:19794:13
      |
19794 |     let mut userData: *mut libc::c_void = 0 as *mut libc::c_void;
      |             ^^^^^^^^ help: convert the identifier to snake case: `user_data`

warning: function `xmlParseExternalEntityPrivate` should have a snake case name
     --> src/parser.rs:19825:11
      |
19825 | unsafe fn xmlParseExternalEntityPrivate(mut doc: xmlDocPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_external_entity_private`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:19832:56
      |
19832 | ...                   mut URL: *const xmlChar,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
     --> src/parser.rs:19833:56
      |
19833 | ...                   mut ID: *const xmlChar,
      |                           ^^ help: convert the identifier to snake case: `id`

warning: variable `newDoc` should have a snake case name
     --> src/parser.rs:19837:13
      |
19837 |     let mut newDoc: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^^^^ help: convert the identifier to snake case: `new_doc`

warning: variable `newRoot` should have a snake case name
     --> src/parser.rs:19838:13
      |
19838 |     let mut newRoot: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^ help: convert the identifier to snake case: `new_root`

warning: function `xmlParseExternalEntity` should have a snake case name
     --> src/parser.rs:20110:15
      |
20110 | pub unsafe fn xmlParseExternalEntity(mut doc: xmlDocPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_external_entity`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:20115:53
      |
20115 | ...                   mut URL: *const xmlChar,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
     --> src/parser.rs:20116:53
      |
20116 | ...                   mut ID: *const xmlChar,
      |                           ^^ help: convert the identifier to snake case: `id`

warning: function `xmlParseBalancedChunkMemory` should have a snake case name
     --> src/parser.rs:20143:15
      |
20143 | pub unsafe fn xmlParseBalancedChunkMemory(mut doc: xmlDocPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_balanced_chunk_memory`

warning: function `xmlParseBalancedChunkMemoryInternal` should have a snake case name
     --> src/parser.rs:20179:11
      |
20179 | unsafe fn xmlParseBalancedChunkMemoryInternal(mut oldctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_balanced_chunk_memory_internal`

warning: variable `newDoc` should have a snake case name
     --> src/parser.rs:20189:13
      |
20189 |     let mut newDoc: xmlDocPtr = 0 as xmlDocPtr;
      |             ^^^^^^ help: convert the identifier to snake case: `new_doc`

warning: variable `newRoot` should have a snake case name
     --> src/parser.rs:20190:13
      |
20190 |     let mut newRoot: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^ help: convert the identifier to snake case: `new_root`

warning: function `xmlParseInNodeContext` should have a snake case name
     --> src/parser.rs:20397:15
      |
20397 | pub unsafe fn xmlParseInNodeContext(mut node: xmlNodePtr,
      |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_in_node_context`

warning: function `xmlParseBalancedChunkMemoryRecover` should have a snake case name
     --> src/parser.rs:20620:15
      |
20620 | pub unsafe fn xmlParseBalancedChunkMemoryRecover(mut doc:
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_balanced_chunk_memory_recover`

warning: variable `newDoc` should have a snake case name
     --> src/parser.rs:20636:13
      |
20636 |     let mut newDoc: xmlDocPtr = 0 as *mut xmlDoc;
      |             ^^^^^^ help: convert the identifier to snake case: `new_doc`

warning: variable `newRoot` should have a snake case name
     --> src/parser.rs:20639:13
      |
20639 |     let mut newRoot: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^ help: convert the identifier to snake case: `new_root`

warning: function `xmlSAXParseEntity` should have a snake case name
     --> src/parser.rs:20789:15
      |
20789 | pub unsafe fn xmlSAXParseEntity(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxparse_entity`

warning: function `xmlParseEntity` should have a snake case name
     --> src/parser.rs:20829:15
      |
20829 | pub unsafe fn xmlParseEntity(mut filename: *const libc::c_char)
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_entity`

warning: function `xmlCreateEntityParserCtxtInternal` should have a snake case name
     --> src/parser.rs:20847:11
      |
20847 | unsafe fn xmlCreateEntityParserCtxtInternal(mut URL:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_entity_parser_ctxt_internal`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:20847:49
      |
20847 | unsafe fn xmlCreateEntityParserCtxtInternal(mut URL:
      |                                                 ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
     --> src/parser.rs:20849:60
      |
20849 | ...                   mut ID: *const xmlChar,
      |                           ^^ help: convert the identifier to snake case: `id`

warning: variable `inputStream` should have a snake case name
     --> src/parser.rs:20856:13
      |
20856 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^ help: convert the identifier to snake case: `input_stream`

warning: function `xmlCreateEntityParserCtxt` should have a snake case name
     --> src/parser.rs:20926:15
      |
20926 | pub unsafe fn xmlCreateEntityParserCtxt(mut URL: *const xmlChar,
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_entity_parser_ctxt`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:20926:45
      |
20926 | pub unsafe fn xmlCreateEntityParserCtxt(mut URL: *const xmlChar,
      |                                             ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
     --> src/parser.rs:20927:56
      |
20927 | ...                   mut ID: *const xmlChar,
      |                           ^^ help: convert the identifier to snake case: `id`

warning: function `xmlCreateURLParserCtxt` should have a snake case name
     --> src/parser.rs:20950:15
      |
20950 | pub unsafe fn xmlCreateURLParserCtxt(mut filename:
      |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_urlparser_ctxt`

warning: variable `inputStream` should have a snake case name
     --> src/parser.rs:20955:13
      |
20955 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^ help: convert the identifier to snake case: `input_stream`

warning: function `xmlCreateFileParserCtxt` should have a snake case name
     --> src/parser.rs:20994:15
      |
20994 | pub unsafe fn xmlCreateFileParserCtxt(mut filename:
      |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_file_parser_ctxt`

warning: function `xmlSAXParseFileWithData` should have a snake case name
     --> src/parser.rs:21018:15
      |
21018 | pub unsafe fn xmlSAXParseFileWithData(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxparse_file_with_data`

warning: function `xmlSAXParseFile` should have a snake case name
     --> src/parser.rs:21074:15
      |
21074 | pub unsafe fn xmlSAXParseFile(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxparse_file`

warning: function `xmlRecoverDoc` should have a snake case name
     --> src/parser.rs:21092:15
      |
21092 | pub unsafe fn xmlRecoverDoc(mut cur: *const xmlChar) -> xmlDocPtr {
      |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_recover_doc`

warning: function `xmlParseFile` should have a snake case name
     --> src/parser.rs:21106:15
      |
21106 | pub unsafe fn xmlParseFile(mut filename: *const libc::c_char)
      |               ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_file`

warning: function `xmlRecoverFile` should have a snake case name
     --> src/parser.rs:21122:15
      |
21122 | pub unsafe fn xmlRecoverFile(mut filename: *const libc::c_char)
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_recover_file`

warning: function `xmlSetupParserForBuffer` should have a snake case name
     --> src/parser.rs:21137:15
      |
21137 | pub unsafe fn xmlSetupParserForBuffer(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_setup_parser_for_buffer`

warning: function `xmlSAXUserParseFile` should have a snake case name
     --> src/parser.rs:21177:15
      |
21177 | pub unsafe fn xmlSAXUserParseFile(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxuser_parse_file`

warning: function `xmlCreateMemoryParserCtxt_parser` should have a snake case name
     --> src/parser.rs:21223:15
      |
21223 | pub unsafe fn xmlCreateMemoryParserCtxt_parser(mut buffer:
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_memory_parser_ctxt_parser`

warning: function `xmlSAXParseMemoryWithData` should have a snake case name
     --> src/parser.rs:21268:15
      |
21268 | pub unsafe fn xmlSAXParseMemoryWithData(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxparse_memory_with_data`

warning: function `xmlSAXParseMemory` should have a snake case name
     --> src/parser.rs:21318:15
      |
21318 | pub unsafe fn xmlSAXParseMemory(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxparse_memory`

warning: function `xmlParseMemory` should have a snake case name
     --> src/parser.rs:21336:15
      |
21336 | pub unsafe fn xmlParseMemory(mut buffer: *const libc::c_char,
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_memory`

warning: function `xmlRecoverMemory` should have a snake case name
     --> src/parser.rs:21353:15
      |
21353 | pub unsafe fn xmlRecoverMemory(mut buffer: *const libc::c_char,
      |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_recover_memory`

warning: function `xmlSAXUserParseMemory` should have a snake case name
     --> src/parser.rs:21372:15
      |
21372 | pub unsafe fn xmlSAXUserParseMemory(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxuser_parse_memory`

warning: function `xmlCreateDocParserCtxt` should have a snake case name
     --> src/parser.rs:21415:15
      |
21415 | pub unsafe fn xmlCreateDocParserCtxt(mut cur: *const xmlChar)
      |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_create_doc_parser_ctxt`

warning: function `xmlSAXParseDoc` should have a snake case name
     --> src/parser.rs:21436:15
      |
21436 | pub unsafe fn xmlSAXParseDoc(mut sax: xmlSAXHandlerPtr,
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_saxparse_doc`

warning: function `xmlParseDoc` should have a snake case name
     --> src/parser.rs:21473:15
      |
21473 | pub unsafe fn xmlParseDoc(mut cur: *const xmlChar) -> xmlDocPtr {
      |               ^^^^^^^^^^^ help: convert the identifier to snake case: `xml_parse_doc`

warning: static variable `xmlEntityRefFunc` should have an upper case name
     --> src/parser.rs:21484:12
      |
21484 | static mut xmlEntityRefFunc: xmlEntityReferenceFunc = None;
      |            ^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_ENTITY_REF_FUNC`

warning: function `xmlAddEntityReference` should have a snake case name
     --> src/parser.rs:21495:11
      |
21495 | unsafe fn xmlAddEntityReference(mut ent: xmlEntityPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_add_entity_reference`

warning: variable `firstNode` should have a snake case name
     --> src/parser.rs:21496:48
      |
21496 | ...                   mut firstNode: xmlNodePtr,
      |                           ^^^^^^^^^ help: convert the identifier to snake case: `first_node`

warning: variable `lastNode` should have a snake case name
     --> src/parser.rs:21497:48
      |
21497 | ...                   mut lastNode: xmlNodePtr) {
      |                           ^^^^^^^^ help: convert the identifier to snake case: `last_node`

warning: function `xmlSetEntityReferenceFunc` should have a snake case name
     --> src/parser.rs:21511:15
      |
21511 | pub unsafe fn xmlSetEntityReferenceFunc(mut func:
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_set_entity_reference_func`

warning: static variable `xmlParserInitialized` should have an upper case name
     --> src/parser.rs:21515:12
      |
21515 | static mut xmlParserInitialized: libc::c_int = 0 as libc::c_int;
      |            ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_PARSER_INITIALIZED`

warning: function `xmlInitParser_parser` should have a snake case name
     --> src/parser.rs:21524:15
      |
21524 | pub unsafe fn xmlInitParser_parser() {
      |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_init_parser_parser`

warning: function `xmlCleanupParser` should have a snake case name
     --> src/parser.rs:21667:15
      |
21667 | pub unsafe fn xmlCleanupParser() {
      |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_cleanup_parser`

warning: function `xmlCtxtReset_parser` should have a snake case name
     --> src/parser.rs:21718:15
      |
21718 | pub unsafe fn xmlCtxtReset_parser(mut ctxt: xmlParserCtxtPtr) {
      |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_reset_parser`

warning: function `xmlCtxtResetPush` should have a snake case name
     --> src/parser.rs:21844:15
      |
21844 | pub unsafe fn xmlCtxtResetPush(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_reset_push`

warning: variable `inputStream` should have a snake case name
     --> src/parser.rs:21850:13
      |
21850 |     let mut inputStream: xmlParserInputPtr = 0 as *mut xmlParserInput;
      |             ^^^^^^^^^^^ help: convert the identifier to snake case: `input_stream`

warning: function `xmlCtxtUseOptionsInternal` should have a snake case name
     --> src/parser.rs:21940:11
      |
21940 | unsafe fn xmlCtxtUseOptionsInternal(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_use_options_internal`

warning: function `xmlCtxtUseOptions` should have a snake case name
     --> src/parser.rs:22095:15
      |
22095 | pub unsafe fn xmlCtxtUseOptions(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_use_options`

warning: function `xmlDoRead` should have a snake case name
     --> src/parser.rs:22112:11
      |
22112 | unsafe fn xmlDoRead(mut ctxt: xmlParserCtxtPtr,
      |           ^^^^^^^^^ help: convert the identifier to snake case: `xml_do_read`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22113:36
      |
22113 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlReadDoc` should have a snake case name
     --> src/parser.rs:22153:15
      |
22153 | pub unsafe fn xmlReadDoc(mut cur: *const xmlChar,
      |               ^^^^^^^^^^ help: convert the identifier to snake case: `xml_read_doc`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22154:41
      |
22154 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlReadFile` should have a snake case name
     --> src/parser.rs:22175:15
      |
22175 | pub unsafe fn xmlReadFile(mut filename: *const libc::c_char,
      |               ^^^^^^^^^^^ help: convert the identifier to snake case: `xml_read_file`

warning: function `xmlReadMemory` should have a snake case name
     --> src/parser.rs:22198:15
      |
22198 | pub unsafe fn xmlReadMemory(mut buffer: *const libc::c_char,
      |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_read_memory`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22200:44
      |
22200 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlReadFd` should have a snake case name
     --> src/parser.rs:22224:15
      |
22224 | pub unsafe fn xmlReadFd(mut fd: libc::c_int,
      |               ^^^^^^^^^ help: convert the identifier to snake case: `xml_read_fd`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22225:40
      |
22225 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlReadIO` should have a snake case name
     --> src/parser.rs:22264:15
      |
22264 | pub unsafe fn xmlReadIO(mut ioread: xmlInputReadCallback,
      |               ^^^^^^^^^ help: convert the identifier to snake case: `xml_read_io`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22267:40
      |
22267 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlCtxtReadDoc` should have a snake case name
     --> src/parser.rs:22312:15
      |
22312 | pub unsafe fn xmlCtxtReadDoc(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_read_doc`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22314:45
      |
22314 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlCtxtReadFile` should have a snake case name
     --> src/parser.rs:22341:15
      |
22341 | pub unsafe fn xmlCtxtReadFile(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_read_file`

warning: function `xmlCtxtReadMemory` should have a snake case name
     --> src/parser.rs:22372:15
      |
22372 | pub unsafe fn xmlCtxtReadMemory(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_read_memory`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22375:48
      |
22375 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlCtxtReadFd` should have a snake case name
     --> src/parser.rs:22412:15
      |
22412 | pub unsafe fn xmlCtxtReadFd(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_read_fd`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22414:44
      |
22414 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: function `xmlCtxtReadIO` should have a snake case name
     --> src/parser.rs:22437:15
      |
22437 | pub unsafe fn xmlCtxtReadIO(mut ctxt: xmlParserCtxtPtr,
      |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_ctxt_read_io`

warning: variable `URL` should have a snake case name
     --> src/parser.rs:22441:44
      |
22441 | ...                   mut URL: *const libc::c_char,
      |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `publicID` should have a snake case name
   --> src/parser_rust.rs:236:50
    |
236 | ...                   mut publicID: *mut *mut xmlChar,
    |                           ^^^^^^^^ help: convert the identifier to snake case: `public_id`

warning: variable `ExternalID` should have a snake case name
   --> src/parser_rust.rs:403:54
    |
403 | ...                   mut ExternalID:
    |                           ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: variable `SystemID` should have a snake case name
   --> src/parser_rust.rs:405:54
    |
405 | ...                   mut SystemID:
    |                           ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: variable `ExternalID` should have a snake case name
   --> src/parser_rust.rs:652:46
    |
652 | ...                   mut ExternalID: *const xmlChar,
    |                           ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: variable `SystemID` should have a snake case name
   --> src/parser_rust.rs:653:46
    |
653 | ...                   mut SystemID: *const xmlChar)
    |                           ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: variable `ExternalID` should have a snake case name
   --> src/parser_rust.rs:665:48
    |
665 |  pub unsafe extern "C" fn xmlParseDTD_rust(mut ExternalID: *const xmlChar,
    |                                                ^^^^^^^^^^ help: convert the identifier to snake case: `external_id`

warning: variable `SystemID` should have a snake case name
   --> src/parser_rust.rs:666:43
    |
666 | ...                   mut SystemID: *const xmlChar)
    |                           ^^^^^^^^ help: convert the identifier to snake case: `system_id`

warning: variable `URL` should have a snake case name
   --> src/parser_rust.rs:678:58
    |
678 | ...                   mut URL: *const xmlChar,
    |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
   --> src/parser_rust.rs:679:58
    |
679 | ...                   mut ID: *const xmlChar,
    |                           ^^ help: convert the identifier to snake case: `id`

warning: variable `URL` should have a snake case name
   --> src/parser_rust.rs:698:54
    |
698 | ...                   mut URL: *const xmlChar,
    |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
   --> src/parser_rust.rs:699:54
    |
699 | ...                   mut ID: *const xmlChar,
    |                           ^^ help: convert the identifier to snake case: `id`

warning: variable `URL` should have a snake case name
   --> src/parser_rust.rs:808:62
    |
808 |  pub unsafe extern "C" fn xmlCreateEntityParserCtxt_rust(mut URL: *const xmlChar,
    |                                                              ^^^ help: convert the identifier to snake case: `url`

warning: variable `ID` should have a snake case name
   --> src/parser_rust.rs:809:57
    |
809 | ...                   mut ID: *const xmlChar,
    |                           ^^ help: convert the identifier to snake case: `id`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1100:42
     |
1100 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1129:45
     |
1129 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1146:41
     |
1146 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1163:41
     |
1163 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1181:46
     |
1181 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1216:49
     |
1216 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1235:45
     |
1235 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `URL` should have a snake case name
    --> src/parser_rust.rs:1255:45
     |
1255 | ...                   mut URL: *const libc::c_char,
     |                           ^^^ help: convert the identifier to snake case: `url`

warning: variable `A` should have a snake case name
   --> src/xpath.rs:390:17
    |
390 |         let mut A: size_t = 0;
    |                 ^ help: convert the identifier to snake case: `a`

warning: variable `B` should have a snake case name
   --> src/xpath.rs:391:17
    |
391 |         let mut B: size_t = 0;
    |                 ^ help: convert the identifier to snake case: `b`

warning: variable `C` should have a snake case name
   --> src/xpath.rs:392:17
    |
392 |         let mut C: size_t = 0;
    |                 ^ help: convert the identifier to snake case (notice the capitalization): `c`

warning: variable `D` should have a snake case name
   --> src/xpath.rs:393:17
    |
393 |         let mut D: size_t = 0;
    |                 ^ help: convert the identifier to snake case: `d`

warning: variable `ABC` should have a snake case name
   --> src/xpath.rs:394:17
    |
394 |         let mut ABC: libc::c_int = 0;
    |                 ^^^ help: convert the identifier to snake case: `abc`

warning: variable `BCD` should have a snake case name
   --> src/xpath.rs:395:17
    |
395 |         let mut BCD: libc::c_int = 0;
    |                 ^^^ help: convert the identifier to snake case: `bcd`

warning: variable `CD` should have a snake case name
   --> src/xpath.rs:396:17
    |
396 |         let mut CD: libc::c_int = 0;
    |                 ^^ help: convert the identifier to snake case: `cd`

warning: variable `A` should have a snake case name
   --> src/xpath.rs:504:9
    |
504 |     let A: size_t =
    |         ^ help: convert the identifier to snake case: `a`

warning: variable `B` should have a snake case name
   --> src/xpath.rs:506:9
    |
506 |     let B: size_t =
    |         ^ help: convert the identifier to snake case: `b`

warning: variable `__SORT_SWAP_t` should have a snake case name
   --> src/xpath.rs:619:21
    |
619 |             let mut __SORT_SWAP_t: xmlNodePtr =
    |                     ^^^^^^^^^^^^^ help: convert the identifier to snake case: `__sort_swap_t`

warning: variable `A` should have a snake case name
   --> src/xpath.rs:697:13
    |
697 |     let mut A: size_t = 0;
    |             ^ help: convert the identifier to snake case: `a`

warning: variable `B` should have a snake case name
   --> src/xpath.rs:698:13
    |
698 |     let mut B: size_t = 0;
    |             ^ help: convert the identifier to snake case: `b`

warning: variable `C` should have a snake case name
   --> src/xpath.rs:699:13
    |
699 |     let mut C: size_t = 0;
    |             ^ help: convert the identifier to snake case (notice the capitalization): `c`

warning: variable `A1` should have a snake case name
   --> src/xpath.rs:702:13
    |
702 |         let A1: size_t =
    |             ^^ help: convert the identifier to snake case: `a1`

warning: variable `B1` should have a snake case name
   --> src/xpath.rs:704:13
    |
704 |         let B1: size_t =
    |             ^^ help: convert the identifier to snake case: `b1`

warning: variable `__SORT_SWAP_t` should have a snake case name
   --> src/xpath.rs:791:17
    |
791 |         let mut __SORT_SWAP_t: xmlNodePtr = *dst.offset(start as isize);
    |                 ^^^^^^^^^^^^^ help: convert the identifier to snake case: `__sort_swap_t`

warning: function `PUSH_NEXT` should have a snake case name
   --> src/xpath.rs:801:11
    |
801 | unsafe fn PUSH_NEXT(mut dst: *mut xmlNodePtr, size: size_t,
    |           ^^^^^^^^^ help: convert the identifier to snake case: `push_next`

warning: static variable `xmlXPathNAN` should have an upper case name
   --> src/xpath.rs:904:16
    |
904 | pub static mut xmlXPathNAN: libc::c_double = 0.;
    |                ^^^^^^^^^^^ help: convert the identifier to upper case: `XML_XPATH_NAN`

warning: static variable `xmlXPathPINF` should have an upper case name
   --> src/xpath.rs:905:16
    |
905 | pub static mut xmlXPathPINF: libc::c_double = 0.;
    |                ^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_XPATH_PINF`

warning: static variable `xmlXPathNINF` should have an upper case name
   --> src/xpath.rs:906:16
    |
906 | pub static mut xmlXPathNINF: libc::c_double = 0.;
    |                ^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_XPATH_NINF`

warning: function `xmlXPathInit_xpath` should have a snake case name
   --> src/xpath.rs:920:15
    |
920 | pub unsafe fn xmlXPathInit_xpath() {
    |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_init_xpath`

warning: function `xmlXPathIsNaN_rust2` should have a snake case name
   --> src/xpath.rs:934:15
    |
934 | pub unsafe fn xmlXPathIsNaN_rust2(mut val: libc::c_double, mut flag: libc::c_int)
    |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_is_na_n_rust2`

warning: function `xmlXPathIsInf_rust2` should have a snake case name
   --> src/xpath.rs:961:15
    |
961 | pub unsafe fn xmlXPathIsInf_rust2(mut val: libc::c_double, mut flag: libc::c_int)
    |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_is_inf_rust2`

warning: static variable `xmlXPathXMLNamespaceStruct` should have an upper case name
   --> src/xpath.rs:992:12
    |
992 | static mut xmlXPathXMLNamespaceStruct: xmlNs =
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_XPATH_XMLNAMESPACE_STRUCT`

warning: static variable `xmlXPathXMLNamespace` should have an upper case name
    --> src/xpath.rs:1007:12
     |
1007 | static mut xmlXPathXMLNamespace: xmlNsPtr =
     |            ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_XPATH_XMLNAMESPACE`

warning: static variable `xmlXPathErrorMessages` should have an upper case name
    --> src/xpath.rs:1023:12
     |
1023 | static mut xmlXPathErrorMessages: [*const libc::c_char; 28] =
     |            ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper case: `XML_XPATH_ERROR_MESSAGES`

warning: function `xmlXPathErrMemory` should have a snake case name
    --> src/xpath.rs:1061:11
     |
1061 | unsafe fn xmlXPathErrMemory(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_err_memory`

warning: function `xmlXPathPErrMemory` should have a snake case name
    --> src/xpath.rs:1114:11
     |
1114 | unsafe fn xmlXPathPErrMemory(mut ctxt: xmlXPathParserContextPtr,
     |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_perr_memory`

warning: function `xmlXPathErr` should have a snake case name
    --> src/xpath.rs:1131:15
     |
1131 | pub unsafe fn xmlXPathErr(mut ctxt: xmlXPathParserContextPtr,
     |               ^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_err`

warning: function `xmlXPatherror` should have a snake case name
    --> src/xpath.rs:1221:15
     |
1221 | pub unsafe fn xmlXPatherror(mut ctxt: xmlXPathParserContextPtr,
     |               ^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpatherror`

warning: function `xmlXPathCheckOpLimit` should have a snake case name
    --> src/xpath.rs:1235:11
     |
1235 | unsafe fn xmlXPathCheckOpLimit(mut ctxt: xmlXPathParserContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_check_op_limit`

warning: variable `opCount` should have a snake case name
    --> src/xpath.rs:1236:47
     |
1236 | ...                   mut opCount: libc::c_ulong)
     |                           ^^^^^^^ help: convert the identifier to snake case: `op_count`

warning: function `xmlPointerListAddSize` should have a snake case name
    --> src/xpath.rs:1252:11
     |
1252 | unsafe fn xmlPointerListAddSize(mut list: xmlPointerListPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_pointer_list_add_size`

warning: variable `initialSize` should have a snake case name
    --> src/xpath.rs:1254:48
     |
1254 | ...                   mut initialSize: libc::c_int)
     |                           ^^^^^^^^^^^ help: convert the identifier to snake case: `initial_size`

warning: function `xmlPointerListCreate` should have a snake case name
    --> src/xpath.rs:1309:11
     |
1309 | unsafe fn xmlPointerListCreate(mut initialSize: libc::c_int)
     |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_pointer_list_create`

warning: variable `initialSize` should have a snake case name
    --> src/xpath.rs:1309:36
     |
1309 | unsafe fn xmlPointerListCreate(mut initialSize: libc::c_int)
     |                                    ^^^^^^^^^^^ help: convert the identifier to snake case: `initial_size`

warning: function `xmlPointerListFree` should have a snake case name
    --> src/xpath.rs:1336:11
     |
1336 | unsafe fn xmlPointerListFree(mut list: xmlPointerListPtr) {
     |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_pointer_list_free`

warning: function `xmlXPathNewCompExpr` should have a snake case name
    --> src/xpath.rs:1356:11
     |
1356 | unsafe fn xmlXPathNewCompExpr() -> xmlXPathCompExprPtr {
     |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_comp_expr`

warning: function `xmlXPathFreeCompExpr` should have a snake case name
    --> src/xpath.rs:1405:15
     |
1405 | pub unsafe fn xmlXPathFreeCompExpr(mut comp: xmlXPathCompExprPtr) {
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_comp_expr`

warning: function `xmlXPathCompExprAdd` should have a snake case name
    --> src/xpath.rs:1491:11
     |
1491 | unsafe fn xmlXPathCompExprAdd(mut ctxt: xmlXPathParserContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_expr_add`

warning: function `xmlXPathCompSwap` should have a snake case name
    --> src/xpath.rs:1590:11
     |
1590 | unsafe fn xmlXPathCompSwap(mut op: xmlXPathStepOpPtr) {
     |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_swap`

warning: function `xmlXPathDebugDumpNode` should have a snake case name
    --> src/xpath.rs:1601:11
     |
1601 | unsafe fn xmlXPathDebugDumpNode(mut output: *mut FILE,
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_node`

warning: function `xmlXPathDebugDumpNodeList` should have a snake case name
    --> src/xpath.rs:1637:11
     |
1637 | unsafe fn xmlXPathDebugDumpNodeList(mut output: *mut FILE,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_node_list`

warning: function `xmlXPathDebugDumpNodeSet` should have a snake case name
    --> src/xpath.rs:1668:11
     |
1668 | unsafe fn xmlXPathDebugDumpNodeSet(mut output: *mut FILE,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_node_set`

warning: function `xmlXPathDebugDumpValueTree` should have a snake case name
    --> src/xpath.rs:1709:11
     |
1709 | unsafe fn xmlXPathDebugDumpValueTree(mut output: *mut FILE,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_value_tree`

warning: function `xmlXPathDebugDumpLocationSet` should have a snake case name
    --> src/xpath.rs:1744:11
     |
1744 | unsafe fn xmlXPathDebugDumpLocationSet(mut output: *mut FILE,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_location_set`

warning: function `xmlXPathDebugDumpObject_rust2` should have a snake case name
    --> src/xpath.rs:1790:15
     |
1790 | pub unsafe fn xmlXPathDebugDumpObject_rust2(mut output: *mut FILE,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_object_rust2`

warning: function `xmlXPathDebugDumpStepOp` should have a snake case name
    --> src/xpath.rs:1963:11
     |
1963 | unsafe fn xmlXPathDebugDumpStepOp(mut output: *mut FILE,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_step_op`

warning: function `xmlXPathDebugDumpCompExpr` should have a snake case name
    --> src/xpath.rs:2305:15
     |
2305 | pub unsafe fn xmlXPathDebugDumpCompExpr(mut output: *mut FILE,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_debug_dump_comp_expr`

warning: function `xmlXPathNewCache` should have a snake case name
    --> src/xpath.rs:2394:11
     |
2394 | unsafe fn xmlXPathNewCache() -> xmlXPathContextCachePtr {
     |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_cache`

warning: function `xmlXPathCacheFreeObjectList` should have a snake case name
    --> src/xpath.rs:2415:11
     |
2415 | unsafe fn xmlXPathCacheFreeObjectList(mut list:
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_free_object_list`

warning: function `xmlXPathFreeCache` should have a snake case name
    --> src/xpath.rs:2441:11
     |
2441 | unsafe fn xmlXPathFreeCache(mut cache: xmlXPathContextCachePtr) {
     |           ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_cache`

warning: function `xmlXPathContextSetCache` should have a snake case name
    --> src/xpath.rs:2483:15
     |
2483 | pub unsafe fn xmlXPathContextSetCache(mut ctxt: xmlXPathContextPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_context_set_cache`

warning: function `xmlXPathCacheWrapNodeSet` should have a snake case name
    --> src/xpath.rs:2521:11
     |
2521 | unsafe fn xmlXPathCacheWrapNodeSet(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_wrap_node_set`

warning: function `xmlXPathCacheWrapString` should have a snake case name
    --> src/xpath.rs:2552:11
     |
2552 | unsafe fn xmlXPathCacheWrapString(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_wrap_string`

warning: function `xmlXPathCacheNewNodeSet` should have a snake case name
    --> src/xpath.rs:2600:11
     |
2600 | unsafe fn xmlXPathCacheNewNodeSet(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_new_node_set`

warning: function `xmlXPathCacheNewCString` should have a snake case name
    --> src/xpath.rs:2670:11
     |
2670 | unsafe fn xmlXPathCacheNewCString(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_new_cstring`

warning: function `xmlXPathCacheNewString` should have a snake case name
    --> src/xpath.rs:2714:11
     |
2714 | unsafe fn xmlXPathCacheNewString(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_new_string`

warning: function `xmlXPathCacheNewBoolean` should have a snake case name
    --> src/xpath.rs:2770:11
     |
2770 | unsafe fn xmlXPathCacheNewBoolean(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_new_boolean`

warning: function `xmlXPathCacheNewFloat` should have a snake case name
    --> src/xpath.rs:2814:11
     |
2814 | unsafe fn xmlXPathCacheNewFloat(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_new_float`

warning: function `xmlXPathCacheConvertString` should have a snake case name
    --> src/xpath.rs:2859:11
     |
2859 | unsafe fn xmlXPathCacheConvertString(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_convert_string`

warning: function `xmlXPathCacheObjectCopy` should have a snake case name
    --> src/xpath.rs:2908:11
     |
2908 | unsafe fn xmlXPathCacheObjectCopy(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_object_copy`

warning: function `xmlXPathCacheConvertBoolean` should have a snake case name
    --> src/xpath.rs:2939:11
     |
2939 | unsafe fn xmlXPathCacheConvertBoolean(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_convert_boolean`

warning: function `xmlXPathCacheConvertNumber` should have a snake case name
    --> src/xpath.rs:2965:11
     |
2965 | unsafe fn xmlXPathCacheConvertNumber(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cache_convert_number`

warning: function `xmlXPathSetFrame` should have a snake case name
    --> src/xpath.rs:2991:11
     |
2991 | unsafe fn xmlXPathSetFrame(mut ctxt: xmlXPathParserContextPtr)
     |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_set_frame`

warning: function `xmlXPathPopFrame` should have a snake case name
    --> src/xpath.rs:3006:11
     |
3006 | unsafe fn xmlXPathPopFrame(mut ctxt: xmlXPathParserContextPtr,
     |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_pop_frame`

warning: function `valuePop` should have a snake case name
    --> src/xpath.rs:3026:15
     |
3026 | pub unsafe fn valuePop(mut ctxt: xmlXPathParserContextPtr)
     |               ^^^^^^^^ help: convert the identifier to snake case: `value_pop`

warning: function `valuePush` should have a snake case name
    --> src/xpath.rs:3060:15
     |
3060 | pub unsafe fn valuePush(mut ctxt: xmlXPathParserContextPtr,
     |               ^^^^^^^^^ help: convert the identifier to snake case: `value_push`

warning: function `xmlXPathPopBoolean` should have a snake case name
    --> src/xpath.rs:3187:15
     |
3187 | pub unsafe fn xmlXPathPopBoolean(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_pop_boolean`

warning: function `xmlXPathPopNumber` should have a snake case name
    --> src/xpath.rs:3220:15
     |
3220 | pub unsafe fn xmlXPathPopNumber(mut ctxt: xmlXPathParserContextPtr)
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_pop_number`

warning: function `xmlXPathPopString` should have a snake case name
    --> src/xpath.rs:3252:15
     |
3252 | pub unsafe fn xmlXPathPopString(mut ctxt: xmlXPathParserContextPtr)
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_pop_string`

warning: function `xmlXPathPopNodeSet` should have a snake case name
    --> src/xpath.rs:3284:15
     |
3284 | pub unsafe fn xmlXPathPopNodeSet(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_pop_node_set`

warning: function `xmlXPathPopExternal` should have a snake case name
    --> src/xpath.rs:3329:15
     |
3329 | pub unsafe fn xmlXPathPopExternal(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_pop_external`

warning: function `xmlXPathFormatNumber` should have a snake case name
    --> src/xpath.rs:3368:11
     |
3368 | unsafe fn xmlXPathFormatNumber(mut number: libc::c_double,
     |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_format_number`

warning: function `xmlXPathOrderDocElems` should have a snake case name
    --> src/xpath.rs:3585:15
     |
3585 | pub unsafe fn xmlXPathOrderDocElems(mut doc: xmlDocPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_order_doc_elems`

warning: function `xmlXPathCmpNodes` should have a snake case name
    --> src/xpath.rs:3630:15
     |
3630 | pub unsafe fn xmlXPathCmpNodes(mut node1: xmlNodePtr,
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cmp_nodes`

warning: variable `attrNode1` should have a snake case name
    --> src/xpath.rs:3637:13
     |
3637 |     let mut attrNode1: xmlNodePtr = 0 as xmlNodePtr;
     |             ^^^^^^^^^ help: convert the identifier to snake case: `attr_node1`

warning: variable `attrNode2` should have a snake case name
    --> src/xpath.rs:3638:13
     |
3638 |     let mut attrNode2: xmlNodePtr = 0 as xmlNodePtr;
     |             ^^^^^^^^^ help: convert the identifier to snake case: `attr_node2`

warning: function `xmlXPathNodeSetSort` should have a snake case name
    --> src/xpath.rs:3772:15
     |
3772 | pub unsafe fn xmlXPathNodeSetSort(mut set: xmlNodeSetPtr) {
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_sort`

warning: function `xmlXPathNodeSetDupNs` should have a snake case name
    --> src/xpath.rs:3789:11
     |
3789 | unsafe fn xmlXPathNodeSetDupNs(mut node: xmlNodePtr,
     |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_dup_ns`

warning: function `xmlXPathNodeSetFreeNs` should have a snake case name
    --> src/xpath.rs:3835:15
     |
3835 | pub unsafe fn xmlXPathNodeSetFreeNs(mut ns: xmlNsPtr) {
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_free_ns`

warning: function `xmlXPathNodeSetCreate` should have a snake case name
    --> src/xpath.rs:3866:15
     |
3866 | pub unsafe fn xmlXPathNodeSetCreate(mut val: xmlNodePtr)
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_create`

warning: function `xmlXPathNodeSetContains` should have a snake case name
    --> src/xpath.rs:3932:15
     |
3932 | pub unsafe fn xmlXPathNodeSetContains(mut cur: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_contains`

warning: function `xmlXPathNodeSetAddNs` should have a snake case name
    --> src/xpath.rs:3977:15
     |
3977 | pub unsafe fn xmlXPathNodeSetAddNs(mut cur: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_add_ns`

warning: function `xmlXPathNodeSetAdd` should have a snake case name
    --> src/xpath.rs:4074:15
     |
4074 | pub unsafe fn xmlXPathNodeSetAdd(mut cur: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_add`

warning: function `xmlXPathNodeSetAddUnique` should have a snake case name
    --> src/xpath.rs:4167:26
     |
4167 | pub unsafe extern "C" fn xmlXPathNodeSetAddUnique(mut cur: xmlNodeSetPtr,
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_add_unique`

warning: function `xmlXPathNodeSetMerge` should have a snake case name
    --> src/xpath.rs:4249:15
     |
4249 | pub unsafe fn xmlXPathNodeSetMerge(mut val1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_merge`

warning: variable `initNr` should have a snake case name
    --> src/xpath.rs:4254:13
     |
4254 |     let mut initNr: libc::c_int = 0;
     |             ^^^^^^ help: convert the identifier to snake case: `init_nr`

warning: function `xmlXPathNodeSetMergeAndClear` should have a snake case name
    --> src/xpath.rs:4379:22
     |
4379 | unsafe extern "C" fn xmlXPathNodeSetMergeAndClear(mut set1: xmlNodeSetPtr,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_merge_and_clear`

warning: variable `initNbSet1` should have a snake case name
    --> src/xpath.rs:4385:13
     |
4385 |     let mut initNbSet1: libc::c_int = 0;
     |             ^^^^^^^^^^ help: convert the identifier to snake case: `init_nb_set1`

warning: function `xmlXPathNodeSetMergeAndClearNoDupls` should have a snake case name
    --> src/xpath.rs:4506:22
     |
4506 | unsafe extern "C" fn xmlXPathNodeSetMergeAndClearNoDupls(mut set1:
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_merge_and_clear_no_dupls`

warning: function `xmlXPathNodeSetDel` should have a snake case name
    --> src/xpath.rs:4583:15
     |
4583 | pub unsafe fn xmlXPathNodeSetDel(mut cur: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_del`

warning: function `xmlXPathNodeSetRemove` should have a snake case name
    --> src/xpath.rs:4622:15
     |
4622 | pub unsafe fn xmlXPathNodeSetRemove(mut cur: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_remove`

warning: function `xmlXPathFreeNodeSet` should have a snake case name
    --> src/xpath.rs:4648:15
     |
4648 | pub unsafe fn xmlXPathFreeNodeSet(mut obj: xmlNodeSetPtr) {
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_node_set`

warning: function `xmlXPathNodeSetClearFromPos` should have a snake case name
    --> src/xpath.rs:4678:11
     |
4678 | unsafe fn xmlXPathNodeSetClearFromPos(mut set: xmlNodeSetPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_clear_from_pos`

warning: variable `hasNsNodes` should have a snake case name
    --> src/xpath.rs:4680:54
     |
4680 | ...                   mut hasNsNodes:
     |                           ^^^^^^^^^^ help: convert the identifier to snake case: `has_ns_nodes`

warning: function `xmlXPathNodeSetClear` should have a snake case name
    --> src/xpath.rs:4710:11
     |
4710 | unsafe fn xmlXPathNodeSetClear(mut set: xmlNodeSetPtr,
     |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_clear`

warning: variable `hasNsNodes` should have a snake case name
    --> src/xpath.rs:4711:47
     |
4711 | ...                   mut hasNsNodes: libc::c_int) {
     |                           ^^^^^^^^^^ help: convert the identifier to snake case: `has_ns_nodes`

warning: function `xmlXPathNodeSetKeepLast` should have a snake case name
    --> src/xpath.rs:4722:11
     |
4722 | unsafe fn xmlXPathNodeSetKeepLast(mut set: xmlNodeSetPtr) {
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_keep_last`

warning: function `xmlXPathFreeValueTree` should have a snake case name
    --> src/xpath.rs:4753:11
     |
4753 | unsafe fn xmlXPathFreeValueTree(mut obj: xmlNodeSetPtr) {
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_value_tree`

warning: function `xmlXPathNewNodeSet` should have a snake case name
    --> src/xpath.rs:4786:15
     |
4786 | pub unsafe fn xmlXPathNewNodeSet(mut val: xmlNodePtr)
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_node_set`

warning: function `xmlXPathNewValueTree` should have a snake case name
    --> src/xpath.rs:4818:15
     |
4818 | pub unsafe fn xmlXPathNewValueTree(mut val: xmlNodePtr)
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_value_tree`

warning: function `xmlXPathNewNodeSetList` should have a snake case name
    --> src/xpath.rs:4849:15
     |
4849 | pub unsafe fn xmlXPathNewNodeSetList(mut val: xmlNodeSetPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_node_set_list`

warning: function `xmlXPathWrapNodeSet` should have a snake case name
    --> src/xpath.rs:4886:15
     |
4886 | pub unsafe fn xmlXPathWrapNodeSet(mut val: xmlNodeSetPtr)
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_wrap_node_set`

warning: function `xmlXPathFreeNodeSetList` should have a snake case name
    --> src/xpath.rs:4913:15
     |
4913 | pub unsafe fn xmlXPathFreeNodeSetList(mut obj: xmlXPathObjectPtr) {
     |               ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_node_set_list`

warning: function `xmlXPathDifference` should have a snake case name
    --> src/xpath.rs:4929:15
     |
4929 | pub unsafe fn xmlXPathDifference(mut nodes1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_difference`

warning: function `xmlXPathIntersection` should have a snake case name
    --> src/xpath.rs:4976:15
     |
4976 | pub unsafe fn xmlXPathIntersection(mut nodes1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_intersection`

warning: function `xmlXPathDistinctSorted` should have a snake case name
    --> src/xpath.rs:5021:15
     |
5021 | pub unsafe fn xmlXPathDistinctSorted(mut nodes: xmlNodeSetPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_distinct_sorted`

warning: function `xmlXPathDistinct` should have a snake case name
    --> src/xpath.rs:5076:15
     |
5076 | pub unsafe fn xmlXPathDistinct(mut nodes: xmlNodeSetPtr)
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_distinct`

warning: function `xmlXPathHasSameNodes` should have a snake case name
    --> src/xpath.rs:5097:15
     |
5097 | pub unsafe fn xmlXPathHasSameNodes(mut nodes1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_has_same_nodes`

warning: function `xmlXPathNodeLeadingSorted` should have a snake case name
    --> src/xpath.rs:5137:15
     |
5137 | pub unsafe fn xmlXPathNodeLeadingSorted(mut nodes: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_leading_sorted`

warning: function `xmlXPathNodeLeading` should have a snake case name
    --> src/xpath.rs:5182:15
     |
5182 | pub unsafe fn xmlXPathNodeLeading(mut nodes: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_leading`

warning: function `xmlXPathLeadingSorted` should have a snake case name
    --> src/xpath.rs:5201:15
     |
5201 | pub unsafe fn xmlXPathLeadingSorted(mut nodes1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_leading_sorted`

warning: function `xmlXPathLeading` should have a snake case name
    --> src/xpath.rs:5235:15
     |
5235 | pub unsafe fn xmlXPathLeading(mut nodes1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_leading`

warning: function `xmlXPathNodeTrailingSorted` should have a snake case name
    --> src/xpath.rs:5273:15
     |
5273 | pub unsafe fn xmlXPathNodeTrailingSorted(mut nodes: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_trailing_sorted`

warning: function `xmlXPathNodeTrailing` should have a snake case name
    --> src/xpath.rs:5321:15
     |
5321 | pub unsafe fn xmlXPathNodeTrailing(mut nodes: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_trailing`

warning: function `xmlXPathTrailingSorted` should have a snake case name
    --> src/xpath.rs:5340:15
     |
5340 | pub unsafe fn xmlXPathTrailingSorted(mut nodes1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_trailing_sorted`

warning: function `xmlXPathTrailing` should have a snake case name
    --> src/xpath.rs:5374:15
     |
5374 | pub unsafe fn xmlXPathTrailing(mut nodes1: xmlNodeSetPtr,
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_trailing`

warning: function `xmlXPathRegisterFunc` should have a snake case name
    --> src/xpath.rs:5415:15
     |
5415 | pub unsafe fn xmlXPathRegisterFunc(mut ctxt: xmlXPathContextPtr,
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_func`

warning: function `xmlXPathRegisterFuncNS` should have a snake case name
    --> src/xpath.rs:5433:15
     |
5433 | pub unsafe fn xmlXPathRegisterFuncNS(mut ctxt: xmlXPathContextPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_func_ns`

warning: function `xmlXPathRegisterFuncLookup` should have a snake case name
    --> src/xpath.rs:5463:15
     |
5463 | pub unsafe fn xmlXPathRegisterFuncLookup(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_func_lookup`

warning: variable `funcCtxt` should have a snake case name
    --> src/xpath.rs:5467:57
     |
5467 | ...                   mut funcCtxt:
     |                           ^^^^^^^^ help: convert the identifier to snake case: `func_ctxt`

warning: function `xmlXPathFunctionLookup` should have a snake case name
    --> src/xpath.rs:5484:15
     |
5484 | pub unsafe fn xmlXPathFunctionLookup(mut ctxt: xmlXPathContextPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_function_lookup`

warning: function `xmlXPathFunctionLookupNS` should have a snake case name
    --> src/xpath.rs:5511:15
     |
5511 | pub unsafe fn xmlXPathFunctionLookupNS(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_function_lookup_ns`

warning: function `xmlXPathRegisteredFuncsCleanup` should have a snake case name
    --> src/xpath.rs:5542:15
     |
5542 | pub unsafe fn xmlXPathRegisteredFuncsCleanup(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_registered_funcs_cleanup`

warning: function `xmlXPathRegisterVariable` should have a snake case name
    --> src/xpath.rs:5565:15
     |
5565 | pub unsafe fn xmlXPathRegisterVariable(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_variable`

warning: function `xmlXPathRegisterVariableNS` should have a snake case name
    --> src/xpath.rs:5586:15
     |
5586 | pub unsafe fn xmlXPathRegisterVariableNS(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_variable_ns`

warning: function `xmlXPathRegisterVariableLookup` should have a snake case name
    --> src/xpath.rs:5703:15
     |
5703 | pub unsafe fn xmlXPathRegisterVariableLookup(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_variable_lookup`

warning: function `xmlXPathVariableLookup` should have a snake case name
    --> src/xpath.rs:5724:15
     |
5724 | pub unsafe fn xmlXPathVariableLookup(mut ctxt: xmlXPathContextPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_variable_lookup`

warning: function `xmlXPathVariableLookupNS` should have a snake case name
    --> src/xpath.rs:5751:15
     |
5751 | pub unsafe fn xmlXPathVariableLookupNS(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_variable_lookup_ns`

warning: function `xmlXPathRegisteredVariablesCleanup` should have a snake case name
    --> src/xpath.rs:5779:15
     |
5779 | pub unsafe fn xmlXPathRegisteredVariablesCleanup(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_registered_variables_cleanup`

warning: function `xmlXPathRegisterNs` should have a snake case name
    --> src/xpath.rs:5803:15
     |
5803 | pub unsafe fn xmlXPathRegisterNs(mut ctxt: xmlXPathContextPtr,
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_ns`

warning: function `xmlXPathNsLookup_rust2` should have a snake case name
    --> src/xpath.rs:5845:15
     |
5845 | pub unsafe fn xmlXPathNsLookup_rust2(mut ctxt: xmlXPathContextPtr,
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_ns_lookup_rust2`

warning: function `xmlXPathRegisteredNsCleanup` should have a snake case name
    --> src/xpath.rs:5881:15
     |
5881 | pub unsafe fn xmlXPathRegisteredNsCleanup(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_registered_ns_cleanup`

warning: function `xmlXPathNewFloat` should have a snake case name
    --> src/xpath.rs:5905:15
     |
5905 | pub unsafe fn xmlXPathNewFloat(mut val: libc::c_double)
     |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_float`

warning: function `xmlXPathNewBoolean` should have a snake case name
    --> src/xpath.rs:5933:15
     |
5933 | pub unsafe fn xmlXPathNewBoolean(mut val: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_boolean`

warning: function `xmlXPathNewString` should have a snake case name
    --> src/xpath.rs:5961:15
     |
5961 | pub unsafe fn xmlXPathNewString(mut val: *const xmlChar)
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_string`

warning: function `xmlXPathWrapString` should have a snake case name
    --> src/xpath.rs:5995:15
     |
5995 | pub unsafe fn xmlXPathWrapString(mut val: *mut xmlChar)
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_wrap_string`

warning: function `xmlXPathNewCString` should have a snake case name
    --> src/xpath.rs:6023:15
     |
6023 | pub unsafe fn xmlXPathNewCString(mut val: *const libc::c_char)
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_cstring`

warning: function `xmlXPathWrapCString` should have a snake case name
    --> src/xpath.rs:6051:15
     |
6051 | pub unsafe fn xmlXPathWrapCString(mut val: *mut libc::c_char)
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_wrap_cstring`

warning: function `xmlXPathWrapExternal` should have a snake case name
    --> src/xpath.rs:6064:15
     |
6064 | pub unsafe fn xmlXPathWrapExternal(mut val: *mut libc::c_void)
     |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_wrap_external`

warning: function `xmlXPathObjectCopy` should have a snake case name
    --> src/xpath.rs:6092:15
     |
6092 | pub unsafe fn xmlXPathObjectCopy(mut val: xmlXPathObjectPtr)
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_object_copy`

warning: function `xmlXPathFreeObject` should have a snake case name
    --> src/xpath.rs:6146:15
     |
6146 | pub unsafe fn xmlXPathFreeObject(mut obj: xmlXPathObjectPtr) {
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_object`

warning: function `xmlXPathFreeObjectEntry` should have a snake case name
    --> src/xpath.rs:6174:22
     |
6174 | unsafe extern "C" fn xmlXPathFreeObjectEntry(mut obj: *mut libc::c_void,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_object_entry`

warning: function `xmlXPathReleaseObject` should have a snake case name
    --> src/xpath.rs:6185:11
     |
6185 | unsafe fn xmlXPathReleaseObject(mut ctxt: xmlXPathContextPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_release_object`

warning: function `xmlXPathCastBooleanToString` should have a snake case name
    --> src/xpath.rs:6433:15
     |
6433 | pub unsafe fn xmlXPathCastBooleanToString(mut val: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_boolean_to_string`

warning: function `xmlXPathCastNumberToString` should have a snake case name
    --> src/xpath.rs:6456:15
     |
6456 | pub unsafe fn xmlXPathCastNumberToString(mut val: libc::c_double)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_number_to_string`

warning: function `xmlXPathCastNodeToString` should have a snake case name
    --> src/xpath.rs:6502:15
     |
6502 | pub unsafe fn xmlXPathCastNodeToString(mut node: xmlNodePtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_node_to_string`

warning: function `xmlXPathCastNodeSetToString` should have a snake case name
    --> src/xpath.rs:6522:15
     |
6522 | pub unsafe fn xmlXPathCastNodeSetToString(mut ns: xmlNodeSetPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_node_set_to_string`

warning: function `xmlXPathCastToString_rust2` should have a snake case name
    --> src/xpath.rs:6543:15
     |
6543 | pub unsafe fn xmlXPathCastToString_rust2(mut val: xmlXPathObjectPtr,mut flag: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_to_string_rust2`

warning: function `xmlXPathConvertString_rust2` should have a snake case name
    --> src/xpath.rs:6600:15
     |
6600 | pub unsafe fn xmlXPathConvertString_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_convert_string_rust2`

warning: function `xmlXPathCastBooleanToNumber` should have a snake case name
    --> src/xpath.rs:6652:15
     |
6652 | pub unsafe fn xmlXPathCastBooleanToNumber(mut val: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_boolean_to_number`

warning: function `xmlXPathCastStringToNumber` should have a snake case name
    --> src/xpath.rs:6666:15
     |
6666 | pub unsafe fn xmlXPathCastStringToNumber(mut val: *const xmlChar)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_string_to_number`

warning: function `xmlXPathCastNodeToNumber` should have a snake case name
    --> src/xpath.rs:6679:15
     |
6679 | pub unsafe fn xmlXPathCastNodeToNumber(mut node: xmlNodePtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_node_to_number`

warning: function `xmlXPathCastNodeSetToNumber` should have a snake case name
    --> src/xpath.rs:6699:15
     |
6699 | pub unsafe fn xmlXPathCastNodeSetToNumber(mut ns: xmlNodeSetPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_node_set_to_number`

warning: function `xmlXPathCastToNumber_rust2` should have a snake case name
    --> src/xpath.rs:6718:15
     |
6718 | pub unsafe fn xmlXPathCastToNumber_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_to_number_rust2`

warning: function `xmlXPathConvertNumber` should have a snake case name
    --> src/xpath.rs:6766:15
     |
6766 | pub unsafe fn xmlXPathConvertNumber(mut val: xmlXPathObjectPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_convert_number`

warning: function `xmlXPathCastNumberToBoolean` should have a snake case name
    --> src/xpath.rs:6790:15
     |
6790 | pub unsafe fn xmlXPathCastNumberToBoolean(mut val: libc::c_double)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_number_to_boolean`

warning: function `xmlXPathCastStringToBoolean` should have a snake case name
    --> src/xpath.rs:6804:15
     |
6804 | pub unsafe fn xmlXPathCastStringToBoolean(mut val: *const xmlChar)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_string_to_boolean`

warning: function `xmlXPathCastNodeSetToBoolean` should have a snake case name
    --> src/xpath.rs:6820:15
     |
6820 | pub unsafe fn xmlXPathCastNodeSetToBoolean(mut ns: xmlNodeSetPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_node_set_to_boolean`

warning: function `xmlXPathCastToBoolean_rust2` should have a snake case name
    --> src/xpath.rs:6836:15
     |
6836 | pub unsafe fn xmlXPathCastToBoolean_rust2(mut val: xmlXPathObjectPtr, mut flag: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_cast_to_boolean_rust2`

warning: function `xmlXPathConvertBoolean` should have a snake case name
    --> src/xpath.rs:6886:15
     |
6886 | pub unsafe fn xmlXPathConvertBoolean(mut val: xmlXPathObjectPtr)
     |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_convert_boolean`

warning: function `xmlXPathNewContext` should have a snake case name
    --> src/xpath.rs:6915:15
     |
6915 | pub unsafe fn xmlXPathNewContext(mut doc: xmlDocPtr, mut flag: libc::c_int)
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_context`

warning: function `xmlXPathFreeContext` should have a snake case name
    --> src/xpath.rs:6962:15
     |
6962 | pub unsafe fn xmlXPathFreeContext(mut ctxt: xmlXPathContextPtr) {
     |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_context`

warning: function `xmlXPathNewParserContext` should have a snake case name
    --> src/xpath.rs:6991:15
     |
6991 | pub unsafe fn xmlXPathNewParserContext(mut str: *const xmlChar,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_new_parser_context`

warning: function `xmlXPathCompParserContext` should have a snake case name
    --> src/xpath.rs:7033:11
     |
7033 | unsafe fn xmlXPathCompParserContext(mut comp: xmlXPathCompExprPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_parser_context`

warning: function `xmlXPathFreeParserContext_rust2` should have a snake case name
    --> src/xpath.rs:7078:15
     |
7078 | pub unsafe fn xmlXPathFreeParserContext_rust2(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_free_parser_context_rust2`

warning: function `xmlXPathNodeValHash` should have a snake case name
    --> src/xpath.rs:7120:11
     |
7120 | unsafe fn xmlXPathNodeValHash(mut node: xmlNodePtr)
     |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_val_hash`

warning: function `xmlXPathStringHash` should have a snake case name
    --> src/xpath.rs:7238:11
     |
7238 | unsafe fn xmlXPathStringHash(mut string: *const xmlChar)
     |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_string_hash`

warning: function `xmlXPathCompareNodeSetFloat` should have a snake case name
    --> src/xpath.rs:7273:11
     |
7273 | unsafe fn xmlXPathCompareNodeSetFloat(mut ctxt:
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compare_node_set_float`

warning: function `xmlXPathCompareNodeSetString` should have a snake case name
    --> src/xpath.rs:7337:11
     |
7337 | unsafe fn xmlXPathCompareNodeSetString(mut ctxt:
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compare_node_set_string`

warning: function `xmlXPathCompareNodeSets` should have a snake case name
    --> src/xpath.rs:7407:11
     |
7407 | unsafe fn xmlXPathCompareNodeSets(mut inf: libc::c_int,
     |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compare_node_sets`

warning: function `xmlXPathCompareNodeSetValue` should have a snake case name
    --> src/xpath.rs:7528:11
     |
7528 | unsafe fn xmlXPathCompareNodeSetValue(mut ctxt:
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compare_node_set_value`

warning: function `xmlXPathEqualNodeSetString` should have a snake case name
    --> src/xpath.rs:7587:11
     |
7587 | unsafe fn xmlXPathEqualNodeSetString(mut arg: xmlXPathObjectPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_equal_node_set_string`

warning: function `xmlXPathEqualNodeSetFloat` should have a snake case name
    --> src/xpath.rs:7660:11
     |
7660 | unsafe fn xmlXPathEqualNodeSetFloat(mut ctxt:
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_equal_node_set_float`

warning: function `xmlXPathEqualNodeSets` should have a snake case name
    --> src/xpath.rs:7726:11
     |
7726 | unsafe fn xmlXPathEqualNodeSets(mut arg1: xmlXPathObjectPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_equal_node_sets`

warning: function `xmlXPathEqualValuesCommon` should have a snake case name
    --> src/xpath.rs:7911:11
     |
7911 | unsafe fn xmlXPathEqualValuesCommon(mut ctxt:
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_equal_values_common`

warning: function `xmlXPathEqualValues_rust2` should have a snake case name
    --> src/xpath.rs:8139:15
     |
8139 | pub unsafe fn xmlXPathEqualValues_rust2(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_equal_values_rust2`

warning: function `xmlXPathNotEqualValues_rust2` should have a snake case name
    --> src/xpath.rs:8253:15
     |
8253 | pub unsafe fn xmlXPathNotEqualValues_rust2(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_not_equal_values_rust2`

warning: function `xmlXPathCompareValues` should have a snake case name
    --> src/xpath.rs:8384:15
     |
8384 | pub unsafe fn xmlXPathCompareValues(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compare_values`

warning: function `xmlXPathValueFlipSign` should have a snake case name
    --> src/xpath.rs:8517:15
     |
8517 | pub unsafe fn xmlXPathValueFlipSign(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_value_flip_sign`

warning: function `xmlXPathAddValues` should have a snake case name
    --> src/xpath.rs:8542:15
     |
8542 | pub unsafe fn xmlXPathAddValues(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_add_values`

warning: function `xmlXPathSubValues` should have a snake case name
    --> src/xpath.rs:8575:15
     |
8575 | pub unsafe fn xmlXPathSubValues(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_sub_values`

warning: function `xmlXPathMultValues` should have a snake case name
    --> src/xpath.rs:8608:15
     |
8608 | pub unsafe fn xmlXPathMultValues(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_mult_values`

warning: function `xmlXPathDivValues` should have a snake case name
    --> src/xpath.rs:8641:15
     |
8641 | pub unsafe fn xmlXPathDivValues(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_div_values`

warning: function `xmlXPathModValues` should have a snake case name
    --> src/xpath.rs:8674:15
     |
8674 | pub unsafe fn xmlXPathModValues(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_mod_values`

warning: function `xmlXPathNextSelf` should have a snake case name
    --> src/xpath.rs:8716:26
     |
8716 | pub unsafe extern "C" fn xmlXPathNextSelf(mut ctxt: xmlXPathParserContextPtr,
     |                          ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_self`

warning: function `xmlXPathNextChild_rust2` should have a snake case name
    --> src/xpath.rs:8733:26
     |
8733 | pub unsafe extern "C" fn xmlXPathNextChild_rust2(mut ctxt: xmlXPathParserContextPtr,
     |                          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_child_rust2`

warning: function `xmlXPathNextChildElement` should have a snake case name
    --> src/xpath.rs:8795:22
     |
8795 | unsafe extern "C" fn xmlXPathNextChildElement(mut ctxt:
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_child_element`

warning: function `xmlXPathNextDescendant` should have a snake case name
    --> src/xpath.rs:8875:26
     |
8875 | pub unsafe extern "C" fn xmlXPathNextDescendant(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_descendant`

warning: function `xmlXPathNextDescendantOrSelf` should have a snake case name
    --> src/xpath.rs:8946:26
     |
8946 | pub unsafe extern "C" fn xmlXPathNextDescendantOrSelf(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_descendant_or_self`

warning: function `xmlXPathNextParent_rust2` should have a snake case name
    --> src/xpath.rs:8972:26
     |
8972 | pub unsafe extern "C" fn xmlXPathNextParent_rust2(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_parent_rust2`

warning: function `xmlXPathNextAncestor_rust2` should have a snake case name
    --> src/xpath.rs:9090:26
     |
9090 | pub unsafe extern "C" fn xmlXPathNextAncestor_rust2(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_ancestor_rust2`

warning: function `xmlXPathNextAncestorOrSelf` should have a snake case name
    --> src/xpath.rs:9283:26
     |
9283 | pub unsafe extern "C" fn xmlXPathNextAncestorOrSelf(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_ancestor_or_self`

warning: function `xmlXPathNextFollowingSibling` should have a snake case name
    --> src/xpath.rs:9303:26
     |
9303 | pub unsafe extern "C" fn xmlXPathNextFollowingSibling(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_following_sibling`

warning: function `xmlXPathNextPrecedingSibling` should have a snake case name
    --> src/xpath.rs:9331:26
     |
9331 | pub unsafe extern "C" fn xmlXPathNextPrecedingSibling(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_preceding_sibling`

warning: function `xmlXPathNextFollowing` should have a snake case name
    --> src/xpath.rs:9366:26
     |
9366 | pub unsafe extern "C" fn xmlXPathNextFollowing(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_following`

warning: function `xmlXPathIsAncestor` should have a snake case name
    --> src/xpath.rs:9419:11
     |
9419 | unsafe fn xmlXPathIsAncestor(mut ancestor: xmlNodePtr,
     |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_is_ancestor`

warning: function `xmlXPathNextPreceding` should have a snake case name
    --> src/xpath.rs:9455:15
     |
9455 | pub unsafe fn xmlXPathNextPreceding(mut ctxt:
     |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_preceding`

warning: function `xmlXPathNextPrecedingInternal` should have a snake case name
    --> src/xpath.rs:9518:22
     |
9518 | unsafe extern "C" fn xmlXPathNextPrecedingInternal(mut ctxt:
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_preceding_internal`

warning: function `xmlXPathNextNamespace` should have a snake case name
    --> src/xpath.rs:9578:26
     |
9578 | pub unsafe extern "C" fn xmlXPathNextNamespace(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_namespace`

warning: function `xmlXPathNextAttribute` should have a snake case name
    --> src/xpath.rs:9633:26
     |
9633 | pub unsafe extern "C" fn xmlXPathNextAttribute(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_next_attribute`

warning: function `xmlXPathRoot` should have a snake case name
    --> src/xpath.rs:9668:15
     |
9668 | pub unsafe fn xmlXPathRoot(mut ctxt: xmlXPathParserContextPtr) {
     |               ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_root`

warning: function `xmlXPathLastFunction_rust2` should have a snake case name
    --> src/xpath.rs:9693:26
     |
9693 | pub unsafe extern "C" fn xmlXPathLastFunction_rust2(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_last_function_rust2`

warning: function `xmlXPathPositionFunction_rust2` should have a snake case name
    --> src/xpath.rs:9735:26
     |
9735 | pub unsafe extern "C" fn xmlXPathPositionFunction_rust2(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_position_function_rust2`

warning: function `xmlXPathCountFunction` should have a snake case name
    --> src/xpath.rs:9774:26
     |
9774 | pub unsafe extern "C" fn xmlXPathCountFunction(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_count_function`

warning: function `xmlXPathGetElementsByIds` should have a snake case name
    --> src/xpath.rs:9817:11
     |
9817 | unsafe fn xmlXPathGetElementsByIds(mut doc: xmlDocPtr,
     |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_get_elements_by_ids`

warning: variable `ID` should have a snake case name
    --> src/xpath.rs:9822:13
     |
9822 |     let mut ID: *mut xmlChar = 0 as *mut xmlChar;
     |             ^^ help: convert the identifier to snake case: `id`

warning: function `xmlXPathIdFunction` should have a snake case name
    --> src/xpath.rs:9899:26
     |
9899 | pub unsafe extern "C" fn xmlXPathIdFunction(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_id_function`

warning: function `xmlXPathLocalNameFunction` should have a snake case name
    --> src/xpath.rs:9969:26
     |
9969 | pub unsafe extern "C" fn xmlXPathLocalNameFunction(mut ctxt:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_local_name_function`

warning: function `xmlXPathNamespaceURIFunction` should have a snake case name
     --> src/xpath.rs:10064:26
      |
10064 | pub unsafe extern "C" fn xmlXPathNamespaceURIFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_namespace_urifunction`

warning: function `xmlXPathNameFunction` should have a snake case name
     --> src/xpath.rs:10154:22
      |
10154 | unsafe extern "C" fn xmlXPathNameFunction(mut ctxt: xmlXPathParserContextPtr,
      |                      ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_name_function`

warning: function `xmlXPathStringFunction` should have a snake case name
     --> src/xpath.rs:10293:26
      |
10293 | pub unsafe extern "C" fn xmlXPathStringFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_string_function`

warning: function `xmlXPathStringLengthFunction` should have a snake case name
     --> src/xpath.rs:10333:26
      |
10333 | pub unsafe extern "C" fn xmlXPathStringLengthFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_string_length_function`

warning: function `xmlXPathConcatFunction` should have a snake case name
     --> src/xpath.rs:10394:26
      |
10394 | pub unsafe extern "C" fn xmlXPathConcatFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_concat_function`

warning: function `xmlXPathContainsFunction` should have a snake case name
     --> src/xpath.rs:10459:26
      |
10459 | pub unsafe extern "C" fn xmlXPathContainsFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_contains_function`

warning: function `xmlXPathStartsWithFunction` should have a snake case name
     --> src/xpath.rs:10520:26
      |
10520 | pub unsafe extern "C" fn xmlXPathStartsWithFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_starts_with_function`

warning: function `xmlXPathSubstringFunction` should have a snake case name
     --> src/xpath.rs:10601:26
      |
10601 | pub unsafe extern "C" fn xmlXPathSubstringFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_substring_function`

warning: function `xmlXPathSubstringBeforeFunction` should have a snake case name
     --> src/xpath.rs:10728:26
      |
10728 | pub unsafe extern "C" fn xmlXPathSubstringBeforeFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_substring_before_function`

warning: function `xmlXPathSubstringAfterFunction` should have a snake case name
     --> src/xpath.rs:10791:26
      |
10791 | pub unsafe extern "C" fn xmlXPathSubstringAfterFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_substring_after_function`

warning: function `xmlXPathNormalizeFunction` should have a snake case name
     --> src/xpath.rs:10855:26
      |
10855 | pub unsafe extern "C" fn xmlXPathNormalizeFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_normalize_function`

warning: function `xmlXPathTranslateFunction` should have a snake case name
     --> src/xpath.rs:10948:26
      |
10948 | pub unsafe extern "C" fn xmlXPathTranslateFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_translate_function`

warning: function `xmlXPathBooleanFunction` should have a snake case name
     --> src/xpath.rs:11069:26
      |
11069 | pub unsafe extern "C" fn xmlXPathBooleanFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_boolean_function`

warning: function `xmlXPathNotFunction` should have a snake case name
     --> src/xpath.rs:11101:26
      |
11101 | pub unsafe extern "C" fn xmlXPathNotFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_not_function`

warning: function `xmlXPathTrueFunction` should have a snake case name
     --> src/xpath.rs:11135:26
      |
11135 | pub unsafe extern "C" fn xmlXPathTrueFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_true_function`

warning: function `xmlXPathFalseFunction` should have a snake case name
     --> src/xpath.rs:11159:26
      |
11159 | pub unsafe extern "C" fn xmlXPathFalseFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_false_function`

warning: function `xmlXPathLangFunction` should have a snake case name
     --> src/xpath.rs:11196:26
      |
11196 | pub unsafe extern "C" fn xmlXPathLangFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_lang_function`

warning: variable `theLang` should have a snake case name
     --> src/xpath.rs:11201:13
      |
11201 |     let mut theLang: *const xmlChar = 0 as *const xmlChar;
      |             ^^^^^^^ help: convert the identifier to snake case: `the_lang`

warning: function `xmlXPathNumberFunction` should have a snake case name
     --> src/xpath.rs:11332:26
      |
11332 | pub unsafe extern "C" fn xmlXPathNumberFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_number_function`

warning: function `xmlXPathSumFunction` should have a snake case name
     --> src/xpath.rs:11374:26
      |
11374 | pub unsafe extern "C" fn xmlXPathSumFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_sum_function`

warning: function `xmlXPathFloorFunction` should have a snake case name
     --> src/xpath.rs:11423:26
      |
11423 | pub unsafe extern "C" fn xmlXPathFloorFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_floor_function`

warning: function `xmlXPathCeilingFunction_rust2` should have a snake case name
     --> src/xpath.rs:11459:27
      |
11459 |  pub unsafe extern "C" fn xmlXPathCeilingFunction_rust2(mut ctxt: xmlXPathParserContextPtr,
      |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_ceiling_function_rust2`

warning: function `xmlXPathRoundFunction` should have a snake case name
     --> src/xpath.rs:11503:26
      |
11503 | pub unsafe extern "C" fn xmlXPathRoundFunction(mut ctxt:
      |                          ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_round_function`

warning: function `xmlXPathCurrentChar` should have a snake case name
     --> src/xpath.rs:11548:11
      |
11548 | unsafe fn xmlXPathCurrentChar(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_current_char`

warning: function `xmlXPathParseNCName` should have a snake case name
     --> src/xpath.rs:11695:15
      |
11695 | pub unsafe fn xmlXPathParseNCName(mut ctxt:
      |               ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_parse_ncname`

warning: function `xmlXPathParseQName` should have a snake case name
     --> src/xpath.rs:11758:11
      |
11758 | unsafe fn xmlXPathParseQName(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_parse_qname`

warning: function `xmlXPathParseName` should have a snake case name
     --> src/xpath.rs:11787:15
      |
11787 | pub unsafe fn xmlXPathParseName(mut ctxt: xmlXPathParserContextPtr)
      |               ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_parse_name`

warning: function `xmlXPathParseNameComplex` should have a snake case name
     --> src/xpath.rs:11833:11
      |
11833 | unsafe fn xmlXPathParseNameComplex(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_parse_name_complex`

warning: function `xmlXPathStringEvalNumber_rust2` should have a snake case name
     --> src/xpath.rs:12047:15
      |
12047 | pub unsafe fn xmlXPathStringEvalNumber_rust2(mut str: *const xmlChar, mut flag1: libc::c_int, mut flag2: libc::c_int)
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_string_eval_number_rust2`

warning: function `xmlXPathCompNumber` should have a snake case name
     --> src/xpath.rs:12187:11
      |
12187 | unsafe fn xmlXPathCompNumber(mut ctxt: xmlXPathParserContextPtr) {
      |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_number`

warning: function `xmlXPathParseLiteral` should have a snake case name
     --> src/xpath.rs:12311:11
      |
12311 | unsafe fn xmlXPathParseLiteral(mut ctxt: xmlXPathParserContextPtr)
      |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_parse_literal`

warning: function `xmlXPathCompLiteral` should have a snake case name
     --> src/xpath.rs:12390:11
      |
12390 | unsafe fn xmlXPathCompLiteral(mut ctxt: xmlXPathParserContextPtr) {
      |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_literal`

warning: function `xmlXPathCompVariableReference` should have a snake case name
     --> src/xpath.rs:12488:11
      |
12488 | unsafe fn xmlXPathCompVariableReference(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_variable_reference`

warning: function `xmlXPathIsNodeType` should have a snake case name
     --> src/xpath.rs:12555:15
      |
12555 | pub unsafe fn xmlXPathIsNodeType(mut name: *const xmlChar)
      |               ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_is_node_type`

warning: function `xmlXPathCompFunctionCall` should have a snake case name
     --> src/xpath.rs:12590:11
      |
12590 | unsafe fn xmlXPathCompFunctionCall(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_function_call`

warning: function `xmlXPathCompPrimaryExpr` should have a snake case name
     --> src/xpath.rs:12715:11
      |
12715 | unsafe fn xmlXPathCompPrimaryExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_primary_expr`

warning: function `xmlXPathCompFilterExpr` should have a snake case name
     --> src/xpath.rs:12792:11
      |
12792 | unsafe fn xmlXPathCompFilterExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_filter_expr`

warning: function `xmlXPathScanName` should have a snake case name
     --> src/xpath.rs:12832:11
      |
12832 | unsafe fn xmlXPathScanName(mut ctxt: xmlXPathParserContextPtr)
      |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_scan_name`

warning: function `xmlXPathCompPathExpr` should have a snake case name
     --> src/xpath.rs:12929:11
      |
12929 | unsafe fn xmlXPathCompPathExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_path_expr`

warning: function `xmlXPathCompUnionExpr` should have a snake case name
     --> src/xpath.rs:13121:11
      |
13121 | unsafe fn xmlXPathCompUnionExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_union_expr`

warning: function `xmlXPathCompUnaryExpr` should have a snake case name
     --> src/xpath.rs:13174:11
      |
13174 | unsafe fn xmlXPathCompUnaryExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_unary_expr`

warning: function `xmlXPathCompMultiplicativeExpr` should have a snake case name
     --> src/xpath.rs:13231:11
      |
13231 | unsafe fn xmlXPathCompMultiplicativeExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_multiplicative_expr`

warning: function `xmlXPathCompAdditiveExpr` should have a snake case name
     --> src/xpath.rs:13301:11
      |
13301 | unsafe fn xmlXPathCompAdditiveExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_additive_expr`

warning: function `xmlXPathCompRelationalExpr` should have a snake case name
     --> src/xpath.rs:13363:11
      |
13363 | unsafe fn xmlXPathCompRelationalExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_relational_expr`

warning: function `xmlXPathCompEqualityExpr` should have a snake case name
     --> src/xpath.rs:13434:11
      |
13434 | unsafe fn xmlXPathCompEqualityExpr(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_equality_expr`

warning: function `xmlXPathCompAndExpr` should have a snake case name
     --> src/xpath.rs:13496:11
      |
13496 | unsafe fn xmlXPathCompAndExpr(mut ctxt: xmlXPathParserContextPtr) {
      |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_and_expr`

warning: function `xmlXPathCompileExpr` should have a snake case name
     --> src/xpath.rs:13557:11
      |
13557 | unsafe fn xmlXPathCompileExpr(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compile_expr`

warning: function `xmlXPathCompPredicate` should have a snake case name
     --> src/xpath.rs:13636:11
      |
13636 | unsafe fn xmlXPathCompPredicate(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_predicate`

warning: function `xmlXPathCompNodeTest` should have a snake case name
     --> src/xpath.rs:13724:11
      |
13724 | unsafe fn xmlXPathCompNodeTest(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_node_test`

warning: function `xmlXPathIsAxisName` should have a snake case name
     --> src/xpath.rs:13918:11
      |
13918 | unsafe fn xmlXPathIsAxisName(mut name: *const xmlChar)
      |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_is_axis_name`

warning: function `xmlXPathCompStep` should have a snake case name
     --> src/xpath.rs:14037:11
      |
14037 | unsafe fn xmlXPathCompStep(mut ctxt: xmlXPathParserContextPtr) {
      |           ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_step`

warning: function `xmlXPathCompRelativeLocationPath` should have a snake case name
     --> src/xpath.rs:14257:11
      |
14257 | unsafe fn xmlXPathCompRelativeLocationPath(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_relative_location_path`

warning: function `xmlXPathCompLocationPath` should have a snake case name
     --> src/xpath.rs:14374:11
      |
14374 | unsafe fn xmlXPathCompLocationPath(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_location_path`

warning: function `xmlXPathNodeSetFilter` should have a snake case name
     --> src/xpath.rs:14455:11
      |
14455 | unsafe fn xmlXPathNodeSetFilter(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_set_filter`

warning: variable `filterOpIndex` should have a snake case name
     --> src/xpath.rs:14457:48
      |
14457 | ...                   mut filterOpIndex: libc::c_int,
      |                           ^^^^^^^^^^^^^ help: convert the identifier to snake case: `filter_op_index`

warning: variable `minPos` should have a snake case name
     --> src/xpath.rs:14458:48
      |
14458 | ...                   mut minPos: libc::c_int,
      |                           ^^^^^^ help: convert the identifier to snake case: `min_pos`

warning: variable `maxPos` should have a snake case name
     --> src/xpath.rs:14459:48
      |
14459 | ...                   mut maxPos: libc::c_int,
      |                           ^^^^^^ help: convert the identifier to snake case: `max_pos`

warning: variable `hasNsNodes` should have a snake case name
     --> src/xpath.rs:14460:48
      |
14460 | ...                   mut hasNsNodes: libc::c_int) {
      |                           ^^^^^^^^^^ help: convert the identifier to snake case: `has_ns_nodes`

warning: variable `filterOp` should have a snake case name
     --> src/xpath.rs:14464:13
      |
14464 |     let mut filterOp: xmlXPathStepOpPtr = 0 as *mut xmlXPathStepOp;
      |             ^^^^^^^^ help: convert the identifier to snake case: `filter_op`

warning: variable `nodeMax` should have a snake case name
     --> src/xpath.rs:14557:17
      |
14557 |         let mut nodeMax: libc::c_int = (*set).nodeNr;
      |                 ^^^^^^^ help: convert the identifier to snake case: `node_max`

warning: function `xmlXPathLocationSetFilter` should have a snake case name
     --> src/xpath.rs:14590:11
      |
14590 | unsafe fn xmlXPathLocationSetFilter(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_location_set_filter`

warning: variable `filterOpIndex` should have a snake case name
     --> src/xpath.rs:14593:52
      |
14593 | ...                   mut filterOpIndex: libc::c_int,
      |                           ^^^^^^^^^^^^^ help: convert the identifier to snake case: `filter_op_index`

warning: variable `minPos` should have a snake case name
     --> src/xpath.rs:14594:52
      |
14594 | ...                   mut minPos: libc::c_int,
      |                           ^^^^^^ help: convert the identifier to snake case: `min_pos`

warning: variable `maxPos` should have a snake case name
     --> src/xpath.rs:14595:52
      |
14595 | ...                   mut maxPos: libc::c_int) {
      |                           ^^^^^^ help: convert the identifier to snake case: `max_pos`

warning: variable `filterOp` should have a snake case name
     --> src/xpath.rs:14599:13
      |
14599 |     let mut filterOp: xmlXPathStepOpPtr = 0 as *mut xmlXPathStepOp;
      |             ^^^^^^^^ help: convert the identifier to snake case: `filter_op`

warning: variable `contextNode` should have a snake case name
     --> src/xpath.rs:14622:17
      |
14622 |         let mut contextNode: xmlNodePtr =
      |                 ^^^^^^^^^^^ help: convert the identifier to snake case: `context_node`

warning: variable `locMax` should have a snake case name
     --> src/xpath.rs:14680:17
      |
14680 |         let mut locMax: libc::c_int = (*locset).locNr;
      |                 ^^^^^^ help: convert the identifier to snake case: `loc_max`

warning: function `xmlXPathCompOpEvalPredicate` should have a snake case name
     --> src/xpath.rs:14715:11
      |
14715 | unsafe fn xmlXPathCompOpEvalPredicate(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_op_eval_predicate`

warning: variable `minPos` should have a snake case name
     --> src/xpath.rs:14719:54
      |
14719 | ...                   mut minPos: libc::c_int,
      |                           ^^^^^^ help: convert the identifier to snake case: `min_pos`

warning: variable `maxPos` should have a snake case name
     --> src/xpath.rs:14720:54
      |
14720 | ...                   mut maxPos: libc::c_int,
      |                           ^^^^^^ help: convert the identifier to snake case: `max_pos`

warning: variable `hasNsNodes` should have a snake case name
     --> src/xpath.rs:14721:54
      |
14721 | ...                   mut hasNsNodes:
      |                           ^^^^^^^^^^ help: convert the identifier to snake case: `has_ns_nodes`

warning: function `xmlXPathIsPositionalPredicate` should have a snake case name
     --> src/xpath.rs:14757:11
      |
14757 | unsafe fn xmlXPathIsPositionalPredicate(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_is_positional_predicate`

warning: variable `maxPos` should have a snake case name
     --> src/xpath.rs:14760:56
      |
14760 | ...                   mut maxPos:
      |                           ^^^^^^ help: convert the identifier to snake case: `max_pos`

warning: variable `exprOp` should have a snake case name
     --> src/xpath.rs:14763:13
      |
14763 |     let mut exprOp: xmlXPathStepOpPtr = 0 as *mut xmlXPathStepOp;
      |             ^^^^^^ help: convert the identifier to snake case: `expr_op`

warning: function `xmlXPathNodeCollectAndTest` should have a snake case name
     --> src/xpath.rs:14817:11
      |
14817 | unsafe fn xmlXPathNodeCollectAndTest(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_collect_and_test`

warning: variable `toBool` should have a snake case name
     --> src/xpath.rs:14822:53
      |
14822 | ...                   mut toBool: libc::c_int)
      |                           ^^^^^^ help: convert the identifier to snake case: `to_bool`

warning: variable `URI` should have a snake case name
     --> src/xpath.rs:14830:13
      |
14830 |     let mut URI: *const xmlChar = 0 as *const xmlChar;
      |             ^^^ help: convert the identifier to snake case: `uri`

warning: variable `hasNsNodes` should have a snake case name
     --> src/xpath.rs:14832:13
      |
14832 |     let mut hasNsNodes: libc::c_int = 0 as libc::c_int;
      |             ^^^^^^^^^^ help: convert the identifier to snake case: `has_ns_nodes`

warning: variable `contextSeq` should have a snake case name
     --> src/xpath.rs:14836:13
      |
14836 |     let mut contextSeq: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
      |             ^^^^^^^^^^ help: convert the identifier to snake case: `context_seq`

warning: variable `contextIdx` should have a snake case name
     --> src/xpath.rs:14837:13
      |
14837 |     let mut contextIdx: libc::c_int = 0;
      |             ^^^^^^^^^^ help: convert the identifier to snake case: `context_idx`

warning: variable `contextNode` should have a snake case name
     --> src/xpath.rs:14838:13
      |
14838 |     let mut contextNode: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^^^^^ help: convert the identifier to snake case: `context_node`

warning: variable `outSeq` should have a snake case name
     --> src/xpath.rs:14840:13
      |
14840 |     let mut outSeq: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
      |             ^^^^^^ help: convert the identifier to snake case: `out_seq`

warning: variable `predOp` should have a snake case name
     --> src/xpath.rs:14848:13
      |
14848 |     let mut predOp: xmlXPathStepOpPtr =
      |             ^^^^^^ help: convert the identifier to snake case: `pred_op`

warning: variable `maxPos` should have a snake case name
     --> src/xpath.rs:14851:13
      |
14851 |     let mut maxPos: libc::c_int = 0;
      |             ^^^^^^ help: convert the identifier to snake case: `max_pos`

warning: variable `hasPredicateRange` should have a snake case name
     --> src/xpath.rs:14852:13
      |
14852 |     let mut hasPredicateRange: libc::c_int = 0;
      |             ^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `has_predicate_range`

warning: variable `hasAxisRange` should have a snake case name
     --> src/xpath.rs:14853:13
      |
14853 |     let mut hasAxisRange: libc::c_int = 0;
      |             ^^^^^^^^^^^^ help: convert the identifier to snake case: `has_axis_range`

warning: variable `breakOnFirstHit` should have a snake case name
     --> src/xpath.rs:14855:13
      |
14855 |     let mut breakOnFirstHit: libc::c_int = 0;
      |             ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `break_on_first_hit`

warning: variable `addNode` should have a snake case name
     --> src/xpath.rs:14857:13
      |
14857 |     let mut addNode:
      |             ^^^^^^^ help: convert the identifier to snake case: `add_node`

warning: variable `mergeAndClear` should have a snake case name
     --> src/xpath.rs:14860:13
      |
14860 |     let mut mergeAndClear: xmlXPathNodeSetMergeFunction = None;
      |             ^^^^^^^^^^^^^ help: convert the identifier to snake case: `merge_and_clear`

warning: variable `oldContextNode` should have a snake case name
     --> src/xpath.rs:14861:13
      |
14861 |     let mut oldContextNode: xmlNodePtr = 0 as *mut xmlNode;
      |             ^^^^^^^^^^^^^^ help: convert the identifier to snake case: `old_context_node`

warning: function `xmlXPathCompOpEvalFirst` should have a snake case name
     --> src/xpath.rs:16894:11
      |
16894 | unsafe fn xmlXPathCompOpEvalFirst(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_op_eval_first`

warning: function `xmlXPathCompOpEvalLast` should have a snake case name
     --> src/xpath.rs:17092:11
      |
17092 | unsafe fn xmlXPathCompOpEvalLast(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_op_eval_last`

warning: unused logical operation that must be used
     --> src/xpath.rs:17154:13
      |
17154 | /             (!(*ctxt).value.is_null() &&
17155 | |                  (*(*ctxt).value).type_0 as libc::c_uint ==
17156 | |                      XPATH_NODESET as libc::c_int as libc::c_uint &&
17157 | |                  !(*(*ctxt).value).nodesetval.is_null()) &&
17158 | |                 (*(*(*ctxt).value).nodesetval).nodeNr >= 1 as libc::c_int;
      | |_________________________________________________________________________^ the logical operation produces a value
      |
      = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
      |
17154 |             let _ = (!(*ctxt).value.is_null() &&
      |             +++++++

warning: function `xmlXPathCompOpEval` should have a snake case name
     --> src/xpath.rs:17385:11
      |
17385 | unsafe fn xmlXPathCompOpEval(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_op_eval`

warning: variable `URI` should have a snake case name
     --> src/xpath.rs:17682:25
      |
17682 |                 let mut URI: *const xmlChar = 0 as *const xmlChar;
      |                         ^^^ help: convert the identifier to snake case: `uri`

warning: variable `oldFunc` should have a snake case name
     --> src/xpath.rs:17717:21
      |
17717 |             let mut oldFunc: *const xmlChar = 0 as *const xmlChar;
      |                     ^^^^^^^ help: convert the identifier to snake case: `old_func`

warning: variable `oldFuncURI` should have a snake case name
     --> src/xpath.rs:17718:21
      |
17718 |             let mut oldFuncURI: *const xmlChar = 0 as *const xmlChar;
      |                     ^^^^^^^^^^ help: convert the identifier to snake case: `old_func_uri`

warning: variable `URI_0` should have a snake case name
     --> src/xpath.rs:17768:37
      |
17768 | ...                   let mut URI_0: *const xmlChar =
      |                               ^^^^^ help: convert the identifier to snake case: `uri_0`

warning: function `xmlXPathCompOpEvalToBoolean` should have a snake case name
     --> src/xpath.rs:18353:11
      |
18353 | unsafe fn xmlXPathCompOpEvalToBoolean(mut ctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_comp_op_eval_to_boolean`

warning: variable `isPredicate` should have a snake case name
     --> src/xpath.rs:18356:54
      |
18356 | ...                   mut isPredicate: libc::c_int)
      |                           ^^^^^^^^^^^ help: convert the identifier to snake case: `is_predicate`

warning: variable `resObj` should have a snake case name
     --> src/xpath.rs:18358:13
      |
18358 |     let mut resObj: xmlXPathObjectPtr = 0 as xmlXPathObjectPtr;
      |             ^^^^^^ help: convert the identifier to snake case: `res_obj`

warning: function `xmlXPathRunStreamEval` should have a snake case name
     --> src/xpath.rs:18447:11
      |
18447 | unsafe fn xmlXPathRunStreamEval(mut ctxt: xmlXPathContextPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_run_stream_eval`

warning: variable `resultSeq` should have a snake case name
     --> src/xpath.rs:18449:48
      |
18449 | ...                   mut resultSeq:
      |                           ^^^^^^^^^ help: convert the identifier to snake case: `result_seq`

warning: variable `toBool` should have a snake case name
     --> src/xpath.rs:18451:48
      |
18451 | ...                   mut toBool: libc::c_int)
      |                           ^^^^^^ help: convert the identifier to snake case: `to_bool`

warning: function `xmlXPathRunEval` should have a snake case name
     --> src/xpath.rs:18752:11
      |
18752 | unsafe fn xmlXPathRunEval(mut ctxt: xmlXPathParserContextPtr,
      |           ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_run_eval`

warning: variable `toBool` should have a snake case name
     --> src/xpath.rs:18753:42
      |
18753 | ...                   mut toBool: libc::c_int) -> libc::c_int {
      |                           ^^^^^^ help: convert the identifier to snake case: `to_bool`

warning: variable `resObj` should have a snake case name
     --> src/xpath.rs:18794:21
      |
18794 |             let mut resObj: xmlXPathObjectPtr = 0 as xmlXPathObjectPtr;
      |                     ^^^^^^ help: convert the identifier to snake case: `res_obj`

warning: function `xmlXPathEvalPredicate` should have a snake case name
     --> src/xpath.rs:18854:15
      |
18854 | pub unsafe fn xmlXPathEvalPredicate(mut ctxt: xmlXPathContextPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_eval_predicate`

warning: function `xmlXPathEvaluatePredicateResult_rust2` should have a snake case name
     --> src/xpath.rs:18911:16
      |
18911 |  pub unsafe fn xmlXPathEvaluatePredicateResult_rust2(mut ctxt: xmlXPathParserContextPtr,
      |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_evaluate_predicate_result_rust2`

warning: function `xmlXPathTryStreamCompile` should have a snake case name
     --> src/xpath.rs:18976:11
      |
18976 | unsafe fn xmlXPathTryStreamCompile(mut ctxt: xmlXPathContextPtr,
      |           ^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_try_stream_compile`

warning: function `xmlXPathOptimizeExpression` should have a snake case name
     --> src/xpath.rs:19085:11
      |
19085 | unsafe fn xmlXPathOptimizeExpression(mut pctxt:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_optimize_expression`

warning: function `xmlXPathCtxtCompile_rust2` should have a snake case name
     --> src/xpath.rs:19171:15
      |
19171 | pub unsafe fn xmlXPathCtxtCompile_rust2(mut ctxt: xmlXPathContextPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_ctxt_compile_rust2`

warning: function `xmlXPathCompile` should have a snake case name
     --> src/xpath.rs:19242:15
      |
19242 | pub unsafe fn xmlXPathCompile(mut str: *const xmlChar)
      |               ^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compile`

warning: function `xmlXPathCompiledEvalInternal` should have a snake case name
     --> src/xpath.rs:19259:11
      |
19259 | unsafe fn xmlXPathCompiledEvalInternal(mut comp:
      |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compiled_eval_internal`

warning: variable `resObjPtr` should have a snake case name
     --> src/xpath.rs:19263:55
      |
19263 | ...                   mut resObjPtr:
      |                           ^^^^^^^^^ help: convert the identifier to snake case: `res_obj_ptr`

warning: variable `toBool` should have a snake case name
     --> src/xpath.rs:19265:55
      |
19265 | ...                   mut toBool: libc::c_int)
      |                           ^^^^^^ help: convert the identifier to snake case: `to_bool`

warning: variable `resObj` should have a snake case name
     --> src/xpath.rs:19268:13
      |
19268 |     let mut resObj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
      |             ^^^^^^ help: convert the identifier to snake case: `res_obj`

warning: function `xmlXPathCompiledEval` should have a snake case name
     --> src/xpath.rs:19328:15
      |
19328 | pub unsafe fn xmlXPathCompiledEval(mut comp: xmlXPathCompExprPtr,
      |               ^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compiled_eval`

warning: function `xmlXPathCompiledEvalToBoolean` should have a snake case name
     --> src/xpath.rs:19347:15
      |
19347 | pub unsafe fn xmlXPathCompiledEvalToBoolean(mut comp:
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_compiled_eval_to_boolean`

warning: function `xmlXPathEvalExpr_rust2` should have a snake case name
     --> src/xpath.rs:19364:15
      |
19364 | pub unsafe fn xmlXPathEvalExpr_rust2(mut ctxt: xmlXPathParserContextPtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_eval_expr_rust2`

warning: function `xmlXPathEval` should have a snake case name
     --> src/xpath.rs:19440:15
      |
19440 | pub unsafe fn xmlXPathEval(mut str: *const xmlChar,
      |               ^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_eval`

warning: function `xmlXPathSetContextNode` should have a snake case name
     --> src/xpath.rs:19497:15
      |
19497 | pub unsafe fn xmlXPathSetContextNode(mut node: xmlNodePtr,
      |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_set_context_node`

warning: function `xmlXPathNodeEval` should have a snake case name
     --> src/xpath.rs:19520:15
      |
19520 | pub unsafe fn xmlXPathNodeEval(mut node: xmlNodePtr,
      |               ^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_node_eval`

warning: function `xmlXPathEvalExpression` should have a snake case name
     --> src/xpath.rs:19541:15
      |
19541 | pub unsafe fn xmlXPathEvalExpression(mut str: *const xmlChar,
      |               ^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_eval_expression`

warning: function `xmlXPathEscapeUriFunction` should have a snake case name
     --> src/xpath.rs:19599:22
      |
19599 | unsafe extern "C" fn xmlXPathEscapeUriFunction(mut ctxt:
      |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_escape_uri_function`

warning: function `xmlXPathRegisterAllFunctions` should have a snake case name
     --> src/xpath.rs:19727:15
      |
19727 | pub unsafe fn xmlXPathRegisterAllFunctions(mut ctxt:
      |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `xml_xpath_register_all_functions`

warning: variable `funcCtxt` should have a snake case name
   --> src/xpath_rust.rs:482:5
    |
482 | mut funcCtxt:
    |     ^^^^^^^^ help: convert the identifier to snake case: `func_ctxt`

warning: `rust_project` (lib) generated 3982 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 5.58s
